#!/usr/bin/env python3
"""
–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
"""

import psycopg2
import yaml
import time
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

# –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
progress_history = []

def get_progress():
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM processed_market_data")
    total = cursor.fetchone()[0]
    
    cursor.execute("""
        SELECT COUNT(*) 
        FROM processed_market_data 
        WHERE technical_indicators->>'buy_expected_return' IS NOT NULL
    """)
    completed = cursor.fetchone()[0]
    
    conn.close()
    return total, completed

# –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
print("üîÑ –ò–∑–º–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
for i in range(4):
    total, completed = get_progress()
    progress_history.append((time.time(), completed))
    print(f"   {i+1}/4: {completed:,} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    if i < 3:
        time.sleep(10)

# –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
if len(progress_history) >= 2:
    time_diff = progress_history[-1][0] - progress_history[0][0]
    records_diff = progress_history[-1][1] - progress_history[0][1]
    
    if time_diff > 0 and records_diff > 0:
        speed = records_diff / time_diff  # –∑–∞–ø–∏—Å–µ–π –≤ —Å–µ–∫—É–Ω–¥—É
        
        total, completed = get_progress()
        remaining = total - completed
        
        if speed > 0:
            eta_seconds = remaining / speed
            eta = datetime.now() + timedelta(seconds=eta_seconds)
            
            print("\n="*60)
            print("üìä –û–¶–ï–ù–ö–ê –í–†–ï–ú–ï–ù–ò –ó–ê–í–ï–†–®–ï–ù–ò–Ø")
            print("="*60)
            print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total:,}")
            print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {completed:,} ({completed/total*100:.1f}%)")
            print(f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:,}")
            print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")
            print(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {eta.strftime('%H:%M:%S')}")
            print(f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {int(eta_seconds//60)} –º–∏–Ω—É—Ç")
            print("="*60)
        else:
            print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –¥–≤–∏–∂–µ—Ç—Å—è")
    else:
        print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏")
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")