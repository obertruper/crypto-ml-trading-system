#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
"""

import psycopg2
import yaml
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    logger.info(f"   –•–æ—Å—Ç: {db_config['host']}")
    logger.info(f"   –ü–æ—Ä—Ç: {db_config['port']}")
    logger.info(f"   –ë–∞–∑–∞: {db_config['dbname']}")
    logger.info(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_config['user']}")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        conn = psycopg2.connect(
            host=db_config['host'],
            port=db_config['port'],
            dbname=db_config['dbname'],
            user=db_config['user'],
            password=db_config['password']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        with conn.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"   PostgreSQL –≤–µ—Ä—Å–∏—è: {version}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            
            if tables:
                logger.info(f"\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:")
                for table in tables:
                    cursor.execute(f"SELECT COUNT(*) FROM {table[0]}")
                    count = cursor.fetchone()[0]
                    logger.info(f"   - {table[0]}: {count:,} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.info("\n‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ init_database.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î")
        
        conn.close()
        
        logger.info("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        logger.info("   1. python init_database.py  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü")
        logger.info("   2. python download_data.py  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (25 –ø–æ—Ç–æ–∫–æ–≤)")
        
    except psycopg2.OperationalError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        logger.info("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        logger.info("   1. PostgreSQL –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5555")
        logger.info("   2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 'ruslan' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        logger.info("   3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö 'crypto_trading' —Å–æ–∑–¥–∞–Ω–∞")
        logger.info("   4. –ü–∞—Ä–æ–ª—å –≤ config.yaml –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_connection()