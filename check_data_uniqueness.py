#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ expected_return –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import psycopg2
import yaml
import numpy as np
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ expected_return")
print("="*60)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(**db_config)
cursor = conn.cursor()

# –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
query = """
SELECT 
    symbol,
    buy_expected_return,
    sell_expected_return,
    datetime
FROM processed_market_data
WHERE buy_expected_return IS NOT NULL
  AND sell_expected_return IS NOT NULL
ORDER BY symbol, timestamp
LIMIT 100000
"""

print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
df = pd.read_sql_query(query, conn)
print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")

# –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
print("\nüìà –ê–Ω–∞–ª–∏–∑ buy_expected_return:")
buy_unique = df['buy_expected_return'].nunique()
buy_total = len(df)
buy_pct = (buy_unique / buy_total) * 100
print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {buy_unique:,} –∏–∑ {buy_total:,} ({buy_pct:.1f}%)")
print(f"   –¢–æ–ø-10 —á–∞—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:")
print(df['buy_expected_return'].value_counts().head(10))

print("\nüìà –ê–Ω–∞–ª–∏–∑ sell_expected_return:")
sell_unique = df['sell_expected_return'].nunique()
sell_total = len(df)
sell_pct = (sell_unique / sell_total) * 100
print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {sell_unique:,} –∏–∑ {sell_total:,} ({sell_pct:.1f}%)")
print(f"   –¢–æ–ø-10 —á–∞—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:")
print(df['sell_expected_return'].value_counts().head(10))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
print("\nüìä –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
for symbol in df['symbol'].unique()[:5]:
    symbol_df = df[df['symbol'] == symbol]
    buy_u = symbol_df['buy_expected_return'].nunique()
    sell_u = symbol_df['sell_expected_return'].nunique()
    total = len(symbol_df)
    print(f"   {symbol}: buy={buy_u}/{total} ({buy_u/total*100:.1f}%), sell={sell_u}/{total} ({sell_u/total*100:.1f}%)")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
print("\nüìä –î–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π:")
print(f"   Buy min/max: {df['buy_expected_return'].min():.4f} / {df['buy_expected_return'].max():.4f}")
print(f"   Sell min/max: {df['sell_expected_return'].min():.4f} / {df['sell_expected_return'].max():.4f}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
buy_zeros = (df['buy_expected_return'] == 0).sum()
sell_zeros = (df['sell_expected_return'] == 0).sum()
print(f"\n‚ö†Ô∏è  –ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
print(f"   Buy: {buy_zeros} ({buy_zeros/len(df)*100:.1f}%)")
print(f"   Sell: {sell_zeros} ({sell_zeros/len(df)*100:.1f}%)")

if buy_pct < 20 or sell_pct < 20:
    print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ê–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–¨!")
    print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é prepare_dataset.py")
    print("   –∏–ª–∏ recalculate_realistic_data.py")
else:
    print("\n‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ")

cursor.close()
conn.close()