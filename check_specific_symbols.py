#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ —Ñ—å—é—á–µ—Ä—Å–∞—Ö
"""

from pybit.unified_trading import HTTP
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_symbols_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö"""
    session = HTTP(testnet=False)
    
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    symbols_to_check = [
        'TIAUSDT', 'TONUSDT', 'TRXUSDT', 'TWTUSDT', 
        'UNIUSDT', 'WIFUSDT', 'XRPUSDT'
    ]
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ Bybit\n")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤
    futures_response = session.get_instruments_info(category="linear")
    futures_symbols = set()
    if futures_response['retCode'] == 0:
        for inst in futures_response['result']['list']:
            futures_symbols.add(inst['symbol'])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–∞—Ä
    spot_response = session.get_instruments_info(category="spot")
    spot_symbols = set()
    if spot_response['retCode'] == 0:
        for inst in spot_response['result']['list']:
            spot_symbols.add(inst['symbol'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
    for symbol in symbols_to_check:
        in_futures = symbol in futures_symbols
        in_spot = symbol in spot_symbols
        
        logger.info(f"{symbol}:")
        logger.info(f"  üìà –°–ø–æ—Ç: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if in_spot else '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}")
        logger.info(f"  üîÆ –§—å—é—á–µ—Ä—Å—ã: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if in_futures else '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
        if not in_futures:
            base = symbol.replace('USDT', '')
            alternatives = []
            for f_symbol in futures_symbols:
                if base in f_symbol and 'USDT' in f_symbol:
                    alternatives.append(f_symbol)
            
            if alternatives:
                logger.info(f"  üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö: {', '.join(alternatives)}")
        
        logger.info("")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    logger.info(f"  - –í—Å–µ–≥–æ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {len(futures_symbols)}")
    logger.info(f"  - –í—Å–µ–≥–æ —Å–ø–æ—Ç–æ–≤—ã—Ö –ø–∞—Ä: {len(spot_symbols)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º XRP –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ (–∫–∞–∫ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –º–æ–Ω–µ—Ç—É)
    logger.info("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ XRP:")
    xrp_futures = [s for s in futures_symbols if 'XRP' in s]
    if xrp_futures:
        logger.info(f"  –§—å—é—á–µ—Ä—Å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å XRP: {', '.join(sorted(xrp_futures))}")
    else:
        logger.info("  ‚ùå XRP –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤
    logger.info("\nüìà –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö:")
    popular = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'DOGEUSDT', 'ADAUSDT']
    for symbol in popular:
        if symbol in futures_symbols:
            logger.info(f"  ‚úÖ {symbol}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
    logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π:")
    for symbol in symbols_to_check:
        base = symbol.replace('USDT', '')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 1000
        variant_1000 = f"1000{symbol}"
        variant_10000 = f"10000{symbol}"
        
        if variant_1000 in futures_symbols:
            logger.info(f"  üí° {symbol} -> {variant_1000} (–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö)")
        elif variant_10000 in futures_symbols:
            logger.info(f"  üí° {symbol} -> {variant_10000} (–Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö)")
    
    # –î–µ–±–∞–≥: –ø–æ–∫–∞–∂–µ–º –≤—Å–µ —Ñ—å—é—á–µ—Ä—Å—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
    logger.info("\nüîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö:")
    search_tokens = ['XRP', 'TRX', 'TON', 'UNI', 'TIA', 'TWT', 'WIF']
    
    for token in search_tokens:
        found = [s for s in futures_symbols if token in s and 'USDT' in s]
        if found:
            logger.info(f"  {token}: {', '.join(sorted(found))}")
        else:
            logger.info(f"  {token}: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == "__main__":
    check_symbols_availability()