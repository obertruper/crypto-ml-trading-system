#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
"""

import pandas as pd
import numpy as np
import psycopg2
from psycopg2.extras import Json
import logging
import yaml

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class PostgreSQLManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL"""
    
    def __init__(self, db_config: dict):
        self.db_config = db_config.copy()
        if not self.db_config.get('password'):
            self.db_config.pop('password', None)
        self.connection = None
    
    def connect(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            self.connection = psycopg2.connect(**self.db_config)
            self.connection.autocommit = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise
    
    def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        if self.connection:
            self.connection.close()
            logger.info("üì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
    
    def fetch_dataframe(self, query: str, params=None) -> pd.DataFrame:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ DataFrame"""
        try:
            return pd.read_sql_query(query, self.connection, params=params)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ DataFrame: {e}")
            raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    db_manager = PostgreSQLManager(db_config)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        db_manager.connect()
        
        logger.info("\n" + "="*80)
        logger.info("–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø")
        logger.info("="*80 + "\n")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        query_total = """
        SELECT COUNT(*) as total_count
        FROM processed_market_data
        WHERE technical_indicators IS NOT NULL
        """
        df_total = db_manager.fetch_dataframe(query_total)
        logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏: {df_total['total_count'].iloc[0]:,}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        query_regression = """
        SELECT 
            p.symbol, p.timestamp, p.datetime,
            p.technical_indicators,
            p.buy_expected_return,
            p.sell_expected_return,
            p.open, p.high, p.low, p.close, p.volume
        FROM processed_market_data p
        JOIN raw_market_data r ON p.raw_data_id = r.id
        WHERE p.technical_indicators IS NOT NULL
          AND r.market_type = 'futures'
          AND (p.buy_expected_return <> 0 OR p.sell_expected_return <> 0)
        ORDER BY p.symbol, p.timestamp
        LIMIT 100
        """
        
        df_regression = db_manager.fetch_dataframe(query_regression)
        logger.info(f"\nüìà –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (–ø–µ—Ä–≤—ã–µ 100 –∑–∞–ø–∏—Å–µ–π):")
        logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(df_regression)}")
        
        if len(df_regression) > 0:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ expected returns
            logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ buy_expected_return:")
            logger.info(f"   Min: {df_regression['buy_expected_return'].min():.4f}%")
            logger.info(f"   Max: {df_regression['buy_expected_return'].max():.4f}%")
            logger.info(f"   Mean: {df_regression['buy_expected_return'].mean():.4f}%")
            logger.info(f"   Std: {df_regression['buy_expected_return'].std():.4f}%")
            logger.info(f"   –ù–µ–Ω—É–ª–µ–≤—ã—Ö: {(df_regression['buy_expected_return'] != 0).sum()}")
            
            logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ sell_expected_return:")
            logger.info(f"   Min: {df_regression['sell_expected_return'].min():.4f}%")
            logger.info(f"   Max: {df_regression['sell_expected_return'].max():.4f}%")
            logger.info(f"   Mean: {df_regression['sell_expected_return'].mean():.4f}%")
            logger.info(f"   Std: {df_regression['sell_expected_return'].std():.4f}%")
            logger.info(f"   –ù–µ–Ω—É–ª–µ–≤—ã—Ö: {(df_regression['sell_expected_return'] != 0).sum()}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ technical_indicators
            first_row = df_regression.iloc[0]
            indicators = first_row['technical_indicators']
            
            logger.info(f"\nüîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–ø–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å):")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicators)}")
            logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
            for key in list(indicators.keys())[:10]:
                logger.info(f"     {key}: {indicators[key]}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è expected returns –≤ JSON
            json_buy_return = indicators.get('buy_expected_return', 'NOT FOUND')
            json_sell_return = indicators.get('sell_expected_return', 'NOT FOUND')
            
            logger.info(f"\n‚ö†Ô∏è Expected returns –≤ JSON:")
            logger.info(f"   buy_expected_return –≤ JSON: {json_buy_return}")
            logger.info(f"   sell_expected_return –≤ JSON: {json_sell_return}")
            logger.info(f"   buy_expected_return –≤ –∫–æ–ª–æ–Ω–∫–µ: {first_row['buy_expected_return']}")
            logger.info(f"   sell_expected_return –≤ –∫–æ–ª–æ–Ω–∫–µ: {first_row['sell_expected_return']}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ train_universal_transformer.py
        query_full_count = """
        SELECT COUNT(*) as count
        FROM processed_market_data p
        JOIN raw_market_data r ON p.raw_data_id = r.id
        WHERE p.technical_indicators IS NOT NULL
          AND r.market_type = 'futures'
          AND (p.buy_expected_return <> 0 OR p.sell_expected_return <> 0)
        """
        
        df_count = db_manager.fetch_dataframe(query_full_count)
        logger.info(f"\n‚úÖ –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏: {df_count['count'].iloc[0]:,}")
        
        # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        query_symbols = """
        SELECT p.symbol, COUNT(*) as count
        FROM processed_market_data p
        JOIN raw_market_data r ON p.raw_data_id = r.id
        WHERE p.technical_indicators IS NOT NULL
          AND r.market_type = 'futures'
          AND (p.buy_expected_return <> 0 OR p.sell_expected_return <> 0)
        GROUP BY p.symbol
        ORDER BY count DESC
        """
        
        df_symbols = db_manager.fetch_dataframe(query_symbols)
        logger.info(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
        for _, row in df_symbols.iterrows():
            logger.info(f"   {row['symbol']}: {row['count']:,} –∑–∞–ø–∏—Å–µ–π")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        query_classification = """
        SELECT 
            SUM(buy_profit_target) as buy_profits,
            SUM(buy_loss_target) as buy_losses,
            SUM(sell_profit_target) as sell_profits,
            SUM(sell_loss_target) as sell_losses
        FROM processed_market_data p
        JOIN raw_market_data r ON p.raw_data_id = r.id
        WHERE p.technical_indicators IS NOT NULL
          AND r.market_type = 'futures'
        """
        
        df_class = db_manager.fetch_dataframe(query_classification)
        logger.info(f"\nüéØ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:")
        logger.info(f"   BUY –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {int(df_class['buy_profits'].iloc[0]):,}")
        logger.info(f"   BUY —É–±—ã—Ç–æ—á–Ω—ã—Ö: {int(df_class['buy_losses'].iloc[0]):,}")
        logger.info(f"   SELL –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {int(df_class['sell_profits'].iloc[0]):,}")
        logger.info(f"   SELL —É–±—ã—Ç–æ—á–Ω—ã—Ö: {int(df_class['sell_losses'].iloc[0]):,}")
        
        logger.info(f"\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db_manager.disconnect()


if __name__ == "__main__":
    main()