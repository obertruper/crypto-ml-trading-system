#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ expected_return
"""

import psycopg2
import yaml
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

conn = psycopg2.connect(**db_config)
cursor = conn.cursor()

print("="*80)
print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –õ–û–ì–ò–ö–ò –†–ê–°–ß–ï–¢–ê")
print("="*80)

# 1. –ë–µ—Ä–µ–º —Å–∏–º–≤–æ–ª —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
cursor.execute("""
    SELECT DISTINCT symbol 
    FROM processed_market_data 
    WHERE symbol IN ('BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT')
    LIMIT 1
""")
result = cursor.fetchone()

if not result:
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö, –±–µ—Ä–µ–º –ª—é–±–æ–π –∫—Ä–æ–º–µ PEPE
    cursor.execute("""
        SELECT DISTINCT symbol 
        FROM processed_market_data 
        WHERE symbol NOT LIKE '%PEPE%'
        LIMIT 1
    """)
    result = cursor.fetchone()

if not result:
    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ!")
    conn.close()
    exit()

symbol = result[0]
print(f"\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª: {symbol}")

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
query = """
WITH numbered_data AS (
    SELECT 
        p.symbol,
        p.datetime,
        r.close as entry_price,
        r.high,
        r.low,
        p.buy_expected_return,
        p.sell_expected_return,
        ROW_NUMBER() OVER (ORDER BY p.datetime) as row_num
    FROM processed_market_data p
    JOIN raw_market_data r ON p.symbol = r.symbol AND p.datetime = r.datetime
    WHERE p.symbol = %s
    ORDER BY p.datetime
    LIMIT 20
)
SELECT * FROM numbered_data
"""

df = pd.read_sql(query, conn, params=(symbol,))

print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞:")
print("-"*100)
print(f"{'#':>3} {'–í—Ä–µ–º—è':<20} {'–¶–µ–Ω–∞':>10} {'High':>10} {'Low':>10} {'Buy Ret':>10} {'Sell Ret':>10} {'–ò–∑–º–µ–Ω–µ–Ω–∏–µ':>15}")
print("-"*100)

prev_buy = None
prev_sell = None

for i, row in df.iterrows():
    change = ""
    if prev_buy is not None:
        if row['buy_expected_return'] == prev_buy and row['sell_expected_return'] == prev_sell:
            change = "‚ö†Ô∏è SAME!"
        else:
            change = "‚úÖ Different"
    
    print(f"{row['row_num']:>3} {str(row['datetime']):<20} {row['entry_price']:>10.4f} {row['high']:>10.4f} {row['low']:>10.4f} {row['buy_expected_return']:>10.3f}% {row['sell_expected_return']:>10.3f}% {change:>15}")
    
    prev_buy = row['buy_expected_return']
    prev_sell = row['sell_expected_return']

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
print(f"\n\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò:")
unique_buy = df['buy_expected_return'].nunique()
unique_sell = df['sell_expected_return'].nunique()
total = len(df)

print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö buy_expected_return: {unique_buy} ({unique_buy/total*100:.1f}%)")
print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö sell_expected_return: {unique_sell} ({unique_sell/total*100:.1f}%)")

# 4. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
print(f"\n\nüìä –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ó–ù–ê–ß–ï–ù–ò–Ø–ú:")
grouped = df.groupby(['buy_expected_return', 'sell_expected_return']).size().reset_index(name='count')
grouped = grouped.sort_values('count', ascending=False)

print(f"\n{'Buy Return':>12} {'Sell Return':>12} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':>12}")
print("-"*40)
for _, row in grouped.head(10).iterrows():
    print(f"{row['buy_expected_return']:>12.3f}% {row['sell_expected_return']:>12.3f}% {row['count']:>12}")

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
print(f"\n\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô:")
buy_values = df['buy_expected_return'].value_counts()
print(f"\n–¢–æ–ø-5 –∑–Ω–∞—á–µ–Ω–∏–π buy_expected_return:")
for val, count in buy_values.head().items():
    print(f"  {val:>8.3f}%: {count} —Ä–∞–∑")

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
print(f"\n\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–õ–Ø–¶–ò–ò –° –î–í–ò–ñ–ï–ù–ò–ï–ú –¶–ï–ù–´:")
df['price_change'] = ((df['high'] - df['low']) / df['entry_price'] * 100).round(3)
df['has_movement'] = df['price_change'] > 0.5  # –î–≤–∏–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0.5%

static_returns = df[df['price_change'] < 0.1]  # –ú–∞–ª–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
volatile_returns = df[df['price_change'] > 1.0]  # –ë–æ–ª—å—à–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ

print(f"\n–ü—Ä–∏ –º–∞–ª–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã (<0.1%):")
if len(static_returns) > 0:
    print(f"  –°—Ä–µ–¥–Ω–µ–µ buy_return: {static_returns['buy_expected_return'].mean():.3f}%")
    print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {static_returns['buy_expected_return'].nunique()}")

print(f"\n–ü—Ä–∏ –±–æ–ª—å—à–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã (>1%):")
if len(volatile_returns) > 0:
    print(f"  –°—Ä–µ–¥–Ω–µ–µ buy_return: {volatile_returns['buy_expected_return'].mean():.3f}%")
    print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {volatile_returns['buy_expected_return'].nunique()}")

conn.close()

print("\n\nüí° –í–´–í–û–î–´:")
print("1. –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ")
print("2. Expected return –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞")
print("3. –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é —Ä—ã–Ω–∫–∞")