#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö processed_market_data
"""

import psycopg2
import yaml
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

print("="*100)
print("–ü–û–õ–ù–ê–Ø –°–•–ï–ú–ê –¢–ê–ë–õ–ò–¶–´ processed_market_data")
print("="*100)

try:
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
    cursor.execute("""
        SELECT 
            column_name,
            data_type,
            character_maximum_length,
            is_nullable,
            column_default
        FROM information_schema.columns 
        WHERE table_name = 'processed_market_data' 
        ORDER BY ordinal_position
    """)
    
    columns = cursor.fetchall()
    
    print(f"\nüìã –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns)}\n")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø–∞–º
    base_columns = []
    target_columns = []
    expected_return_columns = []
    entry_columns = []
    other_columns = []
    
    for col_name, data_type, max_length, nullable, default in columns:
        col_info = {
            'name': col_name,
            'type': data_type,
            'nullable': nullable,
            'default': default
        }
        
        if col_name in ['id', 'raw_data_id', 'symbol', 'timestamp', 'datetime', 
                       'open', 'high', 'low', 'close', 'volume']:
            base_columns.append(col_info)
        elif 'target' in col_name:
            target_columns.append(col_info)
        elif 'expected_return' in col_name or 'max_profit' in col_name or 'realized_profit' in col_name:
            expected_return_columns.append(col_info)
        elif 'entry' in col_name:
            entry_columns.append(col_info)
        else:
            other_columns.append(col_info)
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–∞–º
    print("üîπ –ë–ê–ó–û–í–´–ï –ö–û–õ–û–ù–ö–ò:")
    for col in base_columns:
        print(f"   - {col['name']:<25} {col['type']:<20} (nullable: {col['nullable']})")
    
    print("\nüéØ –¶–ï–õ–ï–í–´–ï –ö–û–õ–û–ù–ö–ò (TARGETS):")
    for col in target_columns:
        print(f"   - {col['name']:<25} {col['type']:<20} (default: {col['default']})")
    
    print("\nüí∞ –ö–û–õ–û–ù–ö–ò –û–ñ–ò–î–ê–ï–ú–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    for col in expected_return_columns:
        print(f"   - {col['name']:<25} {col['type']:<20} (default: {col['default']})")
    
    print("\nüöÄ –ö–û–õ–û–ù–ö–ò –¢–û–ß–ï–ö –í–•–û–î–ê:")
    for col in entry_columns:
        print(f"   - {col['name']:<25} {col['type']:<20} (default: {col['default']})")
    
    print("\nüìä –ü–†–û–ß–ò–ï –ö–û–õ–û–ù–ö–ò:")
    for col in other_columns:
        print(f"   - {col['name']:<25} {col['type']:<20}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    print("\n" + "="*100)
    print("–ò–ù–î–ï–ö–°–´ –ù–ê –¢–ê–ë–õ–ò–¶–ï processed_market_data")
    print("="*100)
    
    cursor.execute("""
        SELECT 
            indexname,
            indexdef
        FROM pg_indexes 
        WHERE tablename = 'processed_market_data'
        ORDER BY indexname
    """)
    
    indexes = cursor.fetchall()
    print(f"\nüìë –í—Å–µ–≥–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(indexes)}\n")
    
    for idx_name, idx_def in indexes:
        print(f"üî∏ {idx_name}")
        print(f"   {idx_def}\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    print("="*100)
    print("–ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–•")
    print("="*100)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    cursor.execute("""
        SELECT 
            symbol,
            timestamp,
            buy_expected_return,
            sell_expected_return,
            buy_max_profit,
            sell_max_profit,
            buy_realized_profit,
            sell_realized_profit,
            is_long_entry,
            is_short_entry
        FROM processed_market_data 
        WHERE buy_expected_return IS NOT NULL 
           OR sell_expected_return IS NOT NULL
        LIMIT 5
    """)
    
    sample_data = cursor.fetchall()
    
    if sample_data:
        print("\n‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:")
        df = pd.DataFrame(sample_data, columns=[
            'symbol', 'timestamp', 'buy_expected_return', 'sell_expected_return',
            'buy_max_profit', 'sell_max_profit', 'buy_realized_profit', 'sell_realized_profit',
            'is_long_entry', 'is_short_entry'
        ])
        print(df.to_string())
    else:
        print("\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM processed_market_data")
        total_count = cursor.fetchone()[0]
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {total_count:,}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ technical_indicators JSONB
    print("\n" + "="*100)
    print("–ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í technical_indicators")
    print("="*100)
    
    cursor.execute("""
        SELECT 
            symbol,
            COUNT(*) as total,
            COUNT(CASE WHEN technical_indicators->>'buy_expected_return' IS NOT NULL THEN 1 END) as with_buy_er,
            COUNT(CASE WHEN technical_indicators->>'sell_expected_return' IS NOT NULL THEN 1 END) as with_sell_er
        FROM processed_market_data
        GROUP BY symbol
        HAVING COUNT(CASE WHEN technical_indicators->>'buy_expected_return' IS NOT NULL THEN 1 END) > 0
        ORDER BY symbol
        LIMIT 10
    """)
    
    json_data = cursor.fetchall()
    
    if json_data:
        print("\nüìä –î–∞–Ω–Ω—ã–µ –≤ JSONB –ø–æ–ª–µ technical_indicators:")
        for symbol, total, with_buy, with_sell in json_data:
            print(f"   {symbol}: –≤—Å–µ–≥–æ {total}, —Å buy_ER: {with_buy}, —Å sell_ER: {with_sell}")
    else:
        print("\n‚ö†Ô∏è –í JSONB –ø–æ–ª–µ technical_indicators –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö expected_return")
    
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
finally:
    if 'conn' in locals():
        conn.close()
        print("\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")