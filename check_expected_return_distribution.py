#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è expected_return
–∏ –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import pandas as pd
import numpy as np
import psycopg2
import yaml
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('dark_background')
sns.set_palette("husl")

def analyze_expected_returns():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host=db_config['host'],
        port=db_config['port'],
        database=db_config['dbname'],
        user=db_config['user']
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º expected_return –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
    query = """
    SELECT 
        symbol,
        buy_expected_return,
        sell_expected_return
    FROM processed_market_data
    WHERE symbol IN ('BTCUSDT', 'ETHUSDT')
    ORDER BY timestamp DESC
    LIMIT 50000
    """
    
    df = pd.read_sql_query(query, conn)
    conn.close()
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"–°–∏–º–≤–æ–ª—ã: {df['symbol'].unique()}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê EXPECTED_RETURN:")
    print(f"\nBuy Expected Return:")
    print(df['buy_expected_return'].describe())
    print(f"\nSell Expected Return:")
    print(df['sell_expected_return'].describe())
    
    # –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
    thresholds = [0.0, 0.3, 0.5, 0.7, 1.0, 1.5, 2.0]
    
    print("\nüéØ –ê–ù–ê–õ–ò–ó –†–ê–ó–ù–´–• –ü–û–†–û–ì–û–í –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò:")
    print(f"{'–ü–æ—Ä–æ–≥':<10} {'Buy –ö–ª–∞—Å—Å 1':<15} {'Sell –ö–ª–∞—Å—Å 1':<15} {'Buy/Sell Ratio':<15}")
    print("-" * 55)
    
    for threshold in thresholds:
        buy_class_1 = (df['buy_expected_return'] > threshold).mean() * 100
        sell_class_1 = (df['sell_expected_return'] > threshold).mean() * 100
        ratio = buy_class_1 / sell_class_1 if sell_class_1 > 0 else float('inf')
        print(f"{threshold:<10.1f} {buy_class_1:<15.1f} {sell_class_1:<15.1f} {ratio:<15.2f}")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    fig, axes = plt.subplots(2, 2, figsize=(15, 10))
    fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Expected Return', fontsize=16)
    
    # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    ax = axes[0, 0]
    ax.hist(df['buy_expected_return'], bins=100, alpha=0.7, label='Buy', color='green')
    ax.hist(df['sell_expected_return'], bins=100, alpha=0.7, label='Sell', color='red')
    ax.axvline(0.5, color='yellow', linestyle='--', label='–ü–æ—Ä–æ–≥ 0.5%')
    ax.axvline(1.0, color='orange', linestyle='--', label='–ü–æ—Ä–æ–≥ 1.0%')
    ax.set_xlabel('Expected Return (%)')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Expected Return')
    ax.legend()
    ax.set_xlim(-5, 5)
    
    # 2. Box plots
    ax = axes[0, 1]
    data_to_plot = [df['buy_expected_return'], df['sell_expected_return']]
    box = ax.boxplot(data_to_plot, labels=['Buy', 'Sell'], patch_artist=True)
    box['boxes'][0].set_facecolor('green')
    box['boxes'][1].set_facecolor('red')
    ax.axhline(0.5, color='yellow', linestyle='--', label='–ü–æ—Ä–æ–≥ 0.5%')
    ax.axhline(1.0, color='orange', linestyle='--', label='–ü–æ—Ä–æ–≥ 1.0%')
    ax.set_ylabel('Expected Return (%)')
    ax.set_title('Box Plot Expected Return')
    ax.legend()
    
    # 3. –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
    ax = axes[1, 0]
    buy_percentages = [(df['buy_expected_return'] > t).mean() * 100 for t in thresholds]
    sell_percentages = [(df['sell_expected_return'] > t).mean() * 100 for t in thresholds]
    
    ax.plot(thresholds, buy_percentages, 'g-o', label='Buy', linewidth=2)
    ax.plot(thresholds, sell_percentages, 'r-o', label='Sell', linewidth=2)
    ax.axvline(0.5, color='yellow', linestyle='--', alpha=0.5)
    ax.axvline(1.0, color='orange', linestyle='--', alpha=0.5)
    ax.set_xlabel('–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (%)')
    ax.set_ylabel('% –ö–ª–∞—Å—Å 1 (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)')
    ax.set_title('–í–ª–∏—è–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤')
    ax.legend()
    ax.grid(True, alpha=0.3)
    
    # 4. –ö—É–º—É–ª—è—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    ax = axes[1, 1]
    sorted_buy = np.sort(df['buy_expected_return'])
    sorted_sell = np.sort(df['sell_expected_return'])
    
    ax.plot(sorted_buy, np.linspace(0, 100, len(sorted_buy)), 'g-', label='Buy', linewidth=2)
    ax.plot(sorted_sell, np.linspace(0, 100, len(sorted_sell)), 'r-', label='Sell', linewidth=2)
    ax.axvline(0.5, color='yellow', linestyle='--', alpha=0.5, label='–ü–æ—Ä–æ–≥ 0.5%')
    ax.axvline(1.0, color='orange', linestyle='--', alpha=0.5, label='–ü–æ—Ä–æ–≥ 1.0%')
    ax.set_xlabel('Expected Return (%)')
    ax.set_ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π %')
    ax.set_title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ')
    ax.legend()
    ax.grid(True, alpha=0.3)
    ax.set_xlim(-5, 5)
    
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f'expected_return_analysis_{timestamp}.png'
    plt.savefig(filename, dpi=150, bbox_inches='tight')
    print(f"\nüìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ buy returns: {(df['buy_expected_return'] < 0).sum()} ({(df['buy_expected_return'] < 0).mean()*100:.1f}%)")
    print(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ sell returns: {(df['sell_expected_return'] < 0).sum()} ({(df['sell_expected_return'] < 0).mean()*100:.1f}%)")
    
    # –ö–≤–∞–Ω—Ç–∏–ª–∏
    print("\nüìä –ö–í–ê–ù–¢–ò–õ–ò:")
    quantiles = [0.1, 0.25, 0.5, 0.75, 0.9]
    for q in quantiles:
        buy_q = df['buy_expected_return'].quantile(q)
        sell_q = df['sell_expected_return'].quantile(q)
        print(f"Q{int(q*100):02d}: Buy={buy_q:6.2f}%, Sell={sell_q:6.2f}%")

if __name__ == "__main__":
    analyze_expected_returns()