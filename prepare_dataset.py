#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ PostgreSQL
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ (features) –∏ –º–µ—Ç–∫–∏ (labels) –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è
–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç expected_return –¥–ª—è –í–°–ï–• –±–∞—Ä–æ–≤ + —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import pandas as pd
import numpy as np
import ta
import json
from datetime import datetime
import warnings
import time
import pickle
import os
import random

warnings.filterwarnings('ignore')
import psycopg2
from psycopg2.extras import execute_values, Json
import logging
from tqdm import tqdm

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class PostgreSQLManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL (—Ç–æ—Ç –∂–µ —á—Ç–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
    """

    def __init__(self, db_config: dict):
        self.db_config = db_config.copy()
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
        if not self.db_config.get('password'):
            self.db_config.pop('password', None)
        self.connection = None

    def connect(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            self.connection = psycopg2.connect(**self.db_config)
            self.connection.autocommit = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise

    def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        if self.connection:
            self.connection.close()
            logger.info("üì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")

    def execute_query(self, query: str, params=None, fetch=False):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å"""
        try:
            with self.connection.cursor() as cursor:
                cursor.execute(query, params)
                if fetch:
                    return cursor.fetchall()
                return cursor.rowcount
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise

    def fetch_dataframe(self, query: str, params=None) -> pd.DataFrame:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ DataFrame

        Args:
            query: SQL –∑–∞–ø—Ä–æ—Å
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

        Returns:
            pd.DataFrame: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            return pd.read_sql_query(query, self.connection, params=params)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ DataFrame: {e}")
            raise


class MarketDatasetPreparator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏–∑ PostgreSQL
    """

    def __init__(self, db_manager: PostgreSQLManager, risk_profile: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª–µ–º

        Args:
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä PostgreSQL
            risk_profile: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ä–∏—Å–∫–∞ –∏–∑ config.yaml
        """
        self.db = db_manager
        self.risk_profile = risk_profile
        self.feature_columns = []

    def get_available_symbols(self) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –ë–î

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        """

        query = """
        SELECT DISTINCT symbol, COUNT(*) as record_count
        FROM raw_market_data 
        WHERE interval_minutes = 15 AND market_type = 'futures'
        GROUP BY symbol
        HAVING COUNT(*) >= 1000
        ORDER BY symbol
        """

        results = self.db.execute_query(query, fetch=True)
        symbols = [row[0] for row in results]

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö")
        for symbol, count in results:
            logger.info(f"   {symbol}: {count:,} –∑–∞–ø–∏—Å–µ–π")

        return symbols
    
    def get_unprocessed_symbols(self) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        all_symbols = set(self.get_available_symbols())
        
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        query = """
        SELECT DISTINCT symbol 
        FROM processed_market_data
        """
        results = self.db.execute_query(query, fetch=True)
        processed_symbols = {row[0] for row in results} if results else set()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        unprocessed = all_symbols - processed_symbols
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        logger.info(f"   –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(all_symbols)}")
        logger.info(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_symbols)}")
        logger.info(f"   ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {len(unprocessed)}")
        
        if unprocessed:
            logger.info(f"   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {', '.join(sorted(unprocessed))}")
        
        return list(unprocessed)
    
    def verify_processed_data(self, symbol: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        query = """
        SELECT 
            COUNT(*) as total,
            COUNT(CASE WHEN buy_expected_return < -1.2 OR buy_expected_return > 6 THEN 1 END) as bad_buy,
            COUNT(CASE WHEN sell_expected_return < -1.2 OR sell_expected_return > 6 THEN 1 END) as bad_sell,
            MIN(buy_expected_return) as min_buy,
            MAX(buy_expected_return) as max_buy,
            MIN(sell_expected_return) as min_sell,
            MAX(sell_expected_return) as max_sell
        FROM processed_market_data
        WHERE symbol = %s
        """
        
        result = self.db.execute_query(query, (symbol,), fetch=True)
        
        if not result or result[0][0] == 0:
            return False
        
        total, bad_buy, bad_sell, min_buy, max_buy, min_sell, max_sell = result[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if bad_buy > 0 or bad_sell > 0:
            logger.warning(f"‚ö†Ô∏è {symbol}: –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ expected_returns")
            logger.warning(f"   Buy range: [{min_buy:.2f}%, {max_buy:.2f}%]")
            logger.warning(f"   Sell range: [{min_sell:.2f}%, {max_sell:.2f}%]")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö
        if max_buy == min_buy or max_sell == min_sell:
            logger.warning(f"‚ö†Ô∏è {symbol}: –≤—Å–µ expected_returns –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ")
            return False
        
        return True

    def load_raw_data(self, symbol: str, limit: int = None) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏–∑ PostgreSQL

        Args:
            symbol: –°–∏–º–≤–æ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

        Returns:
            pd.DataFrame: –î–∞–Ω–Ω—ã–µ OHLCV
        """

        query = """
        SELECT id, symbol, timestamp, datetime, open, high, low, close, volume, turnover
        FROM raw_market_data 
        WHERE symbol = %s AND interval_minutes = 15 AND market_type = 'futures'
        ORDER BY timestamp
        """

        if limit:
            query += f" LIMIT {limit}"

        df = self.db.fetch_dataframe(query, (symbol,))

        if len(df) == 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")
            return pd.DataFrame()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        numeric_columns = ['open', 'high', 'low', 'close', 'volume', 'turnover']
        for col in numeric_columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
        return df

    def calculate_technical_indicators(self, df: pd.DataFrame) -> dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

        Args:
            df: DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        """

        if len(df) < 100:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            return {}

        logger.info("üìà –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")

        indicators = {}

        try:
            # === –ë–ê–ó–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===

            # EMA 15 (–∫–∞–∫ –≤ Pine Script)
            indicators['ema_15'] = ta.trend.EMAIndicator(df['close'], window=15).ema_indicator().tolist()

            # ADX (Average Directional Index)
            adx_indicator = ta.trend.ADXIndicator(df['high'], df['low'], df['close'], window=14)
            indicators['adx_val'] = adx_indicator.adx().tolist()
            indicators['adx_plus_di'] = adx_indicator.adx_pos().tolist()
            indicators['adx_minus_di'] = adx_indicator.adx_neg().tolist()

            # RSI (Relative Strength Index)
            indicators['rsi_val'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi().tolist()

            # MACD
            macd_indicator = ta.trend.MACD(df['close'], window_fast=12, window_slow=26, window_sign=9)
            indicators['macd_val'] = macd_indicator.macd().tolist()
            indicators['macd_signal'] = macd_indicator.macd_signal().tolist()
            indicators['macd_hist'] = macd_indicator.macd_diff().tolist()

            # ATR (Average True Range)
            indicators['atr_val'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'],
                                                                   window=10).average_true_range().tolist()

            # Bollinger Bands
            bb_indicator = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
            indicators['bb_upper'] = bb_indicator.bollinger_hband().tolist()
            indicators['bb_lower'] = bb_indicator.bollinger_lband().tolist()
            indicators['bb_basis'] = bb_indicator.bollinger_mavg().tolist()

            # Stochastic
            stoch_indicator = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=14)
            indicators['stoch_k'] = stoch_indicator.stoch().tolist()
            indicators['stoch_d'] = stoch_indicator.stoch_signal().tolist()

            # CCI (Commodity Channel Index)
            indicators['cci_val'] = ta.trend.CCIIndicator(df['high'], df['low'], df['close'], window=20).cci().tolist()

            # Williams %R
            indicators['williams_r'] = ta.momentum.WilliamsRIndicator(df['high'], df['low'], df['close'],
                                                                      lbp=14).williams_r().tolist()

            # OBV (On Balance Volume)
            indicators['obv'] = ta.volume.OnBalanceVolumeIndicator(df['close'],
                                                                   df['volume']).on_balance_volume().tolist()

            # CMF (Chaikin Money Flow)
            indicators['cmf'] = ta.volume.ChaikinMoneyFlowIndicator(df['high'], df['low'], df['close'], df['volume'],
                                                                    window=20).chaikin_money_flow().tolist()

            # MFI (Money Flow Index)
            indicators['mfi'] = ta.volume.MFIIndicator(df['high'], df['low'], df['close'], df['volume'],
                                                       window=14).money_flow_index().tolist()

            # Ichimoku
            ichimoku_indicator = ta.trend.IchimokuIndicator(df['high'], df['low'], window1=9, window2=26)
            indicators['ichimoku_conv'] = ichimoku_indicator.ichimoku_conversion_line().tolist()
            indicators['ichimoku_base'] = ichimoku_indicator.ichimoku_base_line().tolist()

            # Parabolic SAR
            indicators['sar'] = ta.trend.PSARIndicator(df['high'], df['low'], df['close']).psar().tolist()

            # Donchian Channel
            donchian_indicator = ta.volatility.DonchianChannel(df['high'], df['low'], df['close'], window=20)
            indicators['donchian_upper'] = donchian_indicator.donchian_channel_hband().tolist()
            indicators['donchian_lower'] = donchian_indicator.donchian_channel_lband().tolist()

            # ROC (Rate of Change)
            indicators['roc'] = ta.momentum.ROCIndicator(df['close'], window=12).roc().tolist()

            # Aroon
            aroon_indicator = ta.trend.AroonIndicator(df['high'], df['low'], window=14)
            indicators['aroon_up'] = aroon_indicator.aroon_up().tolist()
            indicators['aroon_down'] = aroon_indicator.aroon_down().tolist()

            # DPO (Detrended Price Oscillator)
            indicators['dpo'] = ta.trend.DPOIndicator(df['close'], window=20).dpo().tolist()

            # Ultimate Oscillator
            indicators['ult_osc'] = ta.momentum.UltimateOscillator(
                df['high'], df['low'], df['close'],
                window1=7, window2=14, window3=28
            ).ultimate_oscillator().tolist()

            # Vortex Indicator
            vortex_indicator = ta.trend.VortexIndicator(df['high'], df['low'], df['close'], window=14)
            indicators['vortex_vip'] = vortex_indicator.vortex_indicator_pos().tolist()
            indicators['vortex_vin'] = vortex_indicator.vortex_indicator_neg().tolist()

            # === –ü–†–û–ò–ó–í–û–î–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            macd_val = pd.Series(indicators['macd_val'])
            macd_signal = pd.Series(indicators['macd_signal'])
            adx_plus_di = pd.Series(indicators['adx_plus_di'])
            adx_minus_di = pd.Series(indicators['adx_minus_di'])
            bb_upper = pd.Series(indicators['bb_upper'])
            bb_lower = pd.Series(indicators['bb_lower'])
            rsi_val = pd.Series(indicators['rsi_val'])
            stoch_k = pd.Series(indicators['stoch_k'])
            stoch_d = pd.Series(indicators['stoch_d'])
            vortex_vip = pd.Series(indicators['vortex_vip'])
            vortex_vin = pd.Series(indicators['vortex_vin'])
            ichimoku_conv = pd.Series(indicators['ichimoku_conv'])
            ichimoku_base = pd.Series(indicators['ichimoku_base'])
            atr_val = pd.Series(indicators['atr_val'])

            # MACD —Å–∏–≥–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            indicators['macd_signal_ratio'] = (macd_val / (macd_signal + 1e-8)).tolist()

            # ADX —Ä–∞–∑–Ω–æ—Å—Ç–∏
            indicators['adx_diff'] = (adx_plus_di - adx_minus_di).tolist()

            # Bollinger –ø–æ–∑–∏—Ü–∏—è
            band_width = bb_upper - bb_lower
            indicators['bb_position'] = ((df['close'] - bb_lower) / (band_width + 1e-8)).tolist()

            # RSI –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            indicators['rsi_dist_from_mid'] = (np.abs(rsi_val - 50) / 50.0).tolist()

            # Stochastic –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            indicators['stoch_diff'] = (stoch_k - stoch_d).tolist()

            # Vortex —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            indicators['vortex_ratio'] = (vortex_vip / (vortex_vin + 1e-8)).tolist()

            # Ichimoku –æ–±–ª–∞–∫–æ
            indicators['ichimoku_diff'] = (ichimoku_conv - ichimoku_base).tolist()

            # ATR –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π
            indicators['atr_norm'] = (atr_val / (df['close'] + 1e-8)).tolist()

            # === –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
            indicators['hour'] = df['datetime'].dt.hour.tolist()
            indicators['day_of_week'] = df['datetime'].dt.dayofweek.tolist()
            indicators['is_weekend'] = (df['datetime'].dt.dayofweek >= 5).astype(int).tolist()

            # === –¶–ï–ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ ===
            indicators['price_change_1'] = df['close'].pct_change(1).tolist()
            indicators['price_change_4'] = df['close'].pct_change(4).tolist()  # 1 —á–∞—Å
            indicators['price_change_16'] = df['close'].pct_change(16).tolist()  # 4 —á–∞—Å–∞

            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            indicators['volatility_4'] = df['close'].rolling(4).std().tolist()
            indicators['volatility_16'] = df['close'].rolling(16).std().tolist()

            # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            volume_sma = df['volume'].rolling(20).mean()
            indicators['volume_sma'] = volume_sma.tolist()
            indicators['volume_ratio'] = (df['volume'] / (volume_sma + 1e-8)).tolist()

            # –ó–∞–º–µ–Ω—è–µ–º NaN –∏ inf –Ω–∞ None –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            for key, values in indicators.items():
                indicators[key] = [None if pd.isna(x) or np.isinf(x) else float(x) for x in values]

            logger.info(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(indicators)} –≥—Ä—É–ø–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            raise

        return indicators

    def create_labels_based_on_risk_profile(self, df: pd.DataFrame, symbol: str = "UNKNOWN") -> tuple:
        """
        –°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∫–∏ (labels) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç expected_return –¥–ª—è –ö–ê–ñ–î–û–ì–û –±–∞—Ä–∞ + —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            symbol: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            tuple: (buy_profit_targets, buy_loss_targets, sell_profit_targets, sell_loss_targets,
                   buy_expected_returns, sell_expected_returns, is_long_entry, is_short_entry)
        """

        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è {symbol} - —Ä–∞—Å—á–µ—Ç –¥–ª—è –í–°–ï–• –±–∞—Ä–æ–≤...")

        # –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
        buy_sl_pct = self.risk_profile.get('stop_loss_pct_buy', 0.989)  # -1.1%
        buy_tp_pct = self.risk_profile.get('take_profit_pct_buy', 1.058)  # +5.8%
        sell_sl_pct = self.risk_profile.get('stop_loss_pct_sell', 1.011)  # +1.1%
        sell_tp_pct = self.risk_profile.get('take_profit_pct_sell', 0.942)  # -5.8%
        
        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        random_entry_probability = 0.15  # 15% –±–∞—Ä–æ–≤ –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –≤—Ö–æ–¥—ã

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π (–∏–∑ old/config.yaml)
        partial_tp_levels = [
            {'percent': 1.2, 'close_ratio': 0.20},
            {'percent': 2.4, 'close_ratio': 0.30},
            {'percent': 3.5, 'close_ratio': 0.30}
        ]
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
        profit_protection = {
            'breakeven_percent': 1.2,
            'breakeven_offset': 0.3,
            'lock_levels': [
                {'trigger': 2.4, 'lock': 1.2},
                {'trigger': 3.5, 'lock': 2.4},
                {'trigger': 4.6, 'lock': 3.5}
            ]
        }

        logger.info(f"üìä –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: BUY SL={buy_sl_pct:.3f}, TP={buy_tp_pct:.3f}")
        logger.info(f"üìä –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: SELL SL={sell_sl_pct:.3f}, TP={sell_tp_pct:.3f}")
        logger.info(f"üîÑ –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è: {', '.join([f'{l['percent']}%' for l in partial_tp_levels])}")

        total_bars = len(df)
        lookahead_limit = 100  # –ú–∞–∫—Å–∏–º—É–º 100 –±–∞—Ä–æ–≤ –≤–ø–µ—Ä–µ–¥ (25 —á–∞—Å–æ–≤ –¥–ª—è 15m)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –º–µ—Ç–æ–∫
        buy_profit_targets = [0] * total_bars
        buy_loss_targets = [0] * total_bars
        sell_profit_targets = [0] * total_bars
        sell_loss_targets = [0] * total_bars
        
        # –ù–æ–≤—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        buy_expected_returns = [0.0] * total_bars
        sell_expected_returns = [0.0] * total_bars
        
        # –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        is_long_entry = [False] * total_bars
        is_short_entry = [False] * total_bars

        buy_profits = 0
        buy_losses = 0
        sell_profits = 0
        sell_losses = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–≤–æ–º—É –ø–æ–¥—Ö–æ–¥—É
        total_buy_return = 0.0
        total_sell_return = 0.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
        random_long_entries = 0
        random_short_entries = 0
        random_long_return = 0.0
        random_short_return = 0.0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤
        exit_stats = {
            'buy': {
                'stop_loss': 0,           # –ü—Ä—è–º–æ–π SL –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö
                'take_profit': 0,          # –ü—Ä—è–º–æ–π TP –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö
                'timeout': 0,              # –¢–∞–π–º–∞—É—Ç –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö
                'partial_then_sl': 0,      # –ß–∞—Å—Ç–∏—á–Ω—ã–µ, –∑–∞—Ç–µ–º SL
                'partial_then_tp': 0,      # –ß–∞—Å—Ç–∏—á–Ω—ã–µ, –∑–∞—Ç–µ–º TP
                'partial_then_timeout': 0, # –ß–∞—Å—Ç–∏—á–Ω—ã–µ, –∑–∞—Ç–µ–º —Ç–∞–π–º–∞—É—Ç
                'total_with_partials': 0   # –í—Å–µ–≥–æ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏
            },
            'sell': {
                'stop_loss': 0,           # –ü—Ä—è–º–æ–π SL –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö
                'take_profit': 0,          # –ü—Ä—è–º–æ–π TP –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö
                'timeout': 0,              # –¢–∞–π–º–∞—É—Ç –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö
                'partial_then_sl': 0,      # –ß–∞—Å—Ç–∏—á–Ω—ã–µ, –∑–∞—Ç–µ–º SL
                'partial_then_tp': 0,      # –ß–∞—Å—Ç–∏—á–Ω—ã–µ, –∑–∞—Ç–µ–º TP
                'partial_then_timeout': 0, # –ß–∞—Å—Ç–∏—á–Ω—ã–µ, –∑–∞—Ç–µ–º —Ç–∞–π–º–∞—É—Ç
                'total_with_partials': 0   # –í—Å–µ–≥–æ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏
            }
        }

        logger.info(f"üîÑ –ê–Ω–∞–ª–∏–∑ {total_bars} –±–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–æ–∫...")

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –±–∞—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–æ–∫
        for i in tqdm(range(total_bars - lookahead_limit), desc=f"–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ {symbol}"):
            entry_price = df.iloc[i]['close']
            
            # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ –±–∞—Ä—ã —Å high/low/open
            future_bars = []
            for j in range(i + 1, min(i + lookahead_limit + 1, total_bars)):
                future_bars.append({
                    'open': df.iloc[j]['open'],
                    'high': df.iloc[j]['high'],
                    'low': df.iloc[j]['low'],
                    'close': df.iloc[j]['close']
                })
            
            # === –†–ê–°–ß–ï–¢ –î–õ–Ø BUY –ü–û–ó–ò–¶–ò–ò ===
            buy_result = self._calculate_enhanced_result(
                entry_price, future_bars, 'buy',
                buy_sl_pct, buy_tp_pct, partial_tp_levels, profit_protection
            )
            
            # === –†–ê–°–ß–ï–¢ –î–õ–Ø SELL –ü–û–ó–ò–¶–ò–ò ===
            sell_result = self._calculate_enhanced_result(
                entry_price, future_bars, 'sell',
                sell_sl_pct, sell_tp_pct, partial_tp_levels, profit_protection
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –í–°–ï–• –±–∞—Ä–æ–≤
            buy_expected_returns[i] = buy_result['final_return']
            sell_expected_returns[i] = sell_result['final_return']
            
            # –°–ª—É—á–∞–π–Ω–æ –ø–æ–º–µ—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∞—Ä—ã –∫–∞–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
            if random.random() < random_entry_probability:
                is_long_entry[i] = True
                random_long_entries += 1
                random_long_return += buy_result['final_return']
                
            if random.random() < random_entry_probability:
                is_short_entry[i] = True
                random_short_entries += 1
                random_short_return += sell_result['final_return']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π
            # BUY
            if buy_result.get('had_partials', False):
                exit_stats['buy']['total_with_partials'] += 1
                if 'Stop Loss' in buy_result['exit_reason']:
                    exit_stats['buy']['partial_then_sl'] += 1
                elif 'Take Profit' in buy_result['exit_reason']:
                    exit_stats['buy']['partial_then_tp'] += 1
                elif 'Timeout' in buy_result['exit_reason']:
                    exit_stats['buy']['partial_then_timeout'] += 1
            else:
                if 'Stop Loss' in buy_result['exit_reason']:
                    exit_stats['buy']['stop_loss'] += 1
                elif 'Take Profit' in buy_result['exit_reason']:
                    exit_stats['buy']['take_profit'] += 1
                elif 'Timeout' in buy_result['exit_reason']:
                    exit_stats['buy']['timeout'] += 1
                    
            # SELL
            if sell_result.get('had_partials', False):
                exit_stats['sell']['total_with_partials'] += 1
                if 'Stop Loss' in sell_result['exit_reason']:
                    exit_stats['sell']['partial_then_sl'] += 1
                elif 'Take Profit' in sell_result['exit_reason']:
                    exit_stats['sell']['partial_then_tp'] += 1
                elif 'Timeout' in sell_result['exit_reason']:
                    exit_stats['sell']['partial_then_timeout'] += 1
            else:
                if 'Stop Loss' in sell_result['exit_reason']:
                    exit_stats['sell']['stop_loss'] += 1
                elif 'Take Profit' in sell_result['exit_reason']:
                    exit_stats['sell']['take_profit'] += 1
                elif 'Timeout' in sell_result['exit_reason']:
                    exit_stats['sell']['timeout'] += 1
            
            # –°—Ç–∞—Ä—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if buy_result['final_return'] > 0.5:
                buy_profit_targets[i] = 1
                buy_profits += 1
            elif buy_result['final_return'] < -0.5:
                buy_loss_targets[i] = 1
                buy_losses += 1
                
            if sell_result['final_return'] > 0.5:
                sell_profit_targets[i] = 1
                sell_profits += 1
            elif sell_result['final_return'] < -0.5:
                sell_loss_targets[i] = 1
                sell_losses += 1
            
            total_buy_return += buy_result['final_return']
            total_sell_return += sell_result['final_return']

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–∫
        total_buy_signals = buy_profits + buy_losses
        total_sell_signals = sell_profits + sell_losses

        buy_win_rate = (buy_profits / total_buy_signals * 100) if total_buy_signals > 0 else 0
        sell_win_rate = (sell_profits / total_sell_signals * 100) if total_sell_signals > 0 else 0
        
        avg_buy_return = total_buy_return / (total_bars - lookahead_limit)
        avg_sell_return = total_sell_return / (total_bars - lookahead_limit)

        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–∫ –¥–ª—è {symbol}:")
        logger.info(f"   üü¢ BUY: {buy_profits} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö, {buy_losses} —É–±—ã—Ç–æ—á–Ω—ã—Ö (Win Rate: {buy_win_rate:.1f}%)")
        logger.info(f"   üî¥ SELL: {sell_profits} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö, {sell_losses} —É–±—ã—Ç–æ—á–Ω—ã—Ö (Win Rate: {sell_win_rate:.1f}%)")
        logger.info(f"üìà –°—Ä–µ–¥–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤—Å–µ –±–∞—Ä—ã):")
        logger.info(f"   BUY: {avg_buy_return:.2f}%")
        logger.info(f"   SELL: {avg_sell_return:.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
        if random_long_entries > 0:
            avg_random_long = random_long_return / random_long_entries
            random_long_win_rate = sum(1 for i in range(total_bars - lookahead_limit) 
                                      if is_long_entry[i] and buy_expected_returns[i] > 0) / random_long_entries * 100
        else:
            avg_random_long = 0
            random_long_win_rate = 0
            
        if random_short_entries > 0:
            avg_random_short = random_short_return / random_short_entries
            random_short_win_rate = sum(1 for i in range(total_bars - lookahead_limit) 
                                       if is_short_entry[i] and sell_expected_returns[i] > 0) / random_short_entries * 100
        else:
            avg_random_short = 0
            random_short_win_rate = 0
            
        logger.info(f"\nüé≤ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–õ–£–ß–ê–ô–ù–´–• –≤—Ö–æ–¥–æ–≤:")
        logger.info(f"   LONG: {random_long_entries} –≤—Ö–æ–¥–æ–≤ ({random_long_entries/(total_bars-lookahead_limit)*100:.1f}%), "
                   f"—Å—Ä–µ–¥–Ω–∏–π return: {avg_random_long:.2f}%, win rate: {random_long_win_rate:.1f}%")
        logger.info(f"   SHORT: {random_short_entries} –≤—Ö–æ–¥–æ–≤ ({random_short_entries/(total_bars-lookahead_limit)*100:.1f}%), "
                   f"—Å—Ä–µ–¥–Ω–∏–π return: {avg_random_short:.2f}%, win rate: {random_short_win_rate:.1f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–æ–≤
        logger.info(f"üìä –¢–∏–ø—ã –≤—ã—Ö–æ–¥–æ–≤ –∏–∑ –ø–æ–∑–∏—Ü–∏–π:")
        total_buy_exits = total_bars - lookahead_limit
        total_sell_exits = total_bars - lookahead_limit
        
        if total_buy_exits > 0:
            logger.info(f"   üü¢ BUY –≤—ã—Ö–æ–¥—ã:")
            logger.info(f"   –ë–ï–ó —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π:")
            logger.info(f"      Stop Loss: {exit_stats['buy']['stop_loss']} ({exit_stats['buy']['stop_loss']/total_buy_exits*100:.1f}%)")
            logger.info(f"      Take Profit: {exit_stats['buy']['take_profit']} ({exit_stats['buy']['take_profit']/total_buy_exits*100:.1f}%)")
            logger.info(f"      –¢–∞–π–º–∞—É—Ç: {exit_stats['buy']['timeout']} ({exit_stats['buy']['timeout']/total_buy_exits*100:.1f}%)")
            
            logger.info(f"   –° —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏: {exit_stats['buy']['total_with_partials']} ({exit_stats['buy']['total_with_partials']/total_buy_exits*100:.1f}%)")
            if exit_stats['buy']['total_with_partials'] > 0:
                logger.info(f"      ‚Üí Stop Loss: {exit_stats['buy']['partial_then_sl']} ({exit_stats['buy']['partial_then_sl']/total_buy_exits*100:.1f}%)")
                logger.info(f"      ‚Üí Take Profit: {exit_stats['buy']['partial_then_tp']} ({exit_stats['buy']['partial_then_tp']/total_buy_exits*100:.1f}%)")
                logger.info(f"      ‚Üí –¢–∞–π–º–∞—É—Ç: {exit_stats['buy']['partial_then_timeout']} ({exit_stats['buy']['partial_then_timeout']/total_buy_exits*100:.1f}%)")
            
        if total_sell_exits > 0:
            logger.info(f"   üî¥ SELL –≤—ã—Ö–æ–¥—ã:")
            logger.info(f"   –ë–ï–ó —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π:")
            logger.info(f"      Stop Loss: {exit_stats['sell']['stop_loss']} ({exit_stats['sell']['stop_loss']/total_sell_exits*100:.1f}%)")
            logger.info(f"      Take Profit: {exit_stats['sell']['take_profit']} ({exit_stats['sell']['take_profit']/total_sell_exits*100:.1f}%)")
            logger.info(f"      –¢–∞–π–º–∞—É—Ç: {exit_stats['sell']['timeout']} ({exit_stats['sell']['timeout']/total_sell_exits*100:.1f}%)")
            
            logger.info(f"   –° —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏: {exit_stats['sell']['total_with_partials']} ({exit_stats['sell']['total_with_partials']/total_sell_exits*100:.1f}%)")
            if exit_stats['sell']['total_with_partials'] > 0:
                logger.info(f"      ‚Üí Stop Loss: {exit_stats['sell']['partial_then_sl']} ({exit_stats['sell']['partial_then_sl']/total_sell_exits*100:.1f}%)")
                logger.info(f"      ‚Üí Take Profit: {exit_stats['sell']['partial_then_tp']} ({exit_stats['sell']['partial_then_tp']/total_sell_exits*100:.1f}%)")
                logger.info(f"      ‚Üí –¢–∞–π–º–∞—É—Ç: {exit_stats['sell']['partial_then_timeout']} ({exit_stats['sell']['partial_then_timeout']/total_sell_exits*100:.1f}%)")

        return (buy_profit_targets, buy_loss_targets, sell_profit_targets, sell_loss_targets,
                buy_expected_returns, sell_expected_returns, is_long_entry, is_short_entry)
    
    def _calculate_enhanced_result(self, entry_price, future_bars, direction,
                                 sl_pct, tp_pct, partial_levels, protection):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –∏ –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å, –∑–∞—Ç–µ–º –ø—Ä–æ—Ñ–∏—Ç—ã
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        position_size = 1.0
        realized_pnl = 0.0
        executed_level_indices = []  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤–º–µ—Å—Ç–æ float –∑–Ω–∞—á–µ–Ω–∏–π
        exit_reason = None
        exit_bar = None
        
        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω
        if direction == 'buy':
            sl_price = entry_price * sl_pct  # sl_pct = 0.989 –æ–∑–Ω–∞—á–∞–µ—Ç -1.1%
            tp_price = entry_price * tp_pct  # tp_pct = 1.058 –æ–∑–Ω–∞—á–∞–µ—Ç +5.8%
            current_sl = sl_price
        else:  # sell
            sl_price = entry_price * sl_pct  # sl_pct = 1.011 –æ–∑–Ω–∞—á–∞–µ—Ç +1.1% (–¥–ª—è —à–æ—Ä—Ç–∞ —ç—Ç–æ —Å—Ç–æ–ø)
            tp_price = entry_price * tp_pct  # tp_pct = 0.942 –æ–∑–Ω–∞—á–∞–µ—Ç -5.8% (–¥–ª—è —à–æ—Ä—Ç–∞ —ç—Ç–æ –ø—Ä–æ—Ñ–∏—Ç)
            current_sl = sl_price
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –±—É–¥—É—â–∏–º –±–∞—Ä–∞–º
        for bar_idx, bar in enumerate(future_bars):
            high = float(bar['high'])
            low = float(bar['low'])
            close = float(bar['close'])
            
            # === –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –ü–û–î–•–û–î: —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π ===
            
            if direction == 'buy':
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ä–∞–Ω—å—à–µ - TP –∏–ª–∏ SL
                # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∏–∂–µ SL - —Å—Ä–∞–∑—É —Å—Ç–æ–ø
                if bar['open'] <= current_sl and position_size > 0:
                    # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å –≥—ç–ø–æ–º –≤–Ω–∏–∑ - —Å—Ä–∞–∑—É —Å—Ç–æ–ø
                    loss_pct = ((bar['open'] - entry_price) / entry_price) * 100
                    remaining_loss = loss_pct * position_size
                    exit_reason = f"Stop Loss at open {bar['open']:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_loss,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_loss,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0,
                        'had_partials': len(executed_level_indices) > 0,
                        'partials_count': len(executed_level_indices)
                    }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ TP –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π SL
                # –≠—Ç–æ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ TP –º–æ–≥—É—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è SL
                tp_hit_in_this_bar = False
                
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ü–µ–Ω
                for idx, level in enumerate(partial_levels):
                    level_price = entry_price * (1 + level['percent'] / 100)
                    
                    if high >= level_price and idx not in executed_level_indices and position_size > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–æ SL (–µ—Å–ª–∏ –æ–±–∞ –≤ –æ–¥–Ω–æ–º –±–∞—Ä–µ)
                        if low <= current_sl:
                            # –û–±–∞ —É—Ä–æ–≤–Ω—è –≤ –æ–¥–Ω–æ–º –±–∞—Ä–µ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
                            # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –±–ª–∏–∂–µ –∫ TP - —Å–Ω–∞—á–∞–ª–∞ TP
                            open_to_tp = abs(bar['open'] - level_price)
                            open_to_sl = abs(bar['open'] - current_sl)
                            if open_to_sl < open_to_tp:
                                # SL –±—ã–ª –±–ª–∏–∂–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º TP
                                continue
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–≤–Ω—é
                        close_ratio = min(level['close_ratio'], position_size)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ level_price –ø—Ä–∏ –≥—ç–ø–∞—Ö)
                        execution_price = max(level_price, bar['open'])
                        actual_profit_pct = ((execution_price - entry_price) / entry_price) * 100
                        
                        profit_at_level = actual_profit_pct * close_ratio
                        realized_pnl += profit_at_level
                        position_size -= close_ratio
                        executed_level_indices.append(idx)
                        tp_hit_in_this_bar = True
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
                        if level['percent'] >= protection['breakeven_percent']:
                            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ + –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ—Ñ–∏—Ç
                            new_sl = entry_price * (1 + protection['breakeven_offset'] / 100)
                            current_sl = max(current_sl, new_sl)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö
                        for lock in protection['lock_levels']:
                            if level['percent'] >= lock['trigger']:
                                new_sl = entry_price * (1 + lock['lock'] / 100)
                                current_sl = max(current_sl, new_sl)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –ü–û–°–õ–ï —á–∞—Å—Ç–∏—á–Ω—ã—Ö TP
                if low <= current_sl and position_size > 0 and not tp_hit_in_this_bar:
                    # –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ TP –≤ —ç—Ç–æ–º –±–∞—Ä–µ
                    loss_pct = ((current_sl - entry_price) / entry_price) * 100
                    remaining_loss = loss_pct * position_size
                    exit_reason = f"Stop Loss at {current_sl:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_loss,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_loss,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0,
                        'had_partials': len(executed_level_indices) > 0,
                        'partials_count': len(executed_level_indices)
                    }
                
                # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                if high >= tp_price and position_size > 0:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É TP
                    final_profit_pct = ((tp_price - entry_price) / entry_price) * 100
                    remaining_profit = final_profit_pct * position_size
                    exit_reason = f"Take Profit at {tp_price:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_profit,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_profit,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0,
                        'had_partials': len(executed_level_indices) > 0,
                        'partials_count': len(executed_level_indices)
                    }
                    
            else:  # SELL –ø–æ–∑–∏—Ü–∏—è
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Ä–∞–Ω—å—à–µ - TP –∏–ª–∏ SL
                # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã—à–µ SL - —Å—Ä–∞–∑—É —Å—Ç–æ–ø
                if bar['open'] >= current_sl and position_size > 0:
                    # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å –≥—ç–ø–æ–º –≤–≤–µ—Ä—Ö - —Å—Ä–∞–∑—É —Å—Ç–æ–ø
                    loss_pct = -((bar['open'] - entry_price) / entry_price) * 100
                    remaining_loss = loss_pct * position_size
                    exit_reason = f"Stop Loss at open {bar['open']:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_loss,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_loss,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0,
                        'had_partials': len(executed_level_indices) > 0,
                        'partials_count': len(executed_level_indices)
                    }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ TP –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π SL
                tp_hit_in_this_bar = False
                
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ (–¥–ª—è —à–æ—Ä—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã)
                for idx, level in enumerate(partial_levels):
                    level_price = entry_price * (1 - level['percent'] / 100)
                    
                    if low <= level_price and idx not in executed_level_indices and position_size > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–æ SL (–µ—Å–ª–∏ –æ–±–∞ –≤ –æ–¥–Ω–æ–º –±–∞—Ä–µ)
                        if high >= current_sl:
                            # –û–±–∞ —É—Ä–æ–≤–Ω—è –≤ –æ–¥–Ω–æ–º –±–∞—Ä–µ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
                            open_to_tp = abs(bar['open'] - level_price)
                            open_to_sl = abs(bar['open'] - current_sl)
                            if open_to_sl < open_to_tp:
                                # SL –±—ã–ª –±–ª–∏–∂–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º TP
                                continue
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–≤–Ω—é
                        close_ratio = min(level['close_ratio'], position_size)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ level_price –ø—Ä–∏ –≥—ç–ø–∞—Ö)
                        execution_price = min(level_price, bar['open'])
                        actual_profit_pct = ((entry_price - execution_price) / entry_price) * 100
                        
                        profit_at_level = actual_profit_pct * close_ratio
                        realized_pnl += profit_at_level
                        position_size -= close_ratio
                        executed_level_indices.append(idx)
                        tp_hit_in_this_bar = True
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop
                        if level['percent'] >= protection['breakeven_percent']:
                            new_sl = entry_price * (1 - protection['breakeven_offset'] / 100)
                            current_sl = min(current_sl, new_sl)
                        
                        for lock in protection['lock_levels']:
                            if level['percent'] >= lock['trigger']:
                                new_sl = entry_price * (1 - lock['lock'] / 100)
                                current_sl = min(current_sl, new_sl)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –ü–û–°–õ–ï —á–∞—Å—Ç–∏—á–Ω—ã—Ö TP
                if high >= current_sl and position_size > 0 and not tp_hit_in_this_bar:
                    loss_pct = -((current_sl - entry_price) / entry_price) * 100
                    remaining_loss = loss_pct * position_size
                    exit_reason = f"Stop Loss at {current_sl:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_loss,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_loss,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0,
                        'had_partials': len(executed_level_indices) > 0,
                        'partials_count': len(executed_level_indices)
                    }
                
                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ (–¥–ª—è —à–æ—Ä—Ç–∞ –ø—Ä–æ—Ñ–∏—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã)
                for idx, level in enumerate(partial_levels):
                    level_price = entry_price * (1 - level['percent'] / 100)
                    
                    if low <= level_price and idx not in executed_level_indices and position_size > 0:
                        close_ratio = min(level['close_ratio'], position_size)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ level_price –ø—Ä–∏ –≥—ç–ø–∞—Ö)
                        execution_price = min(level_price, bar['open'])
                        actual_profit_pct = ((entry_price - execution_price) / entry_price) * 100
                        
                        profit_at_level = actual_profit_pct * close_ratio
                        realized_pnl += profit_at_level
                        position_size -= close_ratio
                        executed_level_indices.append(idx)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop
                        if level['percent'] >= protection['breakeven_percent']:
                            new_sl = entry_price * (1 - protection['breakeven_offset'] / 100)
                            current_sl = min(current_sl, new_sl)
                        
                        for lock in protection['lock_levels']:
                            if level['percent'] >= lock['trigger']:
                                new_sl = entry_price * (1 - lock['lock'] / 100)
                                current_sl = min(current_sl, new_sl)
                
                # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                if low <= tp_price and position_size > 0:
                    final_profit_pct = ((entry_price - tp_price) / entry_price) * 100
                    remaining_profit = final_profit_pct * position_size
                    exit_reason = f"Take Profit at {tp_price:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_profit,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_profit,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0,
                        'had_partials': len(executed_level_indices) > 0,
                        'partials_count': len(executed_level_indices)
                    }
        
        # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if position_size > 0 and future_bars:
            last_close = float(future_bars[-1]['close'])
            if direction == 'buy':
                unrealized_pct = ((last_close - entry_price) / entry_price) * 100
            else:
                unrealized_pct = ((entry_price - last_close) / entry_price) * 100
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –≤–∞—Ä–∏–∞—Ü–∏—é –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–π—Å—è –ø–æ–∑–∏—Ü–∏–∏
            # –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            variation = len(executed_level_indices) * 0.01
            unrealized_pnl = unrealized_pct * position_size + variation
            
            exit_reason = f"Timeout at bar {len(future_bars)} (price: {last_close:.4f})"
            exit_bar = len(future_bars)
            
            return {
                'final_return': realized_pnl + unrealized_pnl,
                'realized_pnl': realized_pnl,
                'unrealized_pnl': unrealized_pnl,
                'exit_reason': exit_reason,
                'exit_bar': exit_bar,
                'final_position_size': position_size,
                'had_partials': len(executed_level_indices) > 0,
                'partials_count': len(executed_level_indices)
            }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        return {
            'final_return': realized_pnl,
            'realized_pnl': realized_pnl,
            'unrealized_pnl': 0.0,
            'exit_reason': 'No data',
            'exit_bar': 0,
            'final_position_size': position_size,
            'had_partials': len(executed_level_indices) > 0,
            'partials_count': len(executed_level_indices)
        }

    def save_processed_data(self, symbol: str, df: pd.DataFrame, indicators: dict, labels: tuple):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ PostgreSQL

        Args:
            symbol: –°–∏–º–≤–æ–ª
            df: –ò—Å—Ö–æ–¥–Ω—ã–π DataFrame
            indicators: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            labels: –ö–æ—Ä—Ç–µ–∂ —Å –º–µ—Ç–∫–∞–º–∏ (buy_profit, buy_loss, sell_profit, sell_loss, 
                    buy_expected_returns, sell_expected_returns, is_long_entry, is_short_entry)
        """

        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –º–µ—Ç–∫–∏
        if len(labels) == 8:
            (buy_profit_targets, buy_loss_targets, sell_profit_targets, sell_loss_targets,
             buy_expected_returns, sell_expected_returns, is_long_entry, is_short_entry) = labels
        elif len(labels) == 6:
            (buy_profit_targets, buy_loss_targets, sell_profit_targets, sell_loss_targets,
             buy_expected_returns, sell_expected_returns) = labels
            is_long_entry = [False] * len(df)
            is_short_entry = [False] * len(df)
        else:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            buy_profit_targets, buy_loss_targets, sell_profit_targets, sell_loss_targets = labels
            buy_expected_returns = [0.0] * len(df)
            sell_expected_returns = [0.0] * len(df)
            is_long_entry = [False] * len(df)
            is_short_entry = [False] * len(df)

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        delete_query = "DELETE FROM processed_market_data WHERE symbol = %s"
        self.db.execute_query(delete_query, (symbol,))

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        values_to_insert = []

        for i in range(len(df)):
            # –°–æ–∑–¥–∞–µ–º JSON –æ–±—ä–µ–∫—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∞
            bar_indicators = {}
            for indicator_name, values_list in indicators.items():
                if i < len(values_list):
                    bar_indicators[indicator_name] = values_list[i]
                else:
                    bar_indicators[indicator_name] = None
            
            # –í–ê–ñ–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º expected_returns –≤ technical_indicators!
            # –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É—Ç–µ—á–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
            # –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö –ë–î

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            record = (
                int(df.iloc[i]['id']),  # raw_data_id
                symbol,
                int(df.iloc[i]['timestamp']),
                df.iloc[i]['datetime'],
                float(df.iloc[i]['open']),
                float(df.iloc[i]['high']),
                float(df.iloc[i]['low']),
                float(df.iloc[i]['close']),
                float(df.iloc[i]['volume']),
                Json(bar_indicators),  # JSONB —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                int(buy_profit_targets[i]),
                int(buy_loss_targets[i]),
                int(sell_profit_targets[i]),
                int(sell_loss_targets[i]),
                float(buy_expected_returns[i]),  # –î–æ–±–∞–≤–ª—è–µ–º expected returns
                float(sell_expected_returns[i]),
                bool(is_long_entry[i]),  # –§–ª–∞–≥ —Å–ª—É—á–∞–π–Ω–æ–≥–æ LONG –≤—Ö–æ–¥–∞
                bool(is_short_entry[i]),  # –§–ª–∞–≥ —Å–ª—É—á–∞–π–Ω–æ–≥–æ SHORT –≤—Ö–æ–¥–∞
                None,  # long_entry_type (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤)
                None,  # short_entry_type (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤)
                None,  # long_entry_confidence
                None   # short_entry_confidence
            )

            values_to_insert.append(record)

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å expected returns –∏ —Ñ–ª–∞–≥–∞–º–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
        insert_query = """
        INSERT INTO processed_market_data 
        (raw_data_id, symbol, timestamp, datetime, open, high, low, close, volume, 
         technical_indicators, buy_profit_target, buy_loss_target, 
         sell_profit_target, sell_loss_target, buy_expected_return, sell_expected_return,
         is_long_entry, is_short_entry, long_entry_type, short_entry_type,
         long_entry_confidence, short_entry_confidence)
        VALUES %s
        """

        try:
            with self.db.connection.cursor() as cursor:
                execute_values(cursor, insert_query, values_to_insert, page_size=1000)

            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(values_to_insert)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            raise

    def process_single_symbol(self, symbol: str, limit: int = None) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é

        Args:
            symbol: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """

        logger.info(f"\n{'=' * 50}")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        logger.info(f"{'=' * 50}")

        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            df = self.load_raw_data(symbol, limit)

            if len(df) == 0:
                return {'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

            # 2. –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            indicators = self.calculate_technical_indicators(df)

            if not indicators:
                return {'success': False, 'error': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'}

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è
            labels = self.create_labels_based_on_risk_profile(df, symbol)

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.save_processed_data(symbol, df, indicators, labels)

            # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            buy_profit_count = sum(labels[0])
            buy_loss_count = sum(labels[1])
            sell_profit_count = sum(labels[2])
            sell_loss_count = sum(labels[3])

            stats = {
                'success': True,
                'symbol': symbol,
                'total_records': len(df),
                'indicators_count': len(indicators),
                'buy_profit_signals': buy_profit_count,
                'buy_loss_signals': buy_loss_count,
                'sell_profit_signals': sell_profit_count,
                'sell_loss_signals': sell_loss_count,
                'buy_win_rate': buy_profit_count / (buy_profit_count + buy_loss_count) * 100 if (
                                                                                                            buy_profit_count + buy_loss_count) > 0 else 0,
                'sell_win_rate': sell_profit_count / (sell_profit_count + sell_loss_count) * 100 if (
                                                                                                                sell_profit_count + sell_loss_count) > 0 else 0
            }

            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
            return {'success': False, 'error': str(e)}

    def process_single_symbol_with_retry(self, symbol: str, limit: int = None, max_retries: int = 3) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        for attempt in range(max_retries):
            try:
                return self.process_single_symbol(symbol, limit)
            except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
                logger.warning(f"‚ö†Ô∏è –†–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {symbol}, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                logger.warning(f"   –û—à–∏–±–∫–∞: {e}")
                
                if attempt < max_retries - 1:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    try:
                        self.db.disconnect()
                        time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                        self.db.connect()
                        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    except Exception as conn_error:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {conn_error}")
                else:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    return {'success': False, 'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫'}
            except Exception as e:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                return {'success': False, 'error': str(e)}
        
        return {'success': False, 'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

    def save_processing_checkpoint(self, processed_symbols: list, failed_symbols: list):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–µ–∫–ø–æ–∏–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        
        Args:
            processed_symbols: –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            failed_symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
        """
        checkpoint = {
            'timestamp': datetime.now().isoformat(),
            'processed': processed_symbols,
            'failed': failed_symbols
        }
        
        checkpoint_file = 'prepare_dataset_checkpoint.pkl'
        try:
            with open(checkpoint_file, 'wb') as f:
                pickle.dump(checkpoint, f)
            logger.info(f"üíæ –ß–µ–∫–ø–æ–∏–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(processed_symbols)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {len(failed_symbols)} —Å –æ—à–∏–±–∫–∞–º–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–ø–æ–∏–Ω—Ç–∞: {e}")
    
    def load_processing_checkpoint(self) -> dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–µ–∫–ø–æ–∏–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        """
        checkpoint_file = 'prepare_dataset_checkpoint.pkl'
        if os.path.exists(checkpoint_file):
            try:
                with open(checkpoint_file, 'rb') as f:
                    checkpoint = pickle.load(f)
                logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ–∫–ø–æ–∏–Ω—Ç –æ—Ç {checkpoint['timestamp']}")
                logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(checkpoint['processed'])} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"   –° –æ—à–∏–±–∫–∞–º–∏: {len(checkpoint['failed'])} —Å–∏–º–≤–æ–ª–æ–≤")
                return checkpoint
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–∞: {e}")
        return {'processed': [], 'failed': []}

    def process_all_symbols_with_resume(self, symbols: list = None, limit: int = None, use_checkpoint: bool = True) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ None - —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            use_checkpoint: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —á–µ–∫–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if symbols is None:
            symbols = self.get_unprocessed_symbols()
            if not symbols:
                logger.info("‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                return {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        processed_symbols = []
        failed_symbols = []
        
        if use_checkpoint:
            checkpoint = self.load_processing_checkpoint()
            processed_symbols = checkpoint.get('processed', [])
            failed_symbols = checkpoint.get('failed', [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
            symbols_to_process = [s for s in symbols if s not in processed_symbols]
            
            if len(symbols_to_process) < len(symbols):
                logger.info(f"üìã –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {len(symbols) - len(symbols_to_process)} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            symbols_to_process = symbols
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(symbols_to_process)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        results = {}
        successful = 0
        failed = 0
        start_time = time.time()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        for idx, symbol in enumerate(symbols_to_process):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            elapsed = time.time() - start_time
            if idx > 0:
                avg_time = elapsed / idx
                remaining = avg_time * (len(symbols_to_process) - idx)
                logger.info(f"\n‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: {idx}/{len(symbols_to_process)} " +
                          f"({idx/len(symbols_to_process)*100:.1f}%) " +
                          f"–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {remaining/60:.1f} –º–∏–Ω")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            result = self.process_single_symbol_with_retry(symbol, limit)
            results[symbol] = result
            
            if result['success']:
                successful += 1
                processed_symbols.append(symbol)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if self.verify_processed_data(symbol):
                    logger.info(f"‚úÖ {symbol}: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                else:
                    logger.warning(f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")
            else:
                failed += 1
                failed_symbols.append(symbol)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç –∫–∞–∂–¥—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
            if (idx + 1) % 5 == 0:
                self.save_processing_checkpoint(processed_symbols, failed_symbols)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
        self.save_processing_checkpoint(processed_symbols, failed_symbols)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
        if successful > 0:
            self.save_feature_columns_metadata()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        logger.info(f"\n{'=' * 50}")
        logger.info(f"üìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò")
        logger.info(f"{'=' * 50}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω—É—Ç")
        
        if successful > 0:
            logger.info(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–∏–º–≤–æ–ª: {total_time/successful:.1f} —Å–µ–∫")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if successful > 0:
            total_records = sum(r.get('total_records', 0) for r in results.values() if r['success'])
            total_buy_profits = sum(r.get('buy_profit_signals', 0) for r in results.values() if r['success'])
            total_buy_losses = sum(r.get('buy_loss_signals', 0) for r in results.values() if r['success'])
            total_sell_profits = sum(r.get('sell_profit_signals', 0) for r in results.values() if r['success'])
            total_sell_losses = sum(r.get('sell_loss_signals', 0) for r in results.values() if r['success'])

            overall_buy_wr = total_buy_profits / (total_buy_profits + total_buy_losses) * 100 if (
                                                                                                             total_buy_profits + total_buy_losses) > 0 else 0
            overall_sell_wr = total_sell_profits / (total_sell_profits + total_sell_losses) * 100 if (
                                                                                                                 total_sell_profits + total_sell_losses) > 0 else 0

            logger.info(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_records:,}")
            logger.info(f"   üü¢ BUY Win Rate: {overall_buy_wr:.1f}%")
            logger.info(f"   üî¥ SELL Win Rate: {overall_sell_wr:.1f}%")
        
        if failed_symbols:
            logger.warning(f"\n‚ö†Ô∏è –°–∏–º–≤–æ–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏: {', '.join(failed_symbols)}")
        
        return results

    def process_all_symbols(self, symbols: list = None, limit: int = None) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π —Å —Ä–µ–∑—é–º–µ)

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–µ—Å–ª–∏ None - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)
            limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        """
        return self.process_all_symbols_with_resume(symbols, limit, use_checkpoint=False)

    def save_feature_columns_metadata(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –≤ –ë–î"""

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ë–î
        query = """
        SELECT technical_indicators 
        FROM processed_market_data 
        WHERE technical_indicators IS NOT NULL 
        LIMIT 1
        """

        result = self.db.execute_query(query, fetch=True)

        if result and result[0][0]:
            indicators_sample = result[0][0]
            feature_columns = list(indicators_sample.keys())

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata_query = """
            INSERT INTO model_metadata (model_name, model_type, version, feature_columns, created_at)
            VALUES (%s, %s, %s, %s, NOW())
            ON CONFLICT DO NOTHING
            """

            self.db.execute_query(metadata_query, (
                'feature_extraction',
                'preprocessing',
                '1.0',
                Json(feature_columns)
            ))

            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")

    def get_processing_statistics(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""

        stats_query = """
        SELECT 
            symbol,
            COUNT(*) as total_records,
            SUM(buy_profit_target) as buy_profits,
            SUM(buy_loss_target) as buy_losses,
            SUM(sell_profit_target) as sell_profits,
            SUM(sell_loss_target) as sell_losses,
            MIN(datetime) as start_date,
            MAX(datetime) as end_date
        FROM processed_market_data 
        GROUP BY symbol
        ORDER BY symbol
        """

        results = self.db.execute_query(stats_query, fetch=True)

        stats = {}
        for row in results:
            symbol_stats = {
                'total_records': row[1],
                'buy_profits': row[2],
                'buy_losses': row[3],
                'sell_profits': row[4],
                'sell_losses': row[5],
                'start_date': row[6],
                'end_date': row[7],
                'buy_win_rate': (row[2] / (row[2] + row[3]) * 100) if (row[2] + row[3]) > 0 else 0,
                'sell_win_rate': (row[4] / (row[4] + row[5]) * 100) if (row[4] + row[5]) > 0 else 0
            }
            stats[row[0]] = symbol_stats

        return stats


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import yaml
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    risk_profile = config['risk_profile']

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    db_manager = PostgreSQLManager(db_config)

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        db_manager.connect()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
        preparator = MarketDatasetPreparator(db_manager, risk_profile)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        import sys
        if len(sys.argv) > 1:
            if sys.argv[1] == '--resume':
                logger.info("üîÑ –†–µ–∂–∏–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                results = preparator.process_all_symbols_with_resume(use_checkpoint=True)
            elif sys.argv[1] == '--verify':
                logger.info("üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                processed_query = "SELECT DISTINCT symbol FROM processed_market_data"
                processed = db_manager.execute_query(processed_query, fetch=True)
                
                for symbol, in processed:
                    if preparator.verify_processed_data(symbol):
                        logger.info(f"‚úÖ {symbol}: –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                    else:
                        logger.warning(f"‚ùå {symbol}: –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
                return
            else:
                symbol = sys.argv[1]
                logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞: {symbol}")
                limit = int(sys.argv[2]) if len(sys.argv) > 2 else None
                results = {symbol: preparator.process_single_symbol_with_retry(symbol, limit)}
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            results = preparator.process_all_symbols_with_resume(use_checkpoint=False)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if results:
            stats = preparator.get_processing_statistics()
            logger.info(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê!")
            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ processed_market_data")
            logger.info(f"üéØ –ì–æ—Ç–æ–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            unprocessed = preparator.get_unprocessed_symbols()
            if unprocessed:
                logger.info(f"\nüí° –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: {len(unprocessed)}")
                logger.info(f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python prepare_dataset.py --resume' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db_manager.disconnect()


if __name__ == "__main__":
    main()