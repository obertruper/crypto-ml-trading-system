#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏–∑ config.yaml
"""

import yaml
import logging
from download_data import PostgreSQLManager, BybitDataDownloader

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def main():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    data_config = config['data_download']
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    max_workers = data_config.get('max_workers', 5)
    db_manager = PostgreSQLManager(db_config, max_connections=max_workers + 2)
    market_type = data_config.get('market_type', 'futures')
    downloader = BybitDataDownloader(db_manager, market_type=market_type)
    
    try:
        db_manager.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        symbols = data_config['symbols']
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
        symbols = [s for s in symbols if 'TEST' not in s]
        interval = data_config['interval']
        days = data_config['days']
        max_workers = data_config.get('max_workers', 5)
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∏–Ω—Ç–µ—Ä–≤–∞–ª={interval}m, –ø–µ—Ä–∏–æ–¥={days} –¥–Ω–µ–π")
        logger.info(f"üîß –ü–æ—Ç–æ–∫–æ–≤: {max_workers}")
        logger.info(f"üìà –¢–∏–ø —Ä—ã–Ω–∫–∞: {market_type.upper()}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é
        results = downloader.download_multiple_symbols(symbols, interval, days, max_workers=max_workers)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = sum(1 for r in results.values() if r.get('success', False))
        skipped_count = sum(1 for r in results.values() if r.get('success') and r.get('stats', {}).get('skipped', False))
        new_count = success_count - skipped_count
        
        logger.info(f"\nüìä –ò–¢–û–ì–ò:")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   üì• –ù–æ–≤—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {new_count}")
        logger.info(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ): {skipped_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats, total_records = downloader.get_database_stats()
        
        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–î:")
        for symbol, stat in sorted(stats.items()):
            logger.info(f"{symbol}: {stat['total_records']:,} –∑–∞–ø–∏—Å–µ–π, "
                       f"–ø–µ—Ä–∏–æ–¥: {stat['start_date']} - {stat['end_date']}")
        
        logger.info(f"\nüéØ –ò–¢–û–ì–û: {total_records:,} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {len(stats)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
        failed = [s for s, r in results.items() if not r.get('success', False)]
        if failed:
            logger.warning(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ({len(failed)} —Å–∏–º–≤–æ–ª–æ–≤):")
            for symbol in failed:
                error = results[symbol].get('error', 'Unknown error')
                logger.warning(f"   {symbol}: {error}")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        if hasattr(downloader, 'shutdown_flag') and downloader.shutdown_flag.is_set():
            logger.warning("\n‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        logger.info("\nüîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        db_manager.disconnect()


if __name__ == "__main__":
    main()