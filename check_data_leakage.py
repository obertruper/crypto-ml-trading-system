#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
"""

import pandas as pd
import numpy as np
import psycopg2
import json
import yaml
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def check_data_leakage():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫—É —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ features"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**db_config)
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã processed_market_data
        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã processed_market_data...")
        query = """
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'processed_market_data'
        ORDER BY ordinal_position
        """
        
        columns_df = pd.read_sql_query(query, conn)
        logger.info(f"–í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns_df)}")
        
        # –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        target_columns = ['buy_expected_return', 'sell_expected_return', 
                         'expected_return_buy', 'expected_return_sell']
        
        logger.info("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
        for target in target_columns:
            if target in columns_df['column_name'].values:
                logger.info(f"   ‚úÖ {target} –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ technical_indicators
        logger.info("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ technical_indicators...")
        query = """
        SELECT technical_indicators 
        FROM processed_market_data 
        WHERE technical_indicators IS NOT NULL 
        LIMIT 5
        """
        
        sample_data = pd.read_sql_query(query, conn)
        
        if len(sample_data) > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
            indicators = sample_data.iloc[0]['technical_indicators']
            indicator_keys = list(indicators.keys())
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(indicator_keys)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ JSON")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫—É –≤ technical_indicators:")
            leakage_found = False
            for key in indicator_keys:
                for target in target_columns:
                    if target in key or key in target:
                        logger.error(f"   üö® –£–¢–ï–ß–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê: {key} –≤ technical_indicators!")
                        leakage_found = True
            
            if not leakage_found:
                logger.info("   ‚úÖ –£—Ç–µ—á–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ technical_indicators")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ prepare_dataset.py
        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ prepare_dataset.py...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ expected_returns —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        query = """
        SELECT 
            symbol,
            COUNT(*) as total_records,
            AVG(buy_expected_return) as avg_buy_return,
            STDDEV(buy_expected_return) as std_buy_return,
            MIN(buy_expected_return) as min_buy_return,
            MAX(buy_expected_return) as max_buy_return,
            AVG(sell_expected_return) as avg_sell_return,
            STDDEV(sell_expected_return) as std_sell_return
        FROM processed_market_data
        GROUP BY symbol
        ORDER BY total_records DESC
        LIMIT 10
        """
        
        stats_df = pd.read_sql_query(query, conn)
        logger.info("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ expected_returns –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
        print(stats_df.to_string(index=False))
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∏ expected_returns
        logger.info("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å —Ü–µ–ª–µ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏...")
        query = """
        SELECT 
            pm.symbol,
            pm.technical_indicators,
            pm.buy_expected_return,
            pm.sell_expected_return
        FROM processed_market_data pm
        WHERE pm.symbol = 'BTCUSDT'
        LIMIT 10000
        """
        
        btc_data = pd.read_sql_query(query, conn)
        
        if len(btc_data) > 0:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators_list = []
            for _, row in btc_data.iterrows():
                indicators_list.append(row['technical_indicators'])
            
            indicators_df = pd.json_normalize(indicators_list)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            buy_corr = indicators_df.corrwith(btc_data['buy_expected_return'])
            sell_corr = indicators_df.corrwith(btc_data['sell_expected_return'])
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã—Å–æ–∫–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ)
            high_corr_threshold = 0.8
            
            logger.info(f"\nüîç –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π (>{high_corr_threshold}):")
            suspicious_buy = buy_corr[buy_corr.abs() > high_corr_threshold]
            suspicious_sell = sell_corr[sell_corr.abs() > high_corr_threshold]
            
            if len(suspicious_buy) > 0:
                logger.warning("–° buy_expected_return:")
                for ind, corr in suspicious_buy.items():
                    logger.warning(f"   {ind}: {corr:.3f}")
            
            if len(suspicious_sell) > 0:
                logger.warning("–° sell_expected_return:")
                for ind, corr in suspicious_sell.items():
                    logger.warning(f"   {ind}: {corr:.3f}")
            
            if len(suspicious_buy) == 0 and len(suspicious_sell) == 0:
                logger.info("   ‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π")
        
        # 5. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        logger.info("\n" + "="*60)
        logger.info("–ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –£–¢–ï–ß–ö–£ –î–ê–ù–ù–´–•:")
        logger.info("="*60)
        
        if leakage_found:
            logger.error("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –£–¢–ï–ß–ö–ê –î–ê–ù–ù–´–•!")
            logger.error("   –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö")
            logger.error("   –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é –∏ –ø–ª–æ—Ö–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            logger.info("   –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω—ã –æ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            logger.info("   –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏:")
            logger.info("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
            logger.info("   - –°–ª–æ–∂–Ω–∞—è –Ω–µ–ª–∏–Ω–µ–π–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å")
            logger.info("   - –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
            logger.info("   - –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏")
        
    finally:
        conn.close()
        logger.info("\nüì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    check_data_leakage()