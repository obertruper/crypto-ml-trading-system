#!/usr/bin/env python3
"""
–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –∑–∞–ø–∏—Å–µ–π
"""

import psycopg2
import yaml
import logging
import time
from datetime import datetime
from tqdm import tqdm

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def fix_data_leakage_efficient():
    """–£–¥–∞–ª—è–µ—Ç expected_returns –∏–∑ technical_indicators –∏—Å–ø–æ–ª—å–∑—É—è –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**db_config)
    conn.autocommit = False
    
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–± –ø—Ä–æ–±–ª–µ–º—ã
        logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        cursor.execute("""
            SELECT COUNT(*) as total,
                   COUNT(CASE WHEN technical_indicators ? 'buy_expected_return' 
                              OR technical_indicators ? 'sell_expected_return' 
                         THEN 1 END) as with_leak
            FROM processed_market_data
        """)
        total, with_leak = cursor.fetchone()
        
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total:,}")
        logger.info(f"   –° —É—Ç–µ—á–∫–æ–π: {with_leak:,} ({with_leak/total*100:.1f}%)")
        
        if with_leak == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            return
        
        # 2. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å ID –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        logger.info("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å ID...")
        cursor.execute("DROP TABLE IF EXISTS temp_ids_to_fix")
        cursor.execute("""
            CREATE TEMP TABLE temp_ids_to_fix AS
            SELECT id 
            FROM processed_market_data 
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """)
        
        cursor.execute("SELECT COUNT(*) FROM temp_ids_to_fix")
        ids_count = cursor.fetchone()[0]
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ {ids_count:,} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è JOIN
        logger.info("   –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ...")
        cursor.execute("CREATE INDEX idx_temp_ids ON temp_ids_to_fix(id)")
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        cursor.execute("ANALYZE temp_ids_to_fix")
        
        # 5. –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞—Ç—á–∞–º–∏ —á–µ—Ä–µ–∑ JOIN
        logger.info("\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º...")
        
        batch_size = 10000
        processed = 0
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        with tqdm(total=ids_count, desc="–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", unit="–∑–∞–ø–∏—Å–µ–π") as pbar:
            while processed < ids_count:
                batch_start_time = time.time()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç—á —á–µ—Ä–µ–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π JOIN
                cursor.execute("""
                    UPDATE processed_market_data p
                    SET technical_indicators = p.technical_indicators 
                        - 'buy_expected_return'::text 
                        - 'sell_expected_return'::text
                    FROM (
                        SELECT id 
                        FROM temp_ids_to_fix 
                        ORDER BY id
                        LIMIT %s
                        OFFSET %s
                    ) t
                    WHERE p.id = t.id
                """, (batch_size, processed))
                
                batch_updated = cursor.rowcount
                processed += batch_updated
                
                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 50,000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                if processed % 50000 == 0:
                    conn.commit()
                    logger.info(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {processed:,} –∑–∞–ø–∏—Å–µ–π")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                pbar.update(batch_updated)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏ ETA
                batch_time = time.time() - batch_start_time
                total_elapsed = time.time() - start_time
                speed = processed / total_elapsed if total_elapsed > 0 else 0
                eta_seconds = (ids_count - processed) / speed if speed > 0 else 0
                
                pbar.set_postfix({
                    '–°–∫–æ—Ä–æ—Å—Ç—å': f'{speed:.0f} –∑–∞–ø/—Å–µ–∫',
                    '–ë–∞—Ç—á': f'{batch_time:.1f}—Å',
                    'ETA': f'{eta_seconds/60:.1f} –º–∏–Ω'
                })
                
                # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—å—à–µ batch_size, –∑–Ω–∞—á–∏—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏
                if batch_updated < batch_size:
                    break
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        conn.commit()
        
        total_time = time.time() - start_time
        logger.info(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed:,} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"   –í—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫ ({total_time/60:.1f} –º–∏–Ω)")
        logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {processed/total_time:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        cursor.execute("""
            SELECT COUNT(*) 
            FROM processed_market_data 
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """)
        remaining = cursor.fetchone()[0]
        
        if remaining == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞!")
            
            # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–∑–º–µ—Ä—É
            cursor.execute("""
                SELECT 
                    pg_size_pretty(AVG(pg_column_size(technical_indicators))::bigint) as avg_size,
                    pg_size_pretty(SUM(pg_column_size(technical_indicators))::bigint) as total_size
                FROM processed_market_data
                LIMIT 10000
            """)
            avg_size, total_size_sample = cursor.fetchone()
            logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
            logger.info(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä JSON: {avg_size}")
            logger.info(f"   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ~{with_leak * 100 / 1024 / 1024:.0f} –ú–ë")
            
            # 8. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            logger.info("\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã (VACUUM ANALYZE)...")
            conn.autocommit = True
            cursor.execute("VACUUM ANALYZE processed_market_data")
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        else:
            logger.error(f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å —É—Ç–µ—á–∫–æ–π: {remaining}")
            
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        conn.rollback()
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()
        logger.info("\nüì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    logger.info("üöÄ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    logger.info("=" * 60)
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JOIN")
    logger.info("–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 5-10 –º–∏–Ω—É—Ç –¥–ª—è 2.7–ú –∑–∞–ø–∏—Å–µ–π")
    logger.info("=" * 60)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() == 'y':
        try:
            fix_data_leakage_efficient()
        except KeyboardInterrupt:
            logger.info("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")