#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π
"""

import pandas as pd
import psycopg2
import yaml
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)


def test_enhanced_labels():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –°–û–ó–î–ê–ù–ò–Ø –ú–ï–¢–û–ö")
    print("="*80)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**db_config)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
    query = """
    SELECT 
        r.symbol, r.timestamp, r.close, r.high, r.low,
        p.buy_profit_target, p.buy_loss_target,
        p.sell_profit_target, p.sell_loss_target,
        p.technical_indicators
    FROM raw_market_data r
    JOIN processed_market_data p ON r.id = p.raw_data_id
    WHERE r.symbol = '1INCHUSDT' 
    AND r.market_type = 'futures'
    ORDER BY r.timestamp
    LIMIT 5000
    """
    
    df = pd.read_sql(query, conn)
    print(f"\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ JSONB
    df['buy_expected_return'] = df['technical_indicators'].apply(
        lambda x: x.get('buy_expected_return', 0.0) if x else 0.0
    )
    df['sell_expected_return'] = df['technical_indicators'].apply(
        lambda x: x.get('sell_expected_return', 0.0) if x else 0.0
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç–æ–∫
    print("\nüìà –ê–ù–ê–õ–ò–ó –°–¢–ê–†–´–• –ë–ò–ù–ê–†–ù–´–• –ú–ï–¢–û–ö:")
    print("-"*50)
    
    buy_profit = df['buy_profit_target'].sum()
    buy_loss = df['buy_loss_target'].sum()
    sell_profit = df['sell_profit_target'].sum()
    sell_loss = df['sell_loss_target'].sum()
    
    total_buy = buy_profit + buy_loss
    total_sell = sell_profit + sell_loss
    
    print(f"BUY —Å–∏–≥–Ω–∞–ª—ã:")
    if total_buy > 0:
        print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {buy_profit} ({buy_profit/total_buy*100:.1f}%)")
        print(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö: {buy_loss} ({buy_loss/total_buy*100:.1f}%)")
    else:
        print("  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    print(f"\nSELL —Å–∏–≥–Ω–∞–ª—ã:")
    if total_sell > 0:
        print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {sell_profit} ({sell_profit/total_sell*100:.1f}%)")
        print(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö: {sell_loss} ({sell_loss/total_sell*100:.1f}%)")
    else:
        print("  –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –ê–ù–ê–õ–ò–ó –ù–û–í–´–• –û–ñ–ò–î–ê–ï–ú–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-"*50)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–ø–∏—Å–∏, –≥–¥–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    df_with_returns = df[
        (df['buy_expected_return'] != 0) | (df['sell_expected_return'] != 0)
    ]
    
    if len(df_with_returns) > 0:
        print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(df_with_returns)} –∑–∞–ø–∏—Å–µ–π —Å –Ω–æ–≤—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ BUY
        buy_returns = df_with_returns['buy_expected_return']
        buy_positive = (buy_returns > 0.5).sum()
        buy_negative = (buy_returns < -0.5).sum()
        buy_neutral = len(buy_returns) - buy_positive - buy_negative
        
        print(f"\nBUY –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö (>0.5%): {buy_positive} ({buy_positive/len(buy_returns)*100:.1f}%)")
        print(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö (<-0.5%): {buy_negative} ({buy_negative/len(buy_returns)*100:.1f}%)")
        print(f"  –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {buy_neutral} ({buy_neutral/len(buy_returns)*100:.1f}%)")
        print(f"  –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {buy_returns.mean():.2f}%")
        print(f"  –ú–µ–¥–∏–∞–Ω–∞: {buy_returns.median():.2f}%")
        print(f"  –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {buy_returns.max():.2f}%")
        print(f"  –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {buy_returns.min():.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ SELL
        sell_returns = df_with_returns['sell_expected_return']
        sell_positive = (sell_returns > 0.5).sum()
        sell_negative = (sell_returns < -0.5).sum()
        sell_neutral = len(sell_returns) - sell_positive - sell_negative
        
        print(f"\nSELL –ø–æ–∑–∏—Ü–∏–∏:")
        print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö (>0.5%): {sell_positive} ({sell_positive/len(sell_returns)*100:.1f}%)")
        print(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö (<-0.5%): {sell_negative} ({sell_negative/len(sell_returns)*100:.1f}%)")
        print(f"  –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {sell_neutral} ({sell_neutral/len(sell_returns)*100:.1f}%)")
        print(f"  –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {sell_returns.mean():.2f}%")
        print(f"  –ú–µ–¥–∏–∞–Ω–∞: {sell_returns.median():.2f}%")
        print(f"  –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {sell_returns.max():.2f}%")
        print(f"  –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {sell_returns.min():.2f}%")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ BUY
        axes[0, 0].hist(buy_returns, bins=50, alpha=0.7, color='green', edgecolor='black')
        axes[0, 0].axvline(x=0, color='red', linestyle='--', label='–ë–µ–∑—É–±—ã—Ç–æ–∫')
        axes[0, 0].axvline(x=buy_returns.mean(), color='blue', linestyle='-', label=f'–°—Ä–µ–¥–Ω–µ–µ: {buy_returns.mean():.2f}%')
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ BUY')
        axes[0, 0].set_xlabel('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (%)')
        axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)
        
        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ SELL
        axes[0, 1].hist(sell_returns, bins=50, alpha=0.7, color='red', edgecolor='black')
        axes[0, 1].axvline(x=0, color='red', linestyle='--', label='–ë–µ–∑—É–±—ã—Ç–æ–∫')
        axes[0, 1].axvline(x=sell_returns.mean(), color='blue', linestyle='-', label=f'–°—Ä–µ–¥–Ω–µ–µ: {sell_returns.mean():.2f}%')
        axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SELL')
        axes[0, 1].set_xlabel('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (%)')
        axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[0, 1].legend()
        axes[0, 1].grid(True, alpha=0.3)
        
        # Box plot –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        axes[1, 0].boxplot([buy_returns, sell_returns], labels=['BUY', 'SELL'])
        axes[1, 0].set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π BUY vs SELL')
        axes[1, 0].set_ylabel('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (%)')
        axes[1, 0].grid(True, alpha=0.3)
        axes[1, 0].axhline(y=0, color='red', linestyle='--', alpha=0.5)
        
        # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        buy_sorted = np.sort(buy_returns)
        sell_sorted = np.sort(sell_returns)
        buy_cumulative = np.arange(1, len(buy_sorted) + 1) / len(buy_sorted)
        sell_cumulative = np.arange(1, len(sell_sorted) + 1) / len(sell_sorted)
        
        axes[1, 1].plot(buy_sorted, buy_cumulative, label='BUY', color='green')
        axes[1, 1].plot(sell_sorted, sell_cumulative, label='SELL', color='red')
        axes[1, 1].set_title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
        axes[1, 1].set_xlabel('–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (%)')
        axes[1, 1].set_ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å')
        axes[1, 1].legend()
        axes[1, 1].grid(True, alpha=0.3)
        axes[1, 1].axvline(x=0, color='black', linestyle='--', alpha=0.5)
        
        plt.tight_layout()
        plt.savefig('enhanced_labels_analysis.png', dpi=150, bbox_inches='tight')
        print("\nüìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: enhanced_labels_analysis.png")
        
    else:
        print("\n‚ö†Ô∏è –ù–æ–≤—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã.")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ prepare_dataset.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
    print("\n" + "="*80)
    print("–ü–†–ò–ú–ï–†–´ –ö–û–ù–ö–†–ï–¢–ù–´–• –°–î–ï–õ–û–ö")
    print("="*80)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
    if len(df_with_returns) > 0:
        successful_buys = df_with_returns[df_with_returns['buy_expected_return'] > 2.0].head(3)
        
        if len(successful_buys) > 0:
            print("\nüü¢ –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö BUY —Å–¥–µ–ª–æ–∫:")
            for idx, row in successful_buys.iterrows():
                print(f"\n–í—Ä–µ–º—è: {row['timestamp']}")
                print(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${row['close']:,.2f}")
                print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {row['buy_expected_return']:.2f}%")
                print(f"–°—Ç–∞—Ä–∞—è –º–µ—Ç–∫–∞: {'Profit' if row['buy_profit_target'] else 'Loss' if row['buy_loss_target'] else '–ù–µ—Ç'}")
    
    conn.close()
    
    print("\n" + "="*80)
    print("–í–´–í–û–î–´:")
    print("="*80)
    
    print("""
1. –°—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ –¥–∞–µ—Ç —Å–∏–ª—å–Ω–æ –∏—Å–∫–∞–∂–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –∏–∑-–∑–∞ –∂–µ—Å—Ç–∫–∏—Ö —Ü–µ–ª–µ–π (5.8%)
2. –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ —É—á–∏—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –∑–∞—â–∏—Ç—É –ø—Ä–∏–±—ã–ª–∏
3. –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
4. –ú–æ–¥–µ–ª—å —Å–º–æ–∂–µ—Ç –ª—É—á—à–µ –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏
    """)


if __name__ == "__main__":
    test_enhanced_labels()