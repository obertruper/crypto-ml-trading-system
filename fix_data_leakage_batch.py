#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
"""

import psycopg2
from psycopg2.extras import Json
import yaml
import logging
import time
from tqdm import tqdm

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def fix_data_leakage_batch():
    """–£–¥–∞–ª—è–µ—Ç expected_returns –∏–∑ technical_indicators –±–∞—Ç—á–∞–º–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**db_config)
    conn.autocommit = True
    
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–± –ø—Ä–æ–±–ª–µ–º—ã
        logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        cursor.execute("""
            SELECT COUNT(*) 
            FROM processed_market_data 
            WHERE technical_indicators ? 'buy_expected_return' 
               OR technical_indicators ? 'sell_expected_return'
        """)
        total_with_leak = cursor.fetchone()[0]
        
        logger.info(f"   –ó–∞–ø–∏—Å–µ–π —Å —É—Ç–µ—á–∫–æ–π: {total_with_leak:,}")
        
        if total_with_leak == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            return
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞–º–∏
        batch_size = 50000  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        processed = 0
        start_time = time.time()
        
        logger.info(f"\nüîß –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞—Ç—á–∞–º–∏ –ø–æ {batch_size:,} –∑–∞–ø–∏—Å–µ–π...")
        
        with tqdm(total=total_with_leak, desc="–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", unit="–∑–∞–ø–∏—Å–µ–π") as pbar:
            while processed < total_with_leak:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç—á –∑–∞–ø–∏—Å–µ–π
                cursor.execute("""
                    UPDATE processed_market_data
                    SET technical_indicators = technical_indicators 
                        - 'buy_expected_return'::text 
                        - 'sell_expected_return'::text
                    WHERE id IN (
                        SELECT id 
                        FROM processed_market_data 
                        WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
                        LIMIT %s
                    )
                """, (batch_size,))
                
                batch_updated = cursor.rowcount
                processed += batch_updated
                pbar.update(batch_updated)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                elapsed = time.time() - start_time
                speed = processed / elapsed if elapsed > 0 else 0
                remaining_time = (total_with_leak - processed) / speed if speed > 0 else 0
                
                pbar.set_postfix({
                    '–°–∫–æ—Ä–æ—Å—Ç—å': f'{speed:.0f} –∑–∞–ø/—Å–µ–∫',
                    '–û—Å—Ç–∞–ª–æ—Å—å': f'{remaining_time/60:.1f} –º–∏–Ω'
                })
                
                # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—å—à–µ batch_size, –∑–Ω–∞—á–∏—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏
                if batch_updated < batch_size:
                    break
        
        total_time = time.time() - start_time
        logger.info(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed:,} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"   –í—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫ ({total_time/60:.1f} –º–∏–Ω)")
        logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {processed/total_time:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")
        
        # 3. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        cursor.execute("""
            SELECT COUNT(*) 
            FROM processed_market_data 
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """)
        remaining = cursor.fetchone()[0]
        
        if remaining == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞!")
            
            # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            logger.info("\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã (VACUUM ANALYZE)...")
            cursor.execute("VACUUM ANALYZE processed_market_data")
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.error(f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å —É—Ç–µ—á–∫–æ–π: {remaining}")
            
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        conn.close()
        logger.info("\nüì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    logger.info("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏")
    logger.info("=" * 60)
    logger.info("–≠—Ç–∞ –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏")
    logger.info("–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    logger.info("=" * 60)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() == 'y':
        try:
            fix_data_leakage_batch()
        except KeyboardInterrupt:
            logger.info("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")