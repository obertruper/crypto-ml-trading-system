#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
"""

import psycopg2
import yaml
import pandas as pd
import numpy as np

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

conn = psycopg2.connect(**db_config)

print("="*80)
print("–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –î–ê–¢–ê–°–ï–¢–ê")
print("="*80)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
cursor = conn.cursor()
cursor.execute("SELECT COUNT(*) FROM processed_market_data")
total_records = cursor.fetchone()[0]
print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ processed_market_data: {total_records:,}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
cursor.execute("""
    SELECT COUNT(*) 
    FROM processed_market_data 
    WHERE technical_indicators->>'buy_expected_return' IS NOT NULL
""")
records_with_new_labels = cursor.fetchone()[0]
print(f"üìà –ó–∞–ø–∏—Å–µ–π —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç–∫–∞–º–∏: {records_with_new_labels:,}")
print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {records_with_new_labels/total_records*100:.1f}%")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
cursor.execute("""
    SELECT 
        symbol,
        COUNT(*) as total,
        COUNT(CASE WHEN technical_indicators->>'buy_expected_return' IS NOT NULL THEN 1 END) as with_labels
    FROM processed_market_data
    GROUP BY symbol
    ORDER BY symbol
""")

print("\nüìä –°—Ç–∞—Ç—É—Å –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
print(f"{'–°–∏–º–≤–æ–ª':<15} {'–í—Å–µ–≥–æ':<10} {'–° –º–µ—Ç–∫–∞–º–∏':<10} {'–ü—Ä–æ–≥—Ä–µ—Å—Å':<10}")
print("-"*50)

for symbol, total, with_labels in cursor.fetchall():
    progress = with_labels/total*100 if total > 0 else 0
    print(f"{symbol:<15} {total:<10,} {with_labels:<10,} {progress:<10.1f}%")

# –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç–∫–∞–º–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
if records_with_new_labels > 0:
    query = """
    SELECT 
        technical_indicators->>'buy_expected_return' as buy_return,
        technical_indicators->>'sell_expected_return' as sell_return
    FROM processed_market_data
    WHERE technical_indicators->>'buy_expected_return' IS NOT NULL
    LIMIT 10000
    """
    
    df = pd.read_sql(query, conn)
    df['buy_return'] = df['buy_return'].astype(float)
    df['sell_return'] = df['sell_return'].astype(float)
    
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–∫ (–≤—ã–±–æ—Ä–∫–∞ 10,000):")
    print("\nBUY –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ: {df['buy_return'].mean():.2f}%")
    print(f"  –ú–µ–¥–∏–∞–Ω–∞: {df['buy_return'].median():.2f}%")
    print(f"  Std: {df['buy_return'].std():.2f}%")
    print(f"  Min: {df['buy_return'].min():.2f}%")
    print(f"  Max: {df['buy_return'].max():.2f}%")
    print(f"  –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {(df['buy_return'] > 0).sum()} ({(df['buy_return'] > 0).mean()*100:.1f}%)")
    
    print("\nSELL –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ: {df['sell_return'].mean():.2f}%")
    print(f"  –ú–µ–¥–∏–∞–Ω–∞: {df['sell_return'].median():.2f}%")
    print(f"  Std: {df['sell_return'].std():.2f}%")
    print(f"  Min: {df['sell_return'].min():.2f}%")
    print(f"  Max: {df['sell_return'].max():.2f}%")
    print(f"  –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {(df['sell_return'] > 0).sum()} ({(df['sell_return'] > 0).mean()*100:.1f}%)")

conn.close()

print("\n" + "="*80)
if records_with_new_labels == total_records:
    print("‚úÖ –î–ê–¢–ê–°–ï–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –û–ë–£–ß–ï–ù–ò–Æ!")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_advanced_regression.py")
else:
    print("‚è≥ –î–ê–¢–ê–°–ï–¢ –ï–©–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢–°–Ø...")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {records_with_new_labels/total_records*100:.1f}%")
    print("   –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è prepare_dataset.py")
print("="*80)