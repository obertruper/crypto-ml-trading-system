#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import time
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from datetime import datetime
import argparse

class TrainingMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, log_dir):
        self.log_dir = log_dir
        self.fig, self.axes = plt.subplots(2, 2, figsize=(12, 8))
        self.fig.suptitle(f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è - {log_dir}', fontsize=14)
        
    def find_latest_metrics_files(self):
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        metrics_files = []
        for file in os.listdir(self.log_dir):
            if file.endswith('_metrics.csv'):
                metrics_files.append(os.path.join(self.log_dir, file))
        return metrics_files
    
    def update_plots(self, frame):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏"""
        metrics_files = self.find_latest_metrics_files()
        
        if not metrics_files:
            return
        
        # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        for ax in self.axes.flat:
            ax.clear()
        
        colors = ['blue', 'green', 'red', 'orange']
        
        for idx, metrics_file in enumerate(metrics_files):
            if not os.path.exists(metrics_file):
                continue
                
            try:
                # –ß–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                df = pd.read_csv(metrics_file)
                if len(df) == 0:
                    continue
                
                model_name = os.path.basename(metrics_file).replace('_metrics.csv', '')
                color = colors[idx % len(colors)]
                
                # Loss
                self.axes[0, 0].plot(df['epoch'], df['loss'], 
                                   label=f'{model_name} (train)', color=color)
                self.axes[0, 0].plot(df['epoch'], df['val_loss'], 
                                   label=f'{model_name} (val)', color=color, linestyle='--')
                self.axes[0, 0].set_title('Loss')
                self.axes[0, 0].set_xlabel('–≠–ø–æ—Ö–∞')
                self.axes[0, 0].set_ylabel('Loss')
                self.axes[0, 0].legend(fontsize=8)
                self.axes[0, 0].grid(True, alpha=0.3)
                
                # Accuracy
                self.axes[0, 1].plot(df['epoch'], df['accuracy'], 
                                   label=f'{model_name} (train)', color=color)
                self.axes[0, 1].plot(df['epoch'], df['val_accuracy'], 
                                   label=f'{model_name} (val)', color=color, linestyle='--')
                self.axes[0, 1].set_title('Accuracy')
                self.axes[0, 1].set_xlabel('–≠–ø–æ—Ö–∞')
                self.axes[0, 1].set_ylabel('Accuracy')
                self.axes[0, 1].legend(fontsize=8)
                self.axes[0, 1].grid(True, alpha=0.3)
                
                # AUC
                if 'auc' in df.columns:
                    self.axes[1, 0].plot(df['epoch'], df['auc'], 
                                       label=f'{model_name} (train)', color=color)
                    self.axes[1, 0].plot(df['epoch'], df['val_auc'], 
                                       label=f'{model_name} (val)', color=color, linestyle='--')
                    self.axes[1, 0].set_title('AUC')
                    self.axes[1, 0].set_xlabel('–≠–ø–æ—Ö–∞')
                    self.axes[1, 0].set_ylabel('AUC')
                    self.axes[1, 0].legend(fontsize=8)
                    self.axes[1, 0].grid(True, alpha=0.3)
                
                # Learning rate
                if 'lr' in df.columns:
                    self.axes[1, 1].plot(df['epoch'], df['lr'], 
                                       label=model_name, color=color)
                    self.axes[1, 1].set_title('Learning Rate')
                    self.axes[1, 1].set_xlabel('–≠–ø–æ—Ö–∞')
                    self.axes[1, 1].set_ylabel('LR')
                    self.axes[1, 1].legend(fontsize=8)
                    self.axes[1, 1].grid(True, alpha=0.3)
                    self.axes[1, 1].set_yscale('log')
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {metrics_file}: {e}")
                continue
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        self.fig.suptitle(f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è - {datetime.now().strftime("%H:%M:%S")}', 
                         fontsize=14)
        
        plt.tight_layout()
    
    def start_monitoring(self, interval=10):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.log_dir}")
        print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        ani = animation.FuncAnimation(self.fig, self.update_plots, 
                                    interval=interval*1000, cache_frame_data=False)
        plt.show()


def find_latest_log_dir():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ª–æ–≥–∞–º–∏"""
    log_dirs = []
    if os.path.exists('logs'):
        for dir_name in os.listdir('logs'):
            if dir_name.startswith('training_'):
                log_dirs.append(os.path.join('logs', dir_name))
    
    if log_dirs:
        return sorted(log_dirs)[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    return None


def main():
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–∏')
    parser.add_argument('--log-dir', type=str, help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏')
    parser.add_argument('--interval', type=int, default=10, 
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if args.log_dir:
        log_dir = args.log_dir
    else:
        log_dir = find_latest_log_dir()
        
    if not log_dir or not os.path.exists(log_dir):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏")
        print("üí° –£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ --log-dir –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor = TrainingMonitor(log_dir)
    monitor.start_monitoring(args.interval)


if __name__ == "__main__":
    main()