#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.
–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import sys
import psycopg2
from psycopg2.extras import DictCursor
from datetime import datetime, timedelta
import pandas as pd
from tabulate import tabulate
import random
from typing import Dict, List, Tuple
import numpy as np


def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = psycopg2.connect(
            host='localhost',
            port=5555,
            database='crypto_trading',
            user='ruslan',
            password='ruslan'
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)


def get_overall_stats(cursor) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ë–î."""
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    cursor.execute("SELECT COUNT(*) FROM raw_market_data")
    total_records = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    cursor.execute("SELECT COUNT(DISTINCT symbol) FROM raw_market_data")
    unique_symbols = cursor.fetchone()[0]
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    cursor.execute("""
        SELECT MIN(timestamp), MAX(timestamp) 
        FROM raw_market_data
    """)
    min_time, max_time = cursor.fetchone()
    
    # –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""
        SELECT pg_size_pretty(pg_total_relation_size('raw_market_data'))
    """)
    table_size = cursor.fetchone()[0]
    
    return {
        'total_records': total_records,
        'unique_symbols': unique_symbols,
        'min_time': min_time,
        'max_time': max_time,
        'table_size': table_size
    }


def get_symbol_stats(cursor) -> pd.DataFrame:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É."""
    query = """
    SELECT 
        symbol,
        COUNT(*) as record_count,
        MIN(timestamp) as first_timestamp,
        MAX(timestamp) as last_timestamp,
        MIN(close) as min_price,
        MAX(close) as max_price,
        AVG(close) as avg_price,
        STDDEV(close) as price_stddev,
        SUM(volume) as total_volume,
        AVG(volume) as avg_volume
    FROM raw_market_data
    GROUP BY symbol
    ORDER BY symbol
    """
    
    cursor.execute(query)
    columns = [desc[0] for desc in cursor.description]
    data = cursor.fetchall()
    
    return pd.DataFrame(data, columns=columns)


def get_sample_records(cursor, symbol: str) -> Tuple[Dict, Dict, Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞: –ø–µ—Ä–≤–∞—è, –ø–æ—Å–ª–µ–¥–Ω—è—è, —Å–ª—É—á–∞–π–Ω–∞—è."""
    # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å
    cursor.execute("""
        SELECT * FROM raw_market_data 
        WHERE symbol = %s 
        ORDER BY timestamp ASC 
        LIMIT 1
    """, (symbol,))
    first = dict(cursor.fetchone())
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
    cursor.execute("""
        SELECT * FROM raw_market_data 
        WHERE symbol = %s 
        ORDER BY timestamp DESC 
        LIMIT 1
    """, (symbol,))
    last = dict(cursor.fetchone())
    
    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–ø–∏—Å—å
    cursor.execute("""
        SELECT * FROM raw_market_data 
        WHERE symbol = %s 
        ORDER BY RANDOM() 
        LIMIT 1
    """, (symbol,))
    random_rec = dict(cursor.fetchone())
    
    return first, last, random_rec


def check_time_intervals(cursor, symbol: str) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    cursor.execute("""
        SELECT timestamp 
        FROM raw_market_data 
        WHERE symbol = %s 
        ORDER BY timestamp
    """, (symbol,))
    
    timestamps = [row[0] for row in cursor.fetchall()]
    
    if len(timestamps) < 2:
        return {
            'total_records': len(timestamps),
            'gaps_found': 0,
            'duplicates': 0,
            'wrong_intervals': 0
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    gaps = []
    wrong_intervals = []
    
    for i in range(1, len(timestamps)):
        diff = (timestamps[i] - timestamps[i-1]).total_seconds() / 60
        
        if diff > 15:  # –ü—Ä–æ–ø—É—Å–∫
            gaps.append({
                'from': timestamps[i-1],
                'to': timestamps[i],
                'gap_minutes': diff
            })
        elif diff < 15 and diff > 0:  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            wrong_intervals.append({
                'time': timestamps[i],
                'interval': diff
            })
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_timestamps = len(set(timestamps))
    duplicates = len(timestamps) - unique_timestamps
    
    return {
        'total_records': len(timestamps),
        'gaps_found': len(gaps),
        'gaps': gaps[:5],  # –ü–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–ø—É—Å–∫–æ–≤
        'duplicates': duplicates,
        'wrong_intervals': len(wrong_intervals),
        'wrong_interval_samples': wrong_intervals[:5]
    }


def check_recent_data(cursor, hours: int = 24) -> pd.DataFrame:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤."""
    cutoff_time = datetime.now() - timedelta(hours=hours)
    
    query = """
    SELECT 
        symbol,
        COUNT(*) as recent_records,
        MAX(timestamp) as last_timestamp,
        EXTRACT(EPOCH FROM (NOW() - MAX(timestamp)))/3600 as hours_ago
    FROM raw_market_data
    WHERE timestamp > %s
    GROUP BY symbol
    ORDER BY symbol
    """
    
    cursor.execute(query, (cutoff_time,))
    columns = [desc[0] for desc in cursor.description]
    data = cursor.fetchall()
    
    return pd.DataFrame(data, columns=columns)


def format_record(record: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –≤—ã–≤–æ–¥–∞."""
    return (
        f"  –í—Ä–µ–º—è: {record['timestamp']}\n"
        f"  Open: {record['open']:.4f}, High: {record['high']:.4f}, "
        f"Low: {record['low']:.4f}, Close: {record['close']:.4f}\n"
        f"  Volume: {record['volume']:.2f}"
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î\n")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = connect_to_db()
    cursor = conn.cursor(cursor_factory=DictCursor)
    
    try:
        # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 80)
        stats = get_overall_stats(cursor)
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']:,}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {stats['unique_symbols']}")
        print(f"–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {stats['min_time']} - {stats['max_time']}")
        print(f"–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {stats['table_size']}")
        print()
        
        # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–û–ù–ï–¢–ê–ú")
        print("=" * 80)
        symbol_stats = get_symbol_stats(cursor)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        display_df = symbol_stats.copy()
        display_df['record_count'] = display_df['record_count'].apply(lambda x: f"{x:,}")
        display_df['min_price'] = display_df['min_price'].apply(lambda x: f"{x:.4f}")
        display_df['max_price'] = display_df['max_price'].apply(lambda x: f"{x:.4f}")
        display_df['avg_price'] = display_df['avg_price'].apply(lambda x: f"{x:.4f}")
        display_df['price_stddev'] = display_df['price_stddev'].apply(lambda x: f"{x:.4f}" if pd.notna(x) else "N/A")
        display_df['total_volume'] = display_df['total_volume'].apply(lambda x: f"{x:,.0f}")
        display_df['avg_volume'] = display_df['avg_volume'].apply(lambda x: f"{x:,.2f}")
        
        print(tabulate(display_df, headers='keys', tablefmt='grid', showindex=False))
        print()
        
        # 3. –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
        print("üìù –ü–†–ò–ú–ï–†–´ –ó–ê–ü–ò–°–ï–ô")
        print("=" * 80)
        
        for symbol in symbol_stats['symbol']:
            print(f"\n{symbol}:")
            first, last, random_rec = get_sample_records(cursor, symbol)
            
            print("\n  –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:")
            print(format_record(first))
            
            print("\n  –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:")
            print(format_record(last))
            
            print("\n  –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–ø–∏—Å—å:")
            print(format_record(random_rec))
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        print("\n‚è∞ –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –ò–ù–¢–ï–†–í–ê–õ–û–í")
        print("=" * 80)
        
        interval_issues = []
        for symbol in symbol_stats['symbol']:
            check_result = check_time_intervals(cursor, symbol)
            
            print(f"\n{symbol}:")
            print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {check_result['total_records']:,}")
            print(f"  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {check_result['gaps_found']}")
            print(f"  –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {check_result['duplicates']}")
            print(f"  –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {check_result['wrong_intervals']}")
            
            if check_result['gaps_found'] > 0:
                print("  –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
                for gap in check_result['gaps'][:3]:
                    print(f"    {gap['from']} -> {gap['to']} ({gap['gap_minutes']:.0f} –º–∏–Ω—É—Ç)")
            
            if check_result['wrong_intervals'] > 0:
                interval_issues.append(symbol)
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        print("\nüïê –ü–†–û–í–ï–†–ö–ê –°–í–ï–ñ–ï–°–¢–ò –î–ê–ù–ù–´–• (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)")
        print("=" * 80)
        
        recent_data = check_recent_data(cursor, 24)
        
        if len(recent_data) == 0:
            print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞!")
        else:
            recent_display = recent_data.copy()
            recent_display['recent_records'] = recent_display['recent_records'].apply(lambda x: f"{x:,}")
            recent_display['hours_ago'] = recent_display['hours_ago'].apply(lambda x: f"{x:.1f}—á –Ω–∞–∑–∞–¥")
            
            print(tabulate(recent_display[['symbol', 'recent_records', 'last_timestamp', 'hours_ago']], 
                         headers=['–°–∏–º–≤–æ–ª', '–ó–∞–ø–∏—Å–µ–π –∑–∞ 24—á', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å', '–û–±–Ω–æ–≤–ª–µ–Ω–æ'], 
                         tablefmt='grid', 
                         showindex=False))
        
        # 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        print("\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê")
        print("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
        all_symbols = set(symbol_stats['symbol'])
        recent_symbols = set(recent_data['symbol']) if len(recent_data) > 0 else set()
        missing_recent = all_symbols - recent_symbols
        
        if missing_recent:
            print(f"\n‚ö†Ô∏è  –°–∏–º–≤–æ–ª—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {', '.join(missing_recent)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä–µ–º–∞–º
        print("\nüí∞ –¢–æ–ø-5 –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤:")
        top_volume = symbol_stats.nlargest(5, 'avg_volume')[['symbol', 'avg_volume']]
        for _, row in top_volume.iterrows():
            print(f"  {row['symbol']}: {row['avg_volume']:,.2f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        print("\nüìä –¢–æ–ø-5 –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã):")
        symbol_stats['volatility_pct'] = (symbol_stats['price_stddev'] / symbol_stats['avg_price']) * 100
        top_volatility = symbol_stats.nlargest(5, 'volatility_pct')[['symbol', 'volatility_pct', 'avg_price']]
        for _, row in top_volatility.iterrows():
            print(f"  {row['symbol']}: {row['volatility_pct']:.2f}% (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {row['avg_price']:.4f})")
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        cursor.close()
        conn.close()


if __name__ == "__main__":
    main()