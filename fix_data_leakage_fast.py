#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL
"""

import psycopg2
import yaml
import logging
import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def fix_data_leakage_fast():
    """–£–¥–∞–ª—è–µ—Ç expected_returns –∏–∑ technical_indicators –∏—Å–ø–æ–ª—å–∑—É—è SQL"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**db_config)
    conn.autocommit = False
    
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å —É—Ç–µ—á–∫–æ–π
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å —É—Ç–µ—á–∫–æ–π...")
            cursor.execute("""
                SELECT COUNT(*) 
                FROM processed_market_data 
                WHERE technical_indicators ? 'buy_expected_return' 
                   OR technical_indicators ? 'sell_expected_return'
            """)
            leak_count = cursor.fetchone()[0]
            logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å —É—Ç–µ—á–∫–æ–π: {leak_count:,}")
            
            if leak_count == 0:
                logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.info("\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –î–û –æ—á–∏—Å—Ç–∫–∏:")
            cursor.execute("""
                SELECT id, technical_indicators 
                FROM processed_market_data 
                WHERE technical_indicators ? 'buy_expected_return' 
                LIMIT 1
            """)
            sample = cursor.fetchone()
            if sample:
                logger.info(f"   ID: {sample[0]}")
                logger.info(f"   –ö–ª—é—á–∏ –≤ technical_indicators: {list(sample[1].keys())[:10]}...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ SQL
            logger.info("\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ SQL...")
            start_time = time.time()
            
            cursor.execute("""
                UPDATE processed_market_data
                SET technical_indicators = technical_indicators - 'buy_expected_return' - 'sell_expected_return'
                WHERE technical_indicators ? 'buy_expected_return' 
                   OR technical_indicators ? 'sell_expected_return'
            """)
            
            updated_count = cursor.rowcount
            elapsed_time = time.time() - start_time
            
            logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count:,} –∑–∞–ø–∏—Å–µ–π –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            cursor.execute("""
                SELECT COUNT(*) 
                FROM processed_market_data 
                WHERE technical_indicators ? 'buy_expected_return' 
                   OR technical_indicators ? 'sell_expected_return'
            """)
            remaining = cursor.fetchone()[0]
            
            if remaining == 0:
                logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.info("\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏:")
                cursor.execute("""
                    SELECT id, technical_indicators 
                    FROM processed_market_data 
                    WHERE id = %s
                """, (sample[0],) if sample else (1,))
                cleaned = cursor.fetchone()
                if cleaned:
                    logger.info(f"   ID: {cleaned[0]}")
                    logger.info(f"   –ö–ª—é—á–∏ –≤ technical_indicators: {list(cleaned[1].keys())[:10]}...")
                
                # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                conn.commit()
                logger.info("\nüíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                logger.error(f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å —É—Ç–µ—á–∫–æ–π: {remaining}")
                conn.rollback()
                
    except Exception as e:
        conn.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        conn.close()
        logger.info("\nüì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    logger.info("üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL")
    logger.info("‚ö†Ô∏è  –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() == 'y':
        fix_data_leakage_fast()
    else:
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")