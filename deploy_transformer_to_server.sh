#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Transformer v3 –Ω–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ

echo "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Temporal Fusion Transformer v3 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞
SERVER_USER="root"
SERVER_HOST="79.116.73.220"
SERVER_PORT="27681"
REMOTE_DIR="/workspace/LLM_TRANSFORM"

echo -e "${YELLOW}üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏...${NC}"

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
TEMP_DIR=$(mktemp -d)
echo "–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $TEMP_DIR"

# –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞
mkdir -p "$TEMP_DIR/transformer_v3"
cp train_transformer_v3_server.py "$TEMP_DIR/"

# –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ xgboost_v3
mkdir -p "$TEMP_DIR/xgboost_v3/data"
mkdir -p "$TEMP_DIR/xgboost_v3/utils"
mkdir -p "$TEMP_DIR/xgboost_v3/config"

# –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
cat > "$TEMP_DIR/xgboost_v3/__init__.py" << 'EOF'
# XGBoost v3 modules
EOF

cat > "$TEMP_DIR/xgboost_v3/data/__init__.py" << 'EOF'
# Data modules
EOF

cat > "$TEMP_DIR/xgboost_v3/utils/__init__.py" << 'EOF'
# Utils modules
EOF

# –°–æ–∑–¥–∞–µ–º requirements –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
cat > "$TEMP_DIR/requirements_transformer.txt" << 'EOF'
torch>=2.0.0
numpy>=1.24.0
pandas>=2.0.0
scikit-learn>=1.3.0
matplotlib>=3.7.0
seaborn>=0.12.0
psycopg2-binary>=2.9.0
joblib>=1.3.0
tqdm>=4.65.0
EOF

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
cat > "$TEMP_DIR/run_transformer_server.sh" << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

echo "üöÄ –ó–∞–ø—É—Å–∫ Temporal Fusion Transformer v3"

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
if [ -d ".venv" ]; then
    source .venv/bin/activate
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
python3 -c "import torch; print(f'GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.is_available()}'); print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU: {torch.cuda.device_count()}')"

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
TASK=${1:-classification}
TARGET_TYPE=${2:-threshold_binary}
EPOCHS=${3:-100}
BATCH_SIZE=${4:-512}
LIMIT=${5:-500000}

echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞:"
echo "  –ó–∞–¥–∞—á–∞: $TASK"
echo "  –¢–∏–ø —Ç–∞—Ä–≥–µ—Ç–∞: $TARGET_TYPE"
echo "  –≠–ø–æ—Ö: $EPOCHS"
echo "  Batch size: $BATCH_SIZE"
echo "  –õ–∏–º–∏—Ç –¥–∞–Ω–Ω—ã—Ö: $LIMIT"

# –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
python3 train_transformer_v3_server.py \
    --task $TASK \
    --target-type $TARGET_TYPE \
    --epochs $EPOCHS \
    --batch-size $BATCH_SIZE \
    --limit $LIMIT \
    --hidden-dim 256 \
    --num-workers 4

echo "‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
EOF

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
cat > "$TEMP_DIR/monitor_training.sh" << 'EOF'
#!/bin/bash
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è

echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è Transformer v3"

# –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ª–æ–≥–∞–º–∏
LOG_DIR=$(ls -td logs/transformer_v3_* 2>/dev/null | head -1)

if [ -z "$LOG_DIR" ]; then
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    exit 1
fi

echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: $LOG_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
show_log() {
    if [ -f "transformer_v3_server.log" ]; then
        echo -e "\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:"
        tail -n 20 transformer_v3_server.log
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ—Ç—Ä–∏–∫
show_metrics() {
    if [ -f "$LOG_DIR/training_summary.json" ]; then
        echo -e "\nüìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:"
        python3 -c "
import json
with open('$LOG_DIR/training_summary.json', 'r') as f:
    data = json.load(f)
    print(f\"  –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–æ: {data.get('total_epochs', 'N/A')}\"
    print(f\"  –õ—É—á—à–∏–π Val Loss: {data.get('best_val_loss', 'N/A'):.4f}\"
    if 'final_val_metrics' in data:
        for k, v in data['final_val_metrics'].items():
            print(f\"  {k}: {v:.4f}\")"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GPU
monitor_gpu() {
    echo -e "\nüéÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU:"
    nvidia-smi --query-gpu=name,memory.used,memory.total,utilization.gpu --format=csv,noheader,nounits | while read line; do
        echo "  $line"
    done
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
while true; do
    clear
    echo "üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì TRANSFORMER V3 - $(date)"
    echo "=" * 60
    
    show_log
    show_metrics
    monitor_gpu
    
    echo -e "\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
    sleep 10
done
EOF

# –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
chmod +x "$TEMP_DIR/run_transformer_server.sh"
chmod +x "$TEMP_DIR/monitor_training.sh"

# –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
cd "$TEMP_DIR"
tar -czf transformer_v3_deploy.tar.gz *
cd -

echo -e "${YELLOW}üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...${NC}"

# –ö–æ–ø–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
scp -P $SERVER_PORT "$TEMP_DIR/transformer_v3_deploy.tar.gz" $SERVER_USER@$SERVER_HOST:$REMOTE_DIR/

# –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST << EOF
cd $REMOTE_DIR
echo "üì¶ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤..."
tar -xzf transformer_v3_deploy.tar.gz
rm transformer_v3_deploy.tar.gz

echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install -r requirements_transformer.txt

echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
echo "  ./run_transformer_server.sh [task] [target_type] [epochs] [batch_size] [limit]"
echo ""
echo "–ü—Ä–∏–º–µ—Ä—ã:"
echo "  ./run_transformer_server.sh classification threshold_binary 100 512 500000"
echo "  ./run_transformer_server.sh regression simple_regression 50 256 1000000"
echo ""
echo "–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
echo "  ./monitor_training.sh"
EOF

# –û—á–∏—Å—Ç–∫–∞
rm -rf "$TEMP_DIR"

echo -e "${GREEN}‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!${NC}"
echo ""
echo "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:"
echo "  ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST"
echo ""
echo "–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è:"
echo "  cd $REMOTE_DIR"
echo "  ./run_transformer_server.sh"