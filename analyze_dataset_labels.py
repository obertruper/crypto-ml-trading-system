#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–∫ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
"""

import pandas as pd
import numpy as np
import psycopg2
from datetime import datetime
import yaml

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    conn = psycopg2.connect(**db_config)
    return conn

def analyze_labels():
    """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–∫ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ"""
    print("="*80)
    print("–ê–ù–ê–õ–ò–ó –ú–ï–¢–û–ö –í –î–ê–¢–ê–°–ï–¢–ï –ö–†–ò–ü–¢–û–¢–†–ï–ô–î–ò–ù–ì–ê")
    print("="*80)
    print(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    conn = connect_to_db()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ processed_market_data...")
    query = """
    SELECT 
        symbol, timestamp, datetime,
        buy_profit_target, buy_loss_target,
        sell_profit_target, sell_loss_target
    FROM processed_market_data
    WHERE technical_indicators IS NOT NULL
    ORDER BY symbol, timestamp
    """
    
    df = pd.read_sql(query, conn)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π\n")
    
    # 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–∫–∞–º
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–¢–ö–ê–ú")
    print("-"*50)
    
    labels = ['buy_profit_target', 'buy_loss_target', 'sell_profit_target', 'sell_loss_target']
    
    for label in labels:
        total = len(df)
        positive = df[label].sum()
        percentage = (positive / total) * 100
        print(f"{label:20s}: {positive:8,} / {total:,} ({percentage:5.2f}%)")
    
    # –û–±—â–∏–µ BUY –∏ SELL —Å–∏–≥–Ω–∞–ª—ã
    buy_signals = df[(df['buy_profit_target'] == 1) | (df['buy_loss_target'] == 1)].shape[0]
    sell_signals = df[(df['sell_profit_target'] == 1) | (df['sell_loss_target'] == 1)].shape[0]
    
    print(f"\nüìä –û–±—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã:")
    print(f"BUY —Å–∏–≥–Ω–∞–ª–æ–≤:  {buy_signals:,} ({buy_signals/len(df)*100:.2f}%)")
    print(f"SELL —Å–∏–≥–Ω–∞–ª–æ–≤: {sell_signals:,} ({sell_signals/len(df)*100:.2f}%)")
    
    # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ profit/loss
    buy_profit_ratio = df['buy_profit_target'].sum() / (df['buy_loss_target'].sum() + 1)
    sell_profit_ratio = df['sell_profit_target'].sum() / (df['sell_loss_target'].sum() + 1)
    
    print(f"\nüí∞ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ profit/loss:")
    print(f"BUY:  {buy_profit_ratio:.2f} (profit/loss)")
    print(f"SELL: {sell_profit_ratio:.2f} (profit/loss)")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–∫
    print("\n\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –ú–ï–¢–û–ö")
    print("-"*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ profit –∏ loss)
    buy_conflicts = df[(df['buy_profit_target'] == 1) & (df['buy_loss_target'] == 1)]
    sell_conflicts = df[(df['sell_profit_target'] == 1) & (df['sell_loss_target'] == 1)]
    
    print(f"‚ùå BUY –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (profit + loss):  {len(buy_conflicts)}")
    print(f"‚ùå SELL –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (profit + loss): {len(sell_conflicts)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 0 –∏ 1)
    for label in labels:
        unique_vals = df[label].unique()
        if not all(v in [0, 1] for v in unique_vals):
            print(f"‚ö†Ô∏è {label} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {unique_vals}")
        else:
            print(f"‚úÖ {label}: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    print("\n\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –°–ò–ú–í–û–õ–ê–ú")
    print("-"*50)
    
    symbol_stats = []
    for symbol in df['symbol'].unique():
        symbol_df = df[df['symbol'] == symbol]
        total = len(symbol_df)
        
        buy_profit = symbol_df['buy_profit_target'].sum()
        buy_loss = symbol_df['buy_loss_target'].sum()
        sell_profit = symbol_df['sell_profit_target'].sum()
        sell_loss = symbol_df['sell_loss_target'].sum()
        
        total_signals = buy_profit + buy_loss + sell_profit + sell_loss
        
        symbol_stats.append({
            'symbol': symbol,
            'total_records': total,
            'buy_profit': buy_profit,
            'buy_loss': buy_loss,
            'sell_profit': sell_profit,
            'sell_loss': sell_loss,
            'total_signals': total_signals,
            'signal_percentage': (total_signals / total) * 100 if total > 0 else 0
        })
    
    symbol_df = pd.DataFrame(symbol_stats)
    symbol_df = symbol_df.sort_values('total_signals', ascending=False)
    
    print("\n–¢–æ–ø-20 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–≥–Ω–∞–ª–æ–≤:")
    print(f"{'–°–∏–º–≤–æ–ª':<15} {'–ó–∞–ø–∏—Å–µ–π':<10} {'BUY+':<8} {'BUY-':<8} {'SELL+':<8} {'SELL-':<8} {'–í—Å–µ–≥–æ':<10} {'%':<5}")
    print("-"*80)
    
    for _, row in symbol_df.head(20).iterrows():
        print(f"{row['symbol']:<15} {row['total_records']:<10,} {row['buy_profit']:<8} {row['buy_loss']:<8} "
              f"{row['sell_profit']:<8} {row['sell_loss']:<8} {row['total_signals']:<10,} {row['signal_percentage']:<5.1f}")
    
    # –°–∏–º–≤–æ–ª—ã –±–µ–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
    no_signals = symbol_df[symbol_df['total_signals'] == 0]
    if len(no_signals) > 0:
        print(f"\n‚ö†Ô∏è –°–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(no_signals)}")
        print(f"   {', '.join(no_signals['symbol'].tolist())}")
    
    # 4. –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    print("\n\n‚è∞ –í–†–ï–ú–ï–ù–ù–û–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï")
    print("-"*50)
    
    df['date'] = pd.to_datetime(df['datetime']).dt.date
    df['hour'] = pd.to_datetime(df['datetime']).dt.hour
    
    # –°–∏–≥–Ω–∞–ª—ã –ø–æ –¥–Ω—è–º
    daily_signals = df.groupby('date').agg({
        'buy_profit_target': 'sum',
        'buy_loss_target': 'sum',
        'sell_profit_target': 'sum',
        'sell_loss_target': 'sum'
    })
    daily_signals['total'] = daily_signals.sum(axis=1)
    
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {daily_signals.index.min()} - {daily_signals.index.max()}")
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: {daily_signals['total'].mean():.1f}")
    print(f"üìà –ú–∞–∫—Å–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: {daily_signals['total'].max()}")
    print(f"üìâ –ú–∏–Ω–∏–º—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å: {daily_signals['total'].min()}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º
    hourly_signals = df.groupby('hour').agg({
        'buy_profit_target': 'sum',
        'buy_loss_target': 'sum',
        'sell_profit_target': 'sum',
        'sell_loss_target': 'sum'
    })
    hourly_signals['total'] = hourly_signals.sum(axis=1)
    
    print("\nüïê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —á–∞—Å–∞–º (UTC):")
    print(f"{'–ß–∞—Å':<5} {'BUY+':<8} {'BUY-':<8} {'SELL+':<8} {'SELL-':<8} {'–í—Å–µ–≥–æ':<10}")
    print("-"*50)
    
    for hour, row in hourly_signals.iterrows():
        print(f"{hour:02d}:00 {row['buy_profit_target']:<8.0f} {row['buy_loss_target']:<8.0f} "
              f"{row['sell_profit_target']:<8.0f} {row['sell_loss_target']:<8.0f} {row['total']:<10.0f}")
    
    # 5. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*80)
    
    total_records = len(df)
    total_symbols = df['symbol'].nunique()
    total_days = len(daily_signals)
    
    print(f"üìä –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    print(f"   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}")
    print(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {total_symbols}")
    print(f"   - –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {total_days} –¥–Ω–µ–π")
    print(f"   - –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞: {total_records / total_days:.0f} –∑–∞–ø–∏—Å–µ–π/–¥–µ–Ω—å")
    
    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º win rate
    buy_total = df['buy_profit_target'].sum() + df['buy_loss_target'].sum()
    sell_total = df['sell_profit_target'].sum() + df['sell_loss_target'].sum()
    
    buy_win_rate = (df['buy_profit_target'].sum() / buy_total * 100) if buy_total > 0 else 0
    sell_win_rate = (df['sell_profit_target'].sum() / sell_total * 100) if sell_total > 0 else 0
    
    print(f"\nüí∞ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤:")
    print(f"   - BUY Win Rate:  {buy_win_rate:.1f}%")
    print(f"   - SELL Win Rate: {sell_win_rate:.1f}%")
    
    # –î–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
    overall_positive = (df[labels].sum().sum()) / (len(df) * 4) * 100
    print(f"\n‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤:")
    print(f"   - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫: {overall_positive:.1f}%")
    print(f"   - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫: {100 - overall_positive:.1f}%")
    
    if overall_positive < 20:
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤!")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏.")
    
    conn.close()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    analyze_labels()