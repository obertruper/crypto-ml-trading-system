#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è XGBoost v3.0
"""

import os
import json
import sys
from pathlib import Path
from datetime import datetime

def find_latest_results():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    logs_dir = Path("logs")
    if not logs_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
        
    # –ò—â–µ–º –ø–∞–ø–∫–∏ xgboost_v3_*
    result_dirs = list(logs_dir.glob("xgboost_v3_*"))
    if not result_dirs:
        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
        
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    latest_dir = max(result_dirs, key=lambda x: x.stat().st_mtime)
    return latest_dir

def show_results(result_dir):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
    print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑: {result_dir}")
    print("="*60)
    
    # –ß–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report_file = result_dir / "final_report.txt"
    if report_file.exists():
        print("\nüìÑ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
        print("-"*60)
        with open(report_file, 'r', encoding='utf-8') as f:
            print(f.read())
    
    # –ß–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics_file = result_dir / "metrics.json"
    if metrics_file.exists():
        with open(metrics_file, 'r') as f:
            metrics = json.load(f)
            
        print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print("-"*60)
        
        for model_type in ['buy', 'sell']:
            if model_type in metrics:
                print(f"\nüéØ –ú–æ–¥–µ–ª—å {model_type.upper()}:")
                m = metrics[model_type]
                print(f"  ‚Ä¢ ROC-AUC: {m.get('roc_auc', 0):.4f}")
                print(f"  ‚Ä¢ Accuracy: {m.get('accuracy', 0)*100:.1f}%")
                print(f"  ‚Ä¢ Precision: {m.get('precision', 0)*100:.1f}%")
                print(f"  ‚Ä¢ Recall: {m.get('recall', 0)*100:.1f}%")
                print(f"  ‚Ä¢ F1-Score: {m.get('f1', 0):.4f}")
                print(f"  ‚Ä¢ –ü–æ—Ä–æ–≥: {m.get('threshold', 0):.4f}")
                
                # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
                print(f"\n  üìã –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:")
                print(f"     True Negatives:  {m.get('true_negatives', 0):>6}")
                print(f"     False Positives: {m.get('false_positives', 0):>6}")
                print(f"     False Negatives: {m.get('false_negatives', 0):>6}")
                print(f"     True Positives:  {m.get('true_positives', 0):>6}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    print("\nüìÇ –î–û–°–¢–£–ü–ù–´–ï –§–ê–ô–õ–´:")
    print("-"*60)
    
    # –õ–æ–≥–∏
    log_files = list(result_dir.glob("*.log"))
    if log_files:
        print("\nüìù –õ–æ–≥–∏:")
        for f in log_files:
            size = f.stat().st_size / 1024  # KB
            print(f"  ‚Ä¢ {f.name} ({size:.1f} KB)")
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    plots_dir = result_dir / "plots"
    if plots_dir.exists():
        plot_files = list(plots_dir.glob("*.png"))
        if plot_files:
            print("\nüìä –ì—Ä–∞—Ñ–∏–∫–∏:")
            for f in plot_files:
                print(f"  ‚Ä¢ {f.name}")
    
    # –ú–æ–¥–µ–ª–∏
    model_dirs = [d for d in result_dir.iterdir() if d.is_dir() and 'model' in d.name]
    if model_dirs:
        print("\nü§ñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for d in model_dirs:
            model_files = list(d.glob("*.json")) + list(d.glob("*.pkl"))
            print(f"  ‚Ä¢ {d.name}/ ({len(model_files)} —Ñ–∞–π–ª–æ–≤)")

def compare_results():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    logs_dir = Path("logs")
    result_dirs = sorted(logs_dir.glob("xgboost_v3_*"), 
                        key=lambda x: x.stat().st_mtime, 
                        reverse=True)[:5]
    
    if len(result_dirs) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
        
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("="*60)
    print(f"{'–î–∞—Ç–∞/–í—Ä–µ–º—è':<20} {'ROC-AUC Buy':<12} {'ROC-AUC Sell':<12} {'Acc Buy':<10} {'Acc Sell':<10}")
    print("-"*60)
    
    for result_dir in result_dirs:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
        timestamp = result_dir.name.split('_')[2] + '_' + result_dir.name.split('_')[3]
        dt = datetime.strptime(timestamp, '%Y%m%d_%H%M%S')
        date_str = dt.strftime('%Y-%m-%d %H:%M')
        
        # –ß–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics_file = result_dir / "metrics.json"
        if metrics_file.exists():
            with open(metrics_file, 'r') as f:
                metrics = json.load(f)
                
            buy_auc = metrics.get('buy', {}).get('roc_auc', 0)
            sell_auc = metrics.get('sell', {}).get('roc_auc', 0)
            buy_acc = metrics.get('buy', {}).get('accuracy', 0)
            sell_acc = metrics.get('sell', {}).get('accuracy', 0)
            
            print(f"{date_str:<20} {buy_auc:<12.4f} {sell_auc:<12.4f} {buy_acc*100:<10.1f} {sell_acc*100:<10.1f}")

def main():
    if len(sys.argv) > 1:
        if sys.argv[1] == "--compare":
            compare_results()
            return
        elif sys.argv[1] == "--help":
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python show_xgboost_results.py          # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            print("  python show_xgboost_results.py --compare # –°—Ä–∞–≤–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    latest_dir = find_latest_results()
    if latest_dir:
        show_results(latest_dir)
        print("\nüí° –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python show_xgboost_results.py --compare")
    else:
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python run_xgboost_v3.py")

if __name__ == "__main__":
    main()