#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞
"""

import yaml
import logging
from pybit.unified_trading import HTTP
import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def get_active_futures():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
    session = HTTP(testnet=False)
    
    try:
        response = session.get_instruments_info(category="linear", limit=1000)
        
        if response['retCode'] == 0:
            active_futures = []
            for instrument in response['result']['list']:
                if instrument['symbol'].endswith('USDT') and instrument['status'] == 'Trading':
                    active_futures.append(instrument['symbol'])
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {len(response['result']['list'])} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ API")
            return set(active_futures)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API: {response['retMsg']}")
            return set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—å—é—á–µ—Ä—Å–æ–≤: {e}")
        return set()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    # –ù–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑ 50 —Å–∏–º–≤–æ–ª–æ–≤ (–±–µ–∑ TESTUSDT)
    our_symbols = [s for s in config['data_download']['symbols'] if 'TEST' not in s]
    
    logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(our_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º —Ä—ã–Ω–∫–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤
    active_futures = get_active_futures()
    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(active_futures)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–∑ –Ω–∞—à–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã
    available = []
    not_available = []
    
    for symbol in our_symbols:
        if symbol in active_futures:
            available.append(symbol)
        else:
            not_available.append(symbol)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"\n{'='*60}")
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    logger.info(f"{'='*60}")
    logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö: {len(available)}/{len(our_symbols)}")
    
    if available:
        logger.info(f"\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ({len(available)}):")
        for i, symbol in enumerate(sorted(available), 1):
            logger.info(f"   {i}. {symbol}")
    
    if not_available:
        logger.info(f"\n‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö ({len(not_available)}):")
        for symbol in sorted(not_available):
            logger.info(f"   - {symbol}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            base = symbol.replace('USDT', '')
            if base == '1000PEPE':
                alt = 'PEPEUSDT'
                if alt in active_futures:
                    logger.info(f"     üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {alt}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    if available:
        config['data_download']['symbols'] = sorted(available)
        config['data_download']['futures_validated'] = True
        config['data_download']['validation_date'] = time.strftime('%Y-%m-%d %H:%M:%S')
        
        with open('config_futures_validated.yaml', 'w') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
        
        logger.info(f"\nüíæ –°–æ–∑–¥–∞–Ω config_futures_validated.yaml —Å {len(available)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    logger.info(f"\nüìä –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:")
    meme_coins = ['PEPE', 'PNUT', 'POPCAT', 'WIF', 'FARTCOIN', 'GRIFFAIN', 'MELANIA']
    new_projects = ['ZEREBRO', 'TRUMP', 'TAO']
    
    for symbol in not_available:
        base = symbol.replace('USDT', '').replace('1000', '')
        if any(meme in base.upper() for meme in meme_coins):
            logger.info(f"   {symbol} - –º–µ–º-–∫–æ–∏–Ω (–æ–±—ã—á–Ω–æ —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ç)")
        elif any(proj in base.upper() for proj in new_projects):
            logger.info(f"   {symbol} - –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
        else:
            logger.info(f"   {symbol} - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    
    logger.info(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ: {len(available)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")


if __name__ == "__main__":
    main()