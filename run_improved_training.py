#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è XGBoost —Å –ø–∞—Ç—Ç–µ—Ä–Ω-–∞–Ω–∞–ª–∏–∑–æ–º
"""

import subprocess
import sys
import os
import time
from datetime import datetime

def run_training(task='classification_binary', ensemble_size=3, test_mode=False, use_cache=True):
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print(f"\n{'='*60}")
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è XGBoost v2.0")
    print(f"üìä –†–µ–∂–∏–º: {task}")
    print(f"üéØ –†–∞–∑–º–µ—Ä –∞–Ω—Å–∞–º–±–ª—è: {ensemble_size}")
    print(f"‚ö° –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {test_mode}")
    print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞: {use_cache}")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*60}\n")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = [
        'python', 'train_xgboost_enhanced_v2.py',
        '--task', task,
        '--ensemble_size', str(ensemble_size)
    ]
    
    if test_mode:
        cmd.append('--test_mode')
    
    if use_cache:
        cmd.append('--use-cache')
        print("üì¶ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ - –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –±—É–¥—É—Ç –±—ã—Å—Ç—Ä–µ–µ!")
    else:
        cmd.append('--no-cache')
        print("üîÑ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    try:
        print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        for line in process.stdout:
            print(line, end='')
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        return_code = process.wait()
        
        if return_code == 0:
            print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏! –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_code}")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        process.terminate()
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    
    print("\nü§ñ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ XGBoost –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞")
    print("="*50)
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:")
    print("1. –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–ø–æ—Ä–æ–≥ 1%) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
    print("2. –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (4 –∫–ª–∞—Å—Å–∞)")
    print("3. –†–µ–≥—Ä–µ—Å—Å–∏—è (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ expected returns)")
    print("4. –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (2 —Å–∏–º–≤–æ–ª–∞, –±—ã—Å—Ç—Ä–æ)")
    print("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-4): ").strip()
    
    if choice == '0':
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return
    elif choice == '1':
        task = 'classification_binary'
    elif choice == '2':
        task = 'classification_multiclass'
    elif choice == '3':
        task = 'regression'
    elif choice == '4':
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        print("\n‚ö° –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        
        # –í—ã–±–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        print("\nüíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞?")
        print("1. –î–∞ (–±—ã—Å—Ç—Ä–µ–µ)")
        print("2. –ù–µ—Ç (—Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)")
        test_cache = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-2, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
        
        use_cache = test_cache != '2'
        
        run_training('classification_binary', ensemble_size=2, test_mode=True, use_cache=use_cache)
        return
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        return
    
    # –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∞–Ω—Å–∞–º–±–ª—è
    print(f"\n–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {task}")
    ensemble_input = input("–†–∞–∑–º–µ—Ä –∞–Ω—Å–∞–º–±–ª—è (1-5, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ").strip()
    
    if ensemble_input:
        try:
            ensemble_size = int(ensemble_input)
            if ensemble_size < 1 or ensemble_size > 5:
                print("‚ö†Ô∏è –†–∞–∑–º–µ—Ä –∞–Ω—Å–∞–º–±–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5. –ò—Å–ø–æ–ª—å–∑—É—é 3.")
                ensemble_size = 3
        except ValueError:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É—é —Ä–∞–∑–º–µ—Ä 3.")
            ensemble_size = 3
    else:
        ensemble_size = 3
    
    # –í—ã–±–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∞
    print("\nüíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö?")
    print("1. –î–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤)")
    print("2. –ù–µ—Ç (–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î)")
    cache_choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-2, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ").strip()
    
    if cache_choice == '2':
        use_cache = False
        print("üîÑ –ë—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î")
    else:
        use_cache = True
        print("üì¶ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–µ—à (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)")
    
    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    run_training(task, ensemble_size, test_mode=False, use_cache=use_cache)

if __name__ == "__main__":
    main()