"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è Transformer v3
"""

import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, List
import json
import pandas as pd
import numpy as np

from config import Config

logger = logging.getLogger(__name__)


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, config: Config, log_dir: Path):
        self.config = config
        self.log_dir = Path(log_dir)
        
    def generate_report(self, results: Dict[str, Any]):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        
        Args:
            results: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è
        """
        logger.info("\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        text_report = self._create_text_report(results)
        report_path = self.log_dir / 'final_report.txt'
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(text_report)
        
        # JSON –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        json_report = self._create_json_report(results)
        json_path = self.log_dir / 'results.json'
        with open(json_path, 'w') as f:
            json.dump(json_report, f, indent=2)
        
        # CSV —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        if 'models' in results:
            metrics_df = self._create_metrics_dataframe(results['models'])
            csv_path = self.log_dir / 'model_metrics.csv'
            metrics_df.to_csv(csv_path, index=False)
        
        logger.info(f"‚úÖ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.log_dir}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
        self._print_summary(results)
    
    def _create_text_report(self, results: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = []
        report.append("=" * 80)
        report.append("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –û–ë–£–ß–ï–ù–ò–Æ TRANSFORMER V3")
        report.append("=" * 80)
        report.append("")
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report.append(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"–õ–æ–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.log_dir}")
        report.append(f"–¢–∏–ø –∑–∞–¥–∞—á–∏: {self.config.training.task_type.upper()}")
        report.append("")
        
        # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        report.append("–ê–†–•–ò–¢–ï–ö–¢–£–†–ê:")
        report.append(f"- –ú–æ–¥–µ–ª—å: Temporal Fusion Transformer (TFT)")
        report.append(f"- Sequence Length: {self.config.model.sequence_length}")
        report.append(f"- Model Dimension: {self.config.model.d_model}")
        report.append(f"- Number of Heads: {self.config.model.num_heads}")
        report.append(f"- Transformer Blocks: {self.config.model.num_transformer_blocks}")
        report.append(f"- Dropout Rate: {self.config.model.dropout_rate}")
        report.append("")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        report.append("–ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–£–ß–ï–ù–ò–Ø:")
        report.append(f"- Batch Size: {self.config.training.batch_size}")
        report.append(f"- Learning Rate: {self.config.training.learning_rate}")
        report.append(f"- Optimizer: {self.config.training.optimizer}")
        report.append(f"- Loss Function: {self.config.training.loss_function}")
        report.append(f"- Early Stopping Patience: {self.config.training.early_stopping_patience}")
        report.append("")
        
        # –î–∞–Ω–Ω—ã–µ
        if 'data_info' in results:
            report.append("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–ù–ù–´–•:")
            info = results['data_info']
            report.append(f"- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {info.get('total_records', 'N/A'):,}")
            report.append(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {info.get('n_symbols', 'N/A')}")
            report.append(f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {info.get('n_features', 'N/A')}")
            report.append(f"- –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {info.get('train_size', 'N/A'):,}")
            report.append(f"- –†–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏: {info.get('val_size', 'N/A'):,}")
            report.append(f"- –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {info.get('test_size', 'N/A'):,}")
            report.append("")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–µ–π
        if 'models' in results:
            report.append("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø:")
            for model_name, model_results in results['models'].items():
                report.append(f"\n{model_name.upper()}:")
                
                if 'test_metrics' in model_results:
                    metrics = model_results['test_metrics']
                    
                    if self.config.training.task_type == 'regression':
                        report.append(f"- MAE: {metrics.get('mae', 'N/A'):.4f}%")
                        report.append(f"- RMSE: {metrics.get('rmse', 'N/A'):.4f}%")
                        report.append(f"- R¬≤: {metrics.get('r2', 'N/A'):.4f}")
                        report.append(f"- Direction Accuracy: {metrics.get('direction_accuracy', 'N/A'):.2%}")
                    else:
                        report.append(f"- Accuracy: {metrics.get('accuracy', 'N/A'):.4f}")
                        report.append(f"- Precision: {metrics.get('precision', 'N/A'):.4f}")
                        report.append(f"- Recall: {metrics.get('recall', 'N/A'):.4f}")
                        report.append(f"- F1-Score: {metrics.get('f1', 'N/A'):.4f}")
                        report.append(f"- AUC: {metrics.get('auc', 'N/A'):.4f}")
                
                if 'best_epoch' in model_results:
                    report.append(f"- Best Epoch: {model_results['best_epoch']}")
        
        report.append("")
        report.append("=" * 80)
        report.append("–§–ê–ô–õ–´ –ò –ê–†–¢–ï–§–ê–ö–¢–´:")
        report.append(f"- –ú–æ–¥–µ–ª–∏: {self.log_dir}/models/")
        report.append(f"- –ì—Ä–∞—Ñ–∏–∫–∏: {self.log_dir}/plots/")
        report.append(f"- –ú–µ—Ç—Ä–∏–∫–∏: {self.log_dir}/*_metrics.csv")
        report.append(f"- TensorBoard: tensorboard --logdir {self.log_dir}/tensorboard/")
        report.append("=" * 80)
        
        return "\n".join(report)
    
    def _create_json_report(self, results: Dict[str, Any]) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ JSON –æ—Ç—á–µ—Ç–∞"""
        json_report = {
            'timestamp': datetime.now().isoformat(),
            'config': {
                'model': self.config.model.__dict__,
                'training': self.config.training.__dict__
            },
            'results': results
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numpy —Ç–∏–ø—ã –∏ –æ–±—ä–µ–∫—Ç—ã –≤ –æ–±—ã—á–Ω—ã–µ Python —Ç–∏–ø—ã
        def convert_types(obj):
            if isinstance(obj, (np.integer, np.int64)):
                return int(obj)
            elif isinstance(obj, (np.floating, np.float64)):
                return float(obj)
            elif isinstance(obj, np.ndarray):
                return obj.tolist()
            elif isinstance(obj, dict):
                return {k: convert_types(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [convert_types(v) for v in obj]
            elif hasattr(obj, '__dict__'):
                # –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–æ–≤ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏—Ö –∞—Ç—Ä–∏–±—É—Ç—ã
                return {k: convert_types(v) for k, v in obj.__dict__.items() if not k.startswith('_')}
            elif hasattr(obj, '__class__') and obj.__class__.__name__ in ['TFTEnsemble', 'TFTTrainer']:
                # –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∫–ª–∞—Å—Å–∞
                return f"<{obj.__class__.__name__} object>"
            else:
                return obj
        
        return convert_types(json_report)
    
    def _create_metrics_dataframe(self, models: Dict) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ DataFrame —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        rows = []
        
        for model_name, model_results in models.items():
            if 'test_metrics' in model_results:
                row = {'model': model_name}
                row.update(model_results['test_metrics'])
                rows.append(row)
        
        return pd.DataFrame(rows)
    
    def _print_summary(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        logger.info("=" * 60)
        
        if 'models' in results:
            for model_name, model_results in results['models'].items():
                if 'test_metrics' in model_results:
                    metrics = model_results['test_metrics']
                    
                    logger.info(f"\n{model_name}:")
                    if self.config.training.task_type == 'regression':
                        logger.info(f"  MAE: {metrics.get('mae', 'N/A'):.3f}%")
                        logger.info(f"  Direction Accuracy: {metrics.get('direction_accuracy', 'N/A'):.1%}")
                    else:
                        logger.info(f"  Accuracy: {metrics.get('accuracy', 'N/A'):.3f}")
                        logger.info(f"  F1-Score: {metrics.get('f1', 'N/A'):.3f}")
        
        logger.info("\n" + "=" * 60)