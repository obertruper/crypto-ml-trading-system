"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Transformer v3
"""

import logging
import sys
from pathlib import Path
from datetime import datetime

from config import LOGGING_CONFIG


class LoggingManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, log_dir: Path):
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        logger = logging.getLogger()
        logger.setLevel(getattr(logging, LOGGING_CONFIG['level']))
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
        for handler in logger.handlers[:]:
            logger.removeHandler(handler)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            LOGGING_CONFIG['format'],
            datefmt=LOGGING_CONFIG['date_format']
        )
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        logger.addHandler(console_handler)
        
        # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        log_file = self.log_dir / 'training.log'
        file_handler = logging.FileHandler(
            log_file, 
            encoding=LOGGING_CONFIG['encoding']
        )
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        
        # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
        error_file = self.log_dir / 'errors.log'
        error_handler = logging.FileHandler(
            error_file,
            encoding=LOGGING_CONFIG['encoding']
        )
        error_handler.setLevel(logging.ERROR)
        error_handler.setFormatter(formatter)
        logger.addHandler(error_handler)
        
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è TensorFlow
        tf_logger = logging.getLogger('tensorflow')
        tf_logger.setLevel(logging.WARNING)
        
        logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: {log_file}")
        
    def get_logger(self, name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        return logging.getLogger(name)