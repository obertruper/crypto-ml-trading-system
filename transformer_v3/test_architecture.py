#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Transformer v3.0
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import numpy as np
import tensorflow as tf
from config import Config
from models.tft_model import create_tft_model, TemporalFusionTransformer
from data.sequence_creator import SequenceCreator

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert config.model.hidden_size == 160
    assert config.model.sequence_length == 100
    assert config.model.num_heads == 4
    assert config.training.task_type == "regression"
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    config.validate()
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_tft_model():
    """–¢–µ—Å—Ç TFT –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TFT –º–æ–¥–µ–ª–∏...")
    
    config = Config()
    config.model.hidden_size = 64  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
    config.model.sequence_length = 20
    config.model.batch_size = 4
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    input_shape = (20, 50)  # 20 timesteps, 50 features
    model = create_tft_model(config, input_shape)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
    assert model is not None
    print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –º–æ–¥–µ–ª–∏: {model.count_params():,}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 4
    test_input = tf.random.normal((batch_size, 20, 50))
    
    # Forward pass
    output = model(test_input)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞
    assert output.shape == (batch_size, 1)
    
    print("‚úÖ TFT –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_sequence_creator():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...")
    
    config = Config()
    config.model.sequence_length = 10  # –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
    
    sequence_creator = SequenceCreator(config)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    n_samples = 50
    n_features = 20
    
    # DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    import pandas as pd
    X = pd.DataFrame(np.random.randn(n_samples, n_features))
    X['symbol'] = ['TEST'] * n_samples
    X['timestamp'] = range(n_samples)
    
    # –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    y_buy = pd.Series(np.random.randn(n_samples))
    y_sell = pd.Series(np.random.randn(n_samples))
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    sequences_data = sequence_creator.create_sequences(X, y_buy, y_sell)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    assert 'X' in sequences_data
    assert 'y_buy' in sequences_data
    assert 'y_sell' in sequences_data
    
    X_seq = sequences_data['X']
    assert len(X_seq.shape) == 3  # [samples, timesteps, features]
    assert X_seq.shape[1] == config.model.sequence_length
    
    print(f"   –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {X_seq.shape[0]}")
    print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {X_seq.shape}")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def test_integration():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
    
    config = Config()
    config.model.hidden_size = 32
    config.model.sequence_length = 10
    config.model.batch_size = 2
    config.model.epochs = 1
    config.model.use_mixed_precision = False  # –û—Ç–∫–ª—é—á–∞–µ–º mixed precision –¥–ª—è —Ç–µ—Å—Ç–∞
    config.training.task_type = "regression"
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
    input_shape = (10, 20)
    model = create_tft_model(config, input_shape)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    n_train = 100
    X_train = np.random.randn(n_train, 10, 20)
    y_train = np.random.randn(n_train)
    
    X_val = np.random.randn(20, 10, 20)
    y_val = np.random.randn(20)
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ
    model.compile(
        optimizer='adam',
        loss='mse',
        metrics=['mae']
    )
    
    # –ö—Ä–∞—Ç–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    history = model.fit(
        X_train, y_train,
        validation_data=(X_val, y_val),
        epochs=1,
        batch_size=2,
        verbose=0
    )
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predictions = model.predict(X_val[:5])
    assert predictions.shape == (5, 1)
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë     Transformer v3.0 - Architecture      ‚ïë
    ‚ïë            Testing Suite                 ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å TensorFlow
        print(f"üîç TensorFlow –≤–µ—Ä—Å–∏—è: {tf.__version__}")
        
        if tf.config.list_physical_devices('GPU'):
            print("üñ•Ô∏è GPU –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        test_config()
        test_tft_model()
        test_sequence_creator()
        test_integration()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Transformer v3.0 –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())