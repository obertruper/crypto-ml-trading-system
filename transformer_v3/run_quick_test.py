#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Transformer v3.0 —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import numpy as np
import pandas as pd
import logging
from datetime import datetime

from config import Config
from data.sequence_creator import SequenceCreator
from models.tft_trainer import TFTTrainer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def generate_synthetic_data(n_samples: int = 1000, n_features: int = 50):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {n_samples} samples, {n_features} features")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —à—É–º–æ–º
    time_steps = np.arange(n_samples)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    features = {}
    
    # –¶–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    base_price = 100 + 0.01 * time_steps + 5 * np.sin(time_steps * 0.1) + np.random.normal(0, 2, n_samples)
    features['price'] = base_price
    features['volume'] = np.exp(5 + np.random.normal(0, 0.5, n_samples))
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–∏–º–∏—Ç–∞—Ü–∏—è)
    features['rsi_val'] = 50 + 20 * np.sin(time_steps * 0.05) + np.random.normal(0, 5, n_samples)
    features['rsi_val'] = np.clip(features['rsi_val'], 0, 100)
    
    features['macd_val'] = 0.1 * np.sin(time_steps * 0.03) + np.random.normal(0, 0.1, n_samples)
    features['adx_val'] = 25 + 15 * np.abs(np.sin(time_steps * 0.02)) + np.random.normal(0, 3, n_samples)
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    features['atr'] = 0.5 + 0.3 * np.abs(np.sin(time_steps * 0.04)) + np.random.normal(0, 0.1, n_samples)
    
    # BTC –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    features['btc_correlation_20'] = 0.7 + 0.2 * np.sin(time_steps * 0.01) + np.random.normal(0, 0.1, n_samples)
    features['btc_return_1h'] = np.random.normal(0, 0.02, n_samples)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    features['hour_sin'] = np.sin(2 * np.pi * (time_steps % 24) / 24)
    features['hour_cos'] = np.cos(2 * np.pi * (time_steps % 24) / 24)
    features['dow_sin'] = np.sin(2 * np.pi * (time_steps % 7) / 7)
    
    # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    for i in range(len(features), n_features):
        features[f'feature_{i}'] = np.random.normal(0, 1, n_samples)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(features)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    df['symbol'] = 'SYNTHETIC'
    df['timestamp'] = pd.date_range(start='2023-01-01', periods=n_samples, freq='15min')
    
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–æ–∂–∏–¥–∞–µ–º—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏)
    # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å: —Å–ª–µ–¥—É—é—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç RSI –∏ MACD
    returns = 0.001 * (50 - df['rsi_val']) / 50 + 0.5 * df['macd_val'] + np.random.normal(0, 0.01, n_samples)
    
    df['buy_expected_return'] = returns
    df['sell_expected_return'] = -returns  # –ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    
    logger.info("‚úÖ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
    return df

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger.info("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë       Transformer v3.0 Quick Test        ‚ïë
    ‚ïë        –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    config = Config()
    config.model.hidden_size = 64
    config.model.sequence_length = 20  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    config.model.batch_size = 16
    config.model.epochs = 5  # –ú–∞–ª–æ —ç–ø–æ—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
    config.model.use_mixed_precision = False
    config.training.task_type = "regression"
    config.training.use_data_augmentation = False
    config.training.save_plots = True
    config.training.save_models = False  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏ –≤ —Ç–µ—Å—Ç–µ
    
    try:
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        df = generate_synthetic_data(n_samples=500, n_features=30)
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...")
        sequence_creator = SequenceCreator(config)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        feature_cols = [col for col in df.columns if col not in ['symbol', 'timestamp', 'buy_expected_return', 'sell_expected_return']]
        X = df[feature_cols]
        y_buy = df['buy_expected_return']
        y_sell = df['sell_expected_return']
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        sequences_data = sequence_creator.create_sequences(X, y_buy, y_sell)
        sequences_splits = sequence_creator.split_sequences(sequences_data)
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è buy –º–æ–¥–µ–ª–∏
        logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
        
        # –°–æ–∑–¥–∞–µ–º trainer
        trainer = TFTTrainer(config, model_name="test_buy_predictor")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        X_train = sequences_splits['buy']['X_train']
        y_train = sequences_splits['buy']['y_train']
        X_val = sequences_splits['buy']['X_val']
        y_val = sequences_splits['buy']['y_val']
        X_test = sequences_splits['buy']['X_test']
        y_test = sequences_splits['buy']['y_test']
        
        logger.info(f"   –†–∞–∑–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"   Train: {X_train.shape}, Val: {X_val.shape}, Test: {X_test.shape}")
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = trainer.train(X_train, y_train, X_val, y_val)
        
        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        test_metrics = trainer.evaluate(X_test, y_test, "Test")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        logger.info("üîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
        predictions = trainer.predict(X_test[:10])  # –ü–µ—Ä–≤—ã–µ 10 —Å–µ–º–ø–ª–æ–≤
        
        logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
        for i in range(5):
            true_val = y_test[i]
            pred_val = predictions[i][0] if len(predictions[i]) > 0 else predictions[i]
            logger.info(f"   {i+1}. –ò—Å—Ç–∏–Ω–Ω–æ–µ: {true_val:.4f}, –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ: {pred_val:.4f}")
        
        # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞:")
        logger.info(f"   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(sequences_data['X'])}")
        logger.info(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {X_train.shape}")
        logger.info(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏: {model.count_params():,}")
        
        for metric_name, value in test_metrics.items():
            if isinstance(value, (int, float)):
                logger.info(f"   {metric_name}: {value:.4f}")
        
        logger.info("\nüéâ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ Transformer v3.0 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return 0
        
    except Exception as e:
        logger.error(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –±—ã—Å—Ç—Ä–æ–º —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit(main())