#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
"""

import yaml
import logging
from download_data import PostgreSQLManager, BybitDataDownloader

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def main():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ 3 —Å–∏–º–≤–æ–ª–æ–≤ –≤ 3 –ø–æ—Ç–æ–∫–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    test_symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    db_manager = PostgreSQLManager(db_config, max_connections=5)
    downloader = BybitDataDownloader(db_manager, market_type='futures')
    
    try:
        db_manager.connect()
        
        logger.info(f"üß™ –¢–ï–°–¢: –ó–∞–≥—Ä—É–∑–∫–∞ {len(test_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –≤ 3 –ø–æ—Ç–æ–∫–∞")
        logger.info(f"üìä –°–∏–º–≤–æ–ª—ã: {', '.join(test_symbols)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
        results = downloader.download_multiple_symbols(
            symbols=test_symbols,
            interval='15',
            days=7,
            max_workers=3
        )
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_count = sum(1 for r in results.values() if r.get('success', False))
        logger.info(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{len(test_symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
        for symbol, result in results.items():
            if result.get('success'):
                stats = result.get('stats', {})
                logger.info(f"   {symbol}: {stats.get('newly_inserted', 0)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.error(f"   {symbol}: {result.get('error', 'Unknown error')}")
                
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db_manager.disconnect()
        logger.info("üîö –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    main()