#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ transformer_v3 —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∑–∞–ø—É—Å–∫–∞

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
# –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
SERVER_HOST="84.68.60.115"
SERVER_PORT="42244"
# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
PROXY_HOST="ssh1.vast.ai"
PROXY_PORT="18645"
SERVER_USER="root"
REMOTE_DIR="/workspace/transformer_v3"
LOCAL_DIR="transformer_v3"

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë     –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Transformer v3 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ    ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ transformer_v3
if [ ! -d "$LOCAL_DIR" ]; then
    echo -e "${RED}‚ùå –ü–∞–ø–∫–∞ $LOCAL_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!${NC}"
    exit 1
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
sync_to_server() {
    echo -e "${YELLOW}üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è rsync${NC}"
        SSH_CMD="ssh -p $SERVER_PORT"
        REMOTE_HOST=$SERVER_HOST
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è rsync${NC}"
        SSH_CMD="ssh -p $PROXY_PORT"
        REMOTE_HOST=$PROXY_HOST
    fi
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    $SSH_CMD $SERVER_USER@$REMOTE_HOST "mkdir -p $REMOTE_DIR"
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º transformer_v3
    rsync -avz --progress \
        -e "$SSH_CMD" \
        --exclude='__pycache__' \
        --exclude='*.pyc' \
        --exclude='.DS_Store' \
        --exclude='logs/' \
        --exclude='cache/' \
        --exclude='*.h5' \
        --exclude='*.pkl' \
        --delete \
        $LOCAL_DIR/ $SERVER_USER@$REMOTE_HOST:$REMOTE_DIR/
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–∫–∂–µ config.yaml –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏
    if [ -f "config.yaml" ]; then
        rsync -avz --progress \
            -e "$SSH_CMD" \
            config.yaml $SERVER_USER@$REMOTE_HOST:/workspace/
    fi
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º run_transformer_v3.py
    if [ -f "run_transformer_v3.py" ]; then
        rsync -avz --progress \
            -e "$SSH_CMD" \
            run_transformer_v3.py $SERVER_USER@$REMOTE_HOST:/workspace/
    fi
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º run_cache_data.py
    if [ -f "run_cache_data.py" ]; then
        rsync -avz --progress \
            -e "$SSH_CMD" \
            run_cache_data.py $SERVER_USER@$REMOTE_HOST:/workspace/
    fi
    
    echo -e "${GREEN}‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É–Ω–Ω–µ–ª—è –∫ –ë–î
setup_db_tunnel() {
    echo -e "${YELLOW}üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—É–Ω–Ω–µ–ª—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ —Å–æ–∑–¥–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
    if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É${NC}"
        # –£–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—É–Ω–Ω–µ–ª–∏
        ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "pkill -f 'ssh.*5555' || true"
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å: –ª–æ–∫–∞–ª—å–Ω—ã–π 5555 -> —É–¥–∞–ª–µ–Ω–Ω—ã–π 5555
        ssh -p $SERVER_PORT -fNR 5555:localhost:5555 $SERVER_USER@$SERVER_HOST
        SSH_HOST=$SERVER_HOST
        SSH_PORT=$SERVER_PORT
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ${NC}"
        # –£–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç—É–Ω–Ω–µ–ª–∏
        ssh -p $PROXY_PORT $SERVER_USER@$PROXY_HOST "pkill -f 'ssh.*5555' || true"
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        ssh -p $PROXY_PORT -fNR 5555:localhost:5555 $SERVER_USER@$PROXY_HOST
        SSH_HOST=$PROXY_HOST
        SSH_PORT=$PROXY_PORT
    fi
    
    # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—É–Ω–Ω–µ–ª—è
    sleep 2
    echo -e "${GREEN}‚úÖ –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω (–ª–æ–∫–∞–ª—å–Ω—ã–π 5555 -> —É–¥–∞–ª–µ–Ω–Ω—ã–π 5555)${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
run_on_server() {
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...${NC}"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...${NC}"
    if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ${NC}"
        SSH_CMD="ssh -t -p $SERVER_PORT $SERVER_USER@$SERVER_HOST"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏${NC}"
        SSH_CMD="ssh -t -p $PROXY_PORT $SERVER_USER@$PROXY_HOST"
    fi
    
    # SSH –∫–æ–º–∞–Ω–¥–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
    $SSH_CMD "cd /workspace && source venv/bin/activate && export TERM=xterm-256color && python run_transformer_v3.py"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
stop_training() {
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è...${NC}"
    
    if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
        SSH_CMD="ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST"
    else
        SSH_CMD="ssh -p $PROXY_PORT $SERVER_USER@$PROXY_HOST"
    fi
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å transformer_v3
    $SSH_CMD "pkill -f 'transformer_v3/main.py' || true"
    $SSH_CMD "pkill -f 'run_transformer_v3.py' || true"
    
    echo -e "${GREEN}‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π GPU
run_background_optimized() {
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π GPU...${NC}"
    
    if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
        SSH_CMD="ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST"
    else
        SSH_CMD="ssh -p $PROXY_PORT $SERVER_USER@$PROXY_HOST"
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    $SSH_CMD "cat > /workspace/start_optimized_training.sh << 'EOF'
#!/bin/bash
cd /workspace
source venv/bin/activate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ GPU
export TF_CPP_MIN_LOG_LEVEL=2
export TF_GPU_THREAD_MODE=gpu_private
export TF_GPU_THREAD_COUNT=2
export TF_USE_CUDNN_BATCHNORM_SPATIAL_PERSISTENT=1
export TF_ENABLE_WINOGRAD_NONFUSED=1
export TF_SYNC_ON_FINISH=0
export TF_AUTOTUNE_THRESHOLD=2
export TF_CUDNN_USE_AUTOTUNE=1
export TF_ENABLE_CUBLAS_TENSOR_OP_MATH_FP32=1
export TF_ENABLE_CUDNN_TENSOR_OP_MATH_FP32=1
export TF_ENABLE_CUDNN_RNN_TENSOR_OP_MATH_FP32=1

# XLA –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
export TF_XLA_FLAGS='--tf_xla_auto_jit=2 --tf_xla_cpu_global_jit'

# CUDA –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export CUDA_CACHE_DISABLE=0
export CUDA_CACHE_MAXSIZE=2147483648
export CUDA_LAUNCH_BLOCKING=0

# NCCL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è multi-GPU
export NCCL_DEBUG=WARN
export NCCL_TREE_THRESHOLD=0

# –£–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
pkill -f 'transformer_v3/main.py' || true

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
echo '–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π GPU...'
nohup python transformer_v3/main.py --task regression --batch-size 512 > logs/training_optimized_\$(date +%Y%m%d_%H%M%S).log 2>&1 &

echo '–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–µ. PID:' \$!
echo \$! > /workspace/training.pid
EOF"
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    $SSH_CMD "chmod +x /workspace/start_optimized_training.sh"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
    $SSH_CMD "/workspace/start_optimized_training.sh"
    
    echo -e "${GREEN}‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ${NC}"
    echo -e "${BLUE}üìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: tail -f /workspace/logs/training_optimized_*.log${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ GPU
check_gpu_status() {
    echo -e "${YELLOW}üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ GPU...${NC}"
    
    if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
        SSH_CMD="ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST"
    else
        SSH_CMD="ssh -p $PROXY_PORT $SERVER_USER@$PROXY_HOST"
    fi
    
    $SSH_CMD "nvidia-smi"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
echo -e "${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:${NC}"
echo "[1] üîÑ –¢–æ–ª—å–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"
echo "[2] üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –º–µ–Ω—é"
echo "[3] üß™ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫"
echo "[4] üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –æ–±—É—á–µ–Ω–∏–µ"
echo "[5] üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π GPU (—Ñ–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)"
echo "[6] üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å GPU"
echo "[7] üìä –û—Ç–∫—Ä—ã—Ç—å TensorBoard —Ç—É–Ω–Ω–µ–ª—å"
echo "[8] üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
echo "[9] üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã)"
echo "[10] üåç –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã)"
echo "[0] ‚ùå –í—ã—Ö–æ–¥"
echo

read -p "–í—ã–±–æ—Ä: " choice

case $choice in
    1)
        sync_to_server
        setup_db_tunnel
        ;;
    2)
        sync_to_server
        setup_db_tunnel
        run_on_server
        ;;
    3)
        sync_to_server
        setup_db_tunnel
        echo -e "${YELLOW}üß™ –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...${NC}"
        if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
            ssh -t -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "cd /workspace && source venv/bin/activate && python transformer_v3/main.py --test-mode"
        else
            ssh -t -p $PROXY_PORT $SERVER_USER@$PROXY_HOST "cd /workspace && source venv/bin/activate && python transformer_v3/main.py --test-mode"
        fi
        ;;
    4)
        stop_training
        ;;
    5)
        sync_to_server
        setup_db_tunnel
        stop_training
        run_background_optimized
        ;;
    6)
        check_gpu_status
        ;;
    7)
        echo -e "${YELLOW}üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è TensorBoard...${NC}"
        if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
            ssh -p $SERVER_PORT -L 6006:localhost:6006 $SERVER_USER@$SERVER_HOST -N &
        else
            ssh -p $PROXY_PORT -L 6006:localhost:6006 $SERVER_USER@$PROXY_HOST -N &
        fi
        echo -e "${GREEN}‚úÖ TensorBoard –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:6006${NC}"
        echo "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—É–Ω–Ω–µ–ª—è"
        wait
        ;;
    8)
        echo -e "${YELLOW}üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è...${NC}"
        if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
            ssh -t -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "cd /workspace && tail -f logs/training_optimized_*.log"
        else
            ssh -t -p $PROXY_PORT $SERVER_USER@$PROXY_HOST "cd /workspace && tail -f logs/training_optimized_*.log"
        fi
        ;;
    9)
        sync_to_server
        setup_db_tunnel
        echo -e "${YELLOW}üíæ –ó–∞–ø—É—Å–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã)...${NC}"
        if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
            ssh -t -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "cd /workspace && source venv/bin/activate && python transformer_v3/cache_all_data.py --test-symbols BTCUSDT ETHUSDT"
        else
            ssh -t -p $PROXY_PORT $SERVER_USER@$PROXY_HOST "cd /workspace && source venv/bin/activate && python transformer_v3/cache_all_data.py --test-symbols BTCUSDT ETHUSDT"
        fi
        ;;
    10)
        sync_to_server
        setup_db_tunnel
        echo -e "${YELLOW}üåç –ó–∞–ø—É—Å–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤—Å–µ —Å–∏–º–≤–æ–ª—ã)...${NC}"
        echo -e "${RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞!${NC}"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " confirm
        if [[ $confirm == [yY] ]]; then
            if ssh -o ConnectTimeout=5 -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "echo 'OK'" >/dev/null 2>&1; then
                ssh -t -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "cd /workspace && source venv/bin/activate && python transformer_v3/cache_all_data.py --all-symbols"
            else
                ssh -t -p $PROXY_PORT $SERVER_USER@$PROXY_HOST "cd /workspace && source venv/bin/activate && python transformer_v3/cache_all_data.py --all-symbols"
            fi
        else
            echo -e "${YELLOW}–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"
        fi
        ;;
    0)
        echo -e "${GREEN}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${NC}"
        exit 0
        ;;
    *)
        echo -e "${RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!${NC}"
        exit 1
        ;;
esac