#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import os
import json
import pandas as pd
from datetime import datetime
import glob

print("="*80)
print("üîç –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
print("="*80)

# –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ª–æ–≥–∞–º–∏
log_dirs = glob.glob("logs/training_*")
if not log_dirs:
    print("‚ùå –ù–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å –ª–æ–≥–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è")
    exit()

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
latest_log_dir = sorted(log_dirs)[-1]
print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {latest_log_dir}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
dir_name = os.path.basename(latest_log_dir)
timestamp = dir_name.replace("training_", "")
start_time = datetime.strptime(timestamp, "%Y%m%d_%H%M%S")
duration = datetime.now() - start_time
print(f"‚è∞ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è: {start_time}")
print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")

# –ß–∏—Ç–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
log_file = os.path.join(latest_log_dir, "training.log")
if os.path.exists(log_file):
    with open(log_file, 'r') as f:
        lines = f.readlines()
    
    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–ù–ù–´–•:")
    for line in lines:
        if "–ó–∞–≥—Ä—É–∂–µ–Ω–æ" in line and "–∑–∞–ø–∏—Å–µ–π" in line:
            print(f"  {line.strip()}")
        if "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º" in line:
            idx = lines.index(line)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Å–∏–º–≤–æ–ª–∞–º–∏
            for i in range(1, 10):
                if idx + i < len(lines) and "–∑–∞–ø–∏—Å–µ–π" in lines[idx + i]:
                    print(f"  {lines[idx + i].strip()}")
        if "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ buy_return" in line or "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ sell_return" in line:
            idx = lines.index(line)
            print(f"\n{line.strip()}")
            for i in range(1, 4):
                if idx + i < len(lines):
                    print(f"  {lines[idx + i].strip()}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
print("\nüìà –ú–ï–¢–†–ò–ö–ò –û–ë–£–ß–ï–ù–ò–Ø:")

# buy_return_predictor –º–µ—Ç—Ä–∏–∫–∏
buy_metrics_file = os.path.join(latest_log_dir, "buy_return_predictor_metrics.csv")
if os.path.exists(buy_metrics_file):
    buy_df = pd.read_csv(buy_metrics_file)
    if len(buy_df) > 0:
        print("\nüü¢ BUY_RETURN_PREDICTOR:")
        print(f"   –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–æ: {len(buy_df)}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–ø–æ—Ö
        print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–ø–æ—Ö:")
        print("   " + "-"*60)
        print(f"   {'Epoch':>6} {'Loss':>10} {'MAE':>10} {'Val Loss':>10} {'Val MAE':>10}")
        print("   " + "-"*60)
        
        for _, row in buy_df.tail(5).iterrows():
            print(f"   {row['epoch']:>6} {row['loss']:>10.4f} {row['mae']:>10.4f} {row['val_loss']:>10.4f} {row['val_mae']:>10.4f}")
        
        # –õ—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        best_val_loss_idx = buy_df['val_loss'].idxmin()
        best_row = buy_df.loc[best_val_loss_idx]
        print(f"\n   ‚ú® –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—ç–ø–æ—Ö–∞ {best_row['epoch']}):")
        print(f"      Val Loss: {best_row['val_loss']:.4f}")
        print(f"      Val MAE: {best_row['val_mae']:.4f}%")
        
        # –¢—Ä–µ–Ω–¥
        if len(buy_df) > 5:
            recent_trend = buy_df['val_loss'].tail(5).diff().mean()
            if recent_trend < 0:
                print(f"   üìâ –¢—Ä–µ–Ω–¥: –£–ª—É—á—à–µ–Ω–∏–µ (val_loss —Å–Ω–∏–∂–∞–µ—Ç—Å—è)")
            elif recent_trend > 0:
                print(f"   üìà –¢—Ä–µ–Ω–¥: –£—Ö—É–¥—à–µ–Ω–∏–µ (val_loss —Ä–∞—Å—Ç–µ—Ç)")
            else:
                print(f"   ‚û°Ô∏è  –¢—Ä–µ–Ω–¥: –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è")

# sell_return_predictor –º–µ—Ç—Ä–∏–∫–∏
sell_metrics_file = os.path.join(latest_log_dir, "sell_return_predictor_metrics.csv")
if os.path.exists(sell_metrics_file):
    sell_df = pd.read_csv(sell_metrics_file)
    if len(sell_df) > 0:
        print("\nüî¥ SELL_RETURN_PREDICTOR:")
        print(f"   –≠–ø–æ—Ö –æ–±—É—á–µ–Ω–æ: {len(sell_df)}")
        
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è sell –º–æ–¥–µ–ª–∏
        print("\n   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —ç–ø–æ—Ö:")
        print("   " + "-"*60)
        print(f"   {'Epoch':>6} {'Loss':>10} {'MAE':>10} {'Val Loss':>10} {'Val MAE':>10}")
        print("   " + "-"*60)
        
        for _, row in sell_df.tail(5).iterrows():
            print(f"   {row['epoch']:>6} {row['loss']:>10.4f} {row['mae']:>10.4f} {row['val_loss']:>10.4f} {row['val_mae']:>10.4f}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
plots_dir = os.path.join(latest_log_dir, "plots")
if os.path.exists(plots_dir):
    plot_files = glob.glob(os.path.join(plots_dir, "*.png"))
    if plot_files:
        print(f"\nüé® –ì–†–ê–§–ò–ö–ò:")
        for plot in sorted(plot_files):
            print(f"   ‚úÖ {os.path.basename(plot)}")

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
final_report = os.path.join(latest_log_dir, "final_report.txt")
if os.path.exists(final_report):
    print("\nüìÑ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ù–ê–ô–î–ï–ù!")
    with open(final_report, 'r') as f:
        report_lines = f.readlines()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
    in_results = False
    for line in report_lines:
        if "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê –¢–ï–°–¢–û–í–û–ô –í–´–ë–û–†–ö–ï" in line:
            in_results = True
        if in_results and ("MAE:" in line or "RMSE:" in line or "R¬≤:" in line or "Direction Accuracy:" in line):
            print(f"   {line.strip()}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ –µ—â–µ –æ–±—É—á–µ–Ω–∏–µ
if not os.path.exists(final_report):
    print("\n‚è≥ –°—Ç–∞—Ç—É—Å: –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
    
    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if os.path.exists(buy_metrics_file):
        buy_df = pd.read_csv(buy_metrics_file)
        if len(buy_df) > 0:
            epochs_done = len(buy_df)
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å buy_return_predictor: {epochs_done}/100 —ç–ø–æ—Ö")
else:
    print("\n‚úÖ –°—Ç–∞—Ç—É—Å: –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

print("\n" + "="*80)