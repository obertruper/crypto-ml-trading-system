#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import psycopg2
from psycopg2.extras import Json
import yaml
import logging
import time
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def fix_data_leakage_optimized():
    """–£–¥–∞–ª—è–µ—Ç expected_returns –∏–∑ technical_indicators –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î —Å autocommit=True –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
    conn = psycopg2.connect(**db_config)
    conn.autocommit = True
    
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–± –ø—Ä–æ–±–ª–µ–º—ã
        logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        cursor.execute("""
            SELECT COUNT(*) as total,
                   COUNT(CASE WHEN technical_indicators ? 'buy_expected_return' 
                              OR technical_indicators ? 'sell_expected_return' 
                         THEN 1 END) as with_leak
            FROM processed_market_data
        """)
        total, with_leak = cursor.fetchone()
        
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total:,}")
        logger.info(f"   –° —É—Ç–µ—á–∫–æ–π: {with_leak:,} ({with_leak/total*100:.1f}%)")
        
        if with_leak == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            return
        
        # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT id, 
                   array_length(array(SELECT jsonb_object_keys(technical_indicators)), 1) as keys_count,
                   pg_column_size(technical_indicators) as json_size
            FROM processed_market_data 
            WHERE technical_indicators ? 'buy_expected_return'
            LIMIT 1
        """)
        sample = cursor.fetchone()
        if sample:
            logger.info(f"\nüìä –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ —Å —É—Ç–µ—á–∫–æ–π:")
            logger.info(f"   ID: {sample[0]}")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {sample[1]}")
            logger.info(f"   –†–∞–∑–º–µ—Ä JSON: {sample[2]} –±–∞–π—Ç")
        
        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL UPDATE
        logger.info("\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏...")
        logger.info("   –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å...")
        
        start_time = time.time()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        cursor.execute("BEGIN")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º work_mem –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        cursor.execute("SET work_mem = '256MB'")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º UPDATE –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        update_query = """
            UPDATE processed_market_data
            SET technical_indicators = technical_indicators 
                - 'buy_expected_return'::text 
                - 'sell_expected_return'::text
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """
        
        logger.info("   –ó–∞–ø—É—Å–∫ UPDATE (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)...")
        cursor.execute(update_query)
        
        updated_count = cursor.rowcount
        elapsed = time.time() - start_time
        
        logger.info(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count:,} –∑–∞–ø–∏—Å–µ–π –∑–∞ {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {updated_count/elapsed:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        cursor.execute("""
            SELECT COUNT(*) 
            FROM processed_market_data 
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """)
        remaining = cursor.fetchone()[0]
        
        if remaining == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä –æ—á–∏—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if sample:
                cursor.execute("""
                    SELECT array_length(array(SELECT jsonb_object_keys(technical_indicators)), 1) as keys_count,
                           pg_column_size(technical_indicators) as json_size
                    FROM processed_market_data 
                    WHERE id = %s
                """, (sample[0],))
                cleaned = cursor.fetchone()
                if cleaned:
                    logger.info(f"\nüìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
                    logger.info(f"   ID: {sample[0]}")
                    logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: {cleaned[0]} (–±—ã–ª–æ {sample[1]})")
                    logger.info(f"   –†–∞–∑–º–µ—Ä JSON: {cleaned[1]} –±–∞–π—Ç (–±—ã–ª–æ {sample[2]})")
                    logger.info(f"   –≠–∫–æ–Ω–æ–º–∏—è: {sample[2] - cleaned[1]} –±–∞–π—Ç –Ω–∞ –∑–∞–ø–∏—Å—å")
                    logger.info(f"   –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ~{(sample[2] - cleaned[1]) * updated_count / 1024 / 1024:.0f} –ú–ë")
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            logger.info("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
            cursor.execute("COMMIT")
            logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            # 5. –í—ã–ø–æ–ª–Ω—è–µ–º VACUUM –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
            logger.info("\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã (VACUUM)...")
            cursor.execute("VACUUM ANALYZE processed_market_data")
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        else:
            logger.error(f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å —É—Ç–µ—á–∫–æ–π: {remaining}")
            cursor.execute("ROLLBACK")
            
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        cursor.execute("ROLLBACK")
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        cursor.execute("ROLLBACK")
        raise
    finally:
        conn.close()
        logger.info("\nüì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    logger.info("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    logger.info("=" * 60)
    logger.info("–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ!")
    logger.info("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    logger.info("=" * 60)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() == 'y':
        try:
            fix_data_leakage_optimized()
        except KeyboardInterrupt:
            logger.info("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")