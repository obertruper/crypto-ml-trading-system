#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ SQL —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –±–µ–∑ –±–∞—Ç—á–µ–π
"""

import psycopg2
import yaml
import logging
import time

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def fix_data_leakage_direct():
    """–£–¥–∞–ª—è–µ—Ç expected_returns –æ–¥–Ω–æ–π SQL –∫–æ–º–∞–Ω–¥–æ–π"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**db_config)
    
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—à—Ç–∞–± –ø—Ä–æ–±–ª–µ–º—ã
        logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        cursor.execute("""
            SELECT COUNT(*) 
            FROM processed_market_data 
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """)
        with_leak = cursor.fetchone()[0]
        
        logger.info(f"   –ó–∞–ø–∏—Å–µ–π —Å —É—Ç–µ—á–∫–æ–π: {with_leak:,}")
        
        if with_leak == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            return
        
        # 2. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        logger.info("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ PostgreSQL...")
        cursor.execute("SET work_mem = '1GB'")
        cursor.execute("SET maintenance_work_mem = '2GB'")
        cursor.execute("SET max_parallel_workers_per_gather = 4")
        cursor.execute("SET max_parallel_workers = 8")
        cursor.execute("SET parallel_tuple_cost = 0.01")
        cursor.execute("SET parallel_setup_cost = 100")
        
        # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        logger.info("\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-5 –º–∏–Ω—É—Ç)...")
        logger.info("   –ò—Å–ø–æ–ª—å–∑—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ GIN –∏–Ω–¥–µ–∫—Å...")
        
        start_time = time.time()
        
        # –ü—Ä—è–º–æ–π UPDATE —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GIN –∏–Ω–¥–µ–∫—Å–∞
        cursor.execute("""
            UPDATE processed_market_data
            SET technical_indicators = technical_indicators 
                - 'buy_expected_return'::text 
                - 'sell_expected_return'::text
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """)
        
        updated_count = cursor.rowcount
        elapsed = time.time() - start_time
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        logger.info(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count:,} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"   –í—Ä–µ–º—è: {elapsed:.1f} —Å–µ–∫ ({elapsed/60:.1f} –º–∏–Ω)")
        logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {updated_count/elapsed:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        cursor.execute("""
            SELECT COUNT(*) 
            FROM processed_market_data 
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """)
        remaining = cursor.fetchone()[0]
        
        if remaining == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞!")
            
            # 5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            logger.info("\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã...")
            conn.autocommit = True
            cursor.execute("VACUUM (ANALYZE, VERBOSE) processed_market_data")
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.error(f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å —É—Ç–µ—á–∫–æ–π: {remaining}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()
        logger.info("\nüì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    logger.info("üöÄ –ü—Ä—è–º–æ–µ SQL —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    logger.info("=" * 60)
    logger.info("–í–ù–ò–ú–ê–ù–ò–ï: –í—ã–ø–æ–ª–Ω—è–µ—Ç UPDATE –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π!")
    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PostgreSQL")
    logger.info("–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 2-5 –º–∏–Ω—É—Ç –¥–ª—è 2.7–ú –∑–∞–ø–∏—Å–µ–π")
    logger.info("=" * 60)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    logger.warning("\n‚ö†Ô∏è  –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!")
    logger.warning("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() == 'y':
        fix_data_leakage_direct()
    else:
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")