#!/usr/bin/env python3
"""
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–µ
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import yaml
import logging
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
import json

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def process_batch(db_config, symbol, offset, limit):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    conn = psycopg2.connect(**db_config)
    conn.autocommit = True
    
    try:
        with conn.cursor() as cursor:
            # –ß–∏—Ç–∞–µ–º –±–∞—Ç—á
            cursor.execute("""
                SELECT id, technical_indicators
                FROM processed_market_data
                WHERE symbol = %s
                ORDER BY id
                LIMIT %s OFFSET %s
            """, (symbol, limit, offset))
            
            records = cursor.fetchall()
            updated = 0
            
            for record_id, indicators in records:
                if indicators and ('buy_expected_return' in indicators or 'sell_expected_return' in indicators):
                    # –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é –∫–æ–ø–∏—é
                    cleaned = {k: v for k, v in indicators.items() 
                             if k not in ['buy_expected_return', 'sell_expected_return']}
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    cursor.execute("""
                        UPDATE processed_market_data
                        SET technical_indicators = %s
                        WHERE id = %s
                    """, (json.dumps(cleaned), record_id))
                    
                    updated += 1
            
            return len(records), updated
            
    finally:
        conn.close()


def fix_data_leakage_parallel():
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª–∞–º"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**db_config)
    conn.autocommit = True
    
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª–∞–º...")
        cursor.execute("""
            SELECT symbol, COUNT(*) as count
            FROM processed_market_data
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
            GROUP BY symbol
            ORDER BY count DESC
        """)
        
        symbol_stats = cursor.fetchall()
        total_records = sum(s['count'] for s in symbol_stats)
        
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ {len(symbol_stats)} —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—Ç–µ—á–∫–æ–π")
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {total_records:,}")
        
        if total_records == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            return
        
        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        logger.info("\nüöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        batch_size = 5000
        max_workers = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        
        start_time = time.time()
        total_processed = 0
        total_updated = 0
        
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            futures = []
            
            for symbol_info in symbol_stats:
                symbol = symbol_info['symbol']
                count = symbol_info['count']
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–µ–π –≤–Ω—É—Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞
                for offset in range(0, count, batch_size):
                    future = executor.submit(
                        process_batch, 
                        db_config, 
                        symbol, 
                        offset, 
                        min(batch_size, count - offset)
                    )
                    futures.append((future, symbol))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–æ–º
            with tqdm(total=total_records, desc="–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", unit="–∑–∞–ø–∏—Å–µ–π") as pbar:
                for future, symbol in futures:
                    try:
                        processed, updated = future.result()
                        total_processed += processed
                        total_updated += updated
                        pbar.update(processed)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        elapsed = time.time() - start_time
                        speed = total_processed / elapsed if elapsed > 0 else 0
                        pbar.set_postfix({
                            '–°–∏–º–≤–æ–ª': symbol[:10],
                            '–°–∫–æ—Ä–æ—Å—Ç—å': f'{speed:.0f} –∑–∞–ø/—Å–µ–∫',
                            '–û–±–Ω–æ–≤–ª–µ–Ω–æ': f'{total_updated}'
                        })
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
        
        # –ò—Ç–æ–≥–∏
        total_time = time.time() - start_time
        logger.info(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed:,} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {total_updated:,} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"   –í—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫ ({total_time/60:.1f} –º–∏–Ω)")
        logger.info(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {total_processed/total_time:.0f} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        cursor.execute("""
            SELECT COUNT(*) 
            FROM processed_market_data 
            WHERE technical_indicators ?| array['buy_expected_return', 'sell_expected_return']
        """)
        remaining = cursor.fetchone()['count']
        
        if remaining == 0:
            logger.info("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞!")
            
            # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            logger.info("\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã...")
            cursor.execute("VACUUM ANALYZE processed_market_data")
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.error(f"‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å —É—Ç–µ—á–∫–æ–π: {remaining}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        conn.close()
        logger.info("\nüì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    logger.info("üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    logger.info("=" * 60)
    logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ —Å–∏–º–≤–æ–ª–∞–º")
    logger.info("–ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    logger.info("–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 3-7 –º–∏–Ω—É—Ç –¥–ª—è 2.7–ú –∑–∞–ø–∏—Å–µ–π")
    logger.info("=" * 60)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() == 'y':
        fix_data_leakage_parallel()
    else:
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")