#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
"""

import pandas as pd
import numpy as np
import psycopg2
import yaml
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def diagnose_binary_features():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host=db_config['host'],
        port=db_config['port'],
        database=db_config['dbname'],
        user=db_config['user']
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    query = """
    SELECT 
        pm.symbol, pm.timestamp,
        pm.technical_indicators,
        rm.open, rm.high, rm.low, rm.close, rm.volume
    FROM processed_market_data pm
    JOIN raw_market_data rm ON pm.raw_data_id = rm.id
    WHERE pm.symbol IN ('BTCUSDT', 'ETHUSDT')
    ORDER BY pm.timestamp DESC
    LIMIT 1000
    """
    
    df = pd.read_sql_query(query, conn)
    logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    indicators_df = pd.json_normalize(df['technical_indicators'])
    df = pd.concat([df, indicators_df], axis=1)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º RSI
    logger.info("\nüìà –ê–ù–ê–õ–ò–ó RSI:")
    if 'rsi_val' in df.columns:
        rsi_stats = df['rsi_val'].describe()
        logger.info(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {rsi_stats}")
        
        # –°–æ–∑–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        rsi_oversold = (df['rsi_val'] < 30).astype(int)
        rsi_overbought = (df['rsi_val'] > 70).astype(int)
        
        logger.info(f"  Oversold (RSI < 30): {rsi_oversold.sum()} –∏–∑ {len(df)} ({rsi_oversold.mean()*100:.1f}%)")
        logger.info(f"  Overbought (RSI > 70): {rsi_overbought.sum()} –∏–∑ {len(df)} ({rsi_overbought.mean()*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        oversold_examples = df[df['rsi_val'] < 30]['rsi_val'].head()
        if len(oversold_examples) > 0:
            logger.info(f"  –ü—Ä–∏–º–µ—Ä—ã oversold RSI: {oversold_examples.values}")
        
        overbought_examples = df[df['rsi_val'] > 70]['rsi_val'].head()
        if len(overbought_examples) > 0:
            logger.info(f"  –ü—Ä–∏–º–µ—Ä—ã overbought RSI: {overbought_examples.values}")
    else:
        logger.error("  ‚ùå RSI –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º MACD
    logger.info("\nüìà –ê–ù–ê–õ–ò–ó MACD:")
    if 'macd_hist' in df.columns:
        macd_stats = df['macd_hist'].describe()
        logger.info(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {macd_stats}")
        
        # –°–æ–∑–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫
        macd_bullish = (df['macd_hist'] > 0).astype(int)
        
        logger.info(f"  Bullish (MACD > 0): {macd_bullish.sum()} –∏–∑ {len(df)} ({macd_bullish.mean()*100:.1f}%)")
        logger.info(f"  Bearish (MACD <= 0): {(1-macd_bullish).sum()} –∏–∑ {len(df)} ({(1-macd_bullish).mean()*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        positive_macd = df[df['macd_hist'] > 0]['macd_hist']
        negative_macd = df[df['macd_hist'] <= 0]['macd_hist']
        logger.info(f"  –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: min={positive_macd.min():.4f}, max={positive_macd.max():.4f}")
        logger.info(f"  –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: min={negative_macd.min():.4f}, max={negative_macd.max():.4f}")
    else:
        logger.error("  ‚ùå MACD –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º is_bullish
    logger.info("\nüìà –ê–ù–ê–õ–ò–ó IS_BULLISH:")
    df['is_bullish'] = (df['close'] > df['open']).astype(int)
    logger.info(f"  Bullish —Å–≤–µ—á–µ–π: {df['is_bullish'].sum()} –∏–∑ {len(df)} ({df['is_bullish'].mean()*100:.1f}%)")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—É –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info("\nüîç –ü–†–û–í–ï–†–ö–ê –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ
    from sklearn.preprocessing import StandardScaler
    
    # –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_features = ['rsi_val', 'macd_hist', 'adx_val'] 
    test_data = df[test_features].copy()
    
    # –î–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info("  –î–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    for col in test_features:
        if col in test_data.columns:
            logger.info(f"    {col}: mean={test_data[col].mean():.4f}, std={test_data[col].std():.4f}")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    scaler = StandardScaler()
    normalized_data = scaler.fit_transform(test_data)
    normalized_df = pd.DataFrame(normalized_data, columns=test_features)
    
    # –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info("  –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
    for col in test_features:
        logger.info(f"    {col}: mean={normalized_df[col].mean():.4f}, std={normalized_df[col].std():.4f}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è –ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    logger.info("\n‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–û–¢–ï–†–ò –ë–ò–ù–ê–†–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    df['rsi_oversold'] = (df['rsi_val'] < 30).astype(int)
    df['rsi_overbought'] = (df['rsi_val'] > 70).astype(int)
    df['macd_bullish'] = (df['macd_hist'] > 0).astype(int)
    
    binary_features = ['rsi_oversold', 'rsi_overbought', 'macd_bullish', 'is_bullish']
    
    logger.info("  –ó–Ω–∞—á–µ–Ω–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    for feat in binary_features:
        if feat in df.columns:
            unique_vals = df[feat].unique()
            value_counts = df[feat].value_counts()
            logger.info(f"    {feat}: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è={unique_vals}, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ={dict(value_counts)}")
    
    conn.close()
    logger.info("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    diagnose_binary_features()