#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
import psycopg2
from psycopg2.extras import RealDictCursor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

def check_thresholds():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö"""
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host="localhost",
        port=5555,
        database="crypto_trading",
        user="ruslan"
    )
    
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü–æ–ª—É—á–∞–µ–º expected returns –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ expected returns...")
            cursor.execute("""
                SELECT buy_expected_return, sell_expected_return
                FROM processed_market_data
                WHERE symbol IN ('BTCUSDT', 'ETHUSDT')
                AND buy_expected_return IS NOT NULL
                LIMIT 50000
            """)
            
            data = cursor.fetchall()
            df = pd.DataFrame(data)
            
            logger.info(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            thresholds = [0.3, 0.5, 0.7, 1.0, 1.5]
            
            logger.info("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö:")
            logger.info("–ü–æ—Ä–æ–≥ | Buy Class 1 % | Sell Class 1 %")
            logger.info("-" * 40)
            
            for threshold in thresholds:
                buy_class_1 = (df['buy_expected_return'] > threshold).mean() * 100
                sell_class_1 = (df['sell_expected_return'] > threshold).mean() * 100
                
                logger.info(f"{threshold:4.1f}% | {buy_class_1:13.1f}% | {sell_class_1:14.1f}%")
                
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ—Ä–æ–≥–∞ 0.7%
            logger.info("\nüìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ—Ä–æ–≥–∞ 0.7%:")
            threshold = 0.7
            
            buy_positive = (df['buy_expected_return'] > threshold).sum()
            buy_negative = (df['buy_expected_return'] <= threshold).sum()
            sell_positive = (df['sell_expected_return'] > threshold).sum()
            sell_negative = (df['sell_expected_return'] <= threshold).sum()
            
            logger.info(f"   Buy:  Class 1: {buy_positive:,} ({buy_positive/len(df)*100:.1f}%), "
                       f"Class 0: {buy_negative:,} ({buy_negative/len(df)*100:.1f}%)")
            logger.info(f"   Sell: Class 1: {sell_positive:,} ({sell_positive/len(df)*100:.1f}%), "
                       f"Class 0: {sell_negative:,} ({sell_negative/len(df)*100:.1f}%)")
            
            # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤
            buy_ratio = buy_negative / buy_positive if buy_positive > 0 else np.inf
            sell_ratio = sell_negative / sell_positive if sell_positive > 0 else np.inf
            
            logger.info(f"\n   Scale_pos_weight –¥–ª—è buy: {buy_ratio:.2f}")
            logger.info(f"   Scale_pos_weight –¥–ª—è sell: {sell_ratio:.2f}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    logger.info("="*60)
    logger.info("–ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ö–õ–ê–°–°–û–í –ü–†–ò –†–ê–ó–ù–´–• –ü–û–†–û–ì–ê–•")
    logger.info("="*60)
    check_thresholds()