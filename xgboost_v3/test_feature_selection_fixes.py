#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π feature selection –¥–ª—è XGBoost v3.0
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
import logging
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_feature_mapping():
    """–¢–µ—Å—Ç feature mapping"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ feature mapping...")
    
    try:
        from config.feature_mapping import (
            get_feature_category, 
            get_category_targets, 
            get_temporal_blacklist
        )
        
        # –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        test_features = [
            'rsi_val', 'dow_cos', 'btc_correlation_20', 'is_btc', 
            'market_regime_low_vol', 'hour_sin', 'is_weekend'
        ]
        
        expected_categories = [
            'technical', 'temporal', 'btc_related', 'symbol',
            'technical', 'temporal', 'temporal'
        ]
        
        logger.info("   –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        for feature, expected in zip(test_features, expected_categories):
            actual = get_feature_category(feature)
            status = "‚úÖ" if actual == expected else "‚ùå"
            logger.info(f"      {feature}: {actual} {status}")
        
        # –¢–µ—Å—Ç —Ü–µ–ª–µ–≤—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        targets = get_category_targets()
        logger.info(f"   –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {targets}")
        
        # –¢–µ—Å—Ç blacklist
        blacklist = get_temporal_blacklist()
        logger.info(f"   Temporal blacklist: {blacklist}")
        
        logger.info("‚úÖ Feature mapping —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ feature mapping: {e}")
        return False

def test_feature_selector():
    """–¢–µ—Å—Ç feature selector —Å –Ω–æ–≤—ã–º–∏ –∫–≤–æ—Ç–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ feature selector...")
    
    try:
        from utils.feature_selector import FeatureSelector
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        np.random.seed(42)
        n_samples = 1000
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        technical_features = [
            'rsi_val', 'macd_val', 'bb_position', 'adx_val', 'atr',
            'volume_ratio', 'stoch_k', 'williams_r', 'mfi', 'cci',
            'market_regime_low_vol', 'market_regime_med_vol'
        ]
        
        # Temporal –ø—Ä–∏–∑–Ω–∞–∫–∏ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
        temporal_features = ['hour_sin', 'hour_cos', 'dow_sin', 'dow_cos', 'is_weekend']
        
        # BTC –ø—Ä–∏–∑–Ω–∞–∫–∏
        btc_features = ['btc_correlation_20', 'btc_volatility', 'btc_return_1h']
        
        # Symbol –ø—Ä–∏–∑–Ω–∞–∫–∏
        symbol_features = ['is_btc', 'is_eth', 'is_bnb']
        
        all_features = technical_features + temporal_features + btc_features + symbol_features
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        data = {}
        for feature in all_features:
            data[feature] = np.random.randn(n_samples)
        
        # –î–µ–ª–∞–µ–º temporal –ø—Ä–∏–∑–Ω–∞–∫–∏ "–≤–∞–∂–Ω—ã–º–∏" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –æ–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç—Å—è
        for temp_feat in temporal_features:
            data[temp_feat] = data[temp_feat] * 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ä—Å–∏—é
        
        X = pd.DataFrame(data)
        y = pd.Series(np.random.randint(0, 2, n_samples))  # –ë–∏–Ω–∞—Ä–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º hierarchical selector
        selector = FeatureSelector(method="hierarchical", top_k=20)
        
        logger.info(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ ({len(all_features)}): {', '.join(all_features)}")
        
        X_selected, selected_features = selector.select_features(X, y, all_features)
        
        logger.info(f"   –û—Ç–æ–±—Ä–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(selected_features)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        from config.feature_mapping import get_feature_category
        
        category_counts = {}
        for feature in selected_features:
            cat = get_feature_category(feature)
            category_counts[cat] = category_counts.get(cat, 0) + 1
        
        logger.info("   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        total = len(selected_features)
        for cat, count in category_counts.items():
            percentage = count / total * 100 if total > 0 else 0
            logger.info(f"      {cat}: {count} ({percentage:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ temporal <= 1 –ø—Ä–∏–∑–Ω–∞–∫ (—á—Ç–æ –¥–ª—è 20 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ = 5%)
        temporal_count = category_counts.get('temporal', 0)
        temporal_percentage = temporal_count / total * 100 if total > 0 else 0
        
        # –î–ª—è —Ç–µ—Å—Ç–∞ —Å 20 –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏: 1 temporal = 5%, —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        max_allowed_temporal = 1
        
        if temporal_count <= max_allowed_temporal:
            logger.info(f"‚úÖ Temporal –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {temporal_count} –ø—Ä–∏–∑–Ω–∞–∫(–æ–≤) <= {max_allowed_temporal}")
        else:
            logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ temporal: {temporal_count} > {max_allowed_temporal}")
            return False
        
        logger.info("‚úÖ Feature selector —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ feature selector: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_feature_importance_validator():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ feature importance validator...")
    
    try:
        from utils.feature_importance_validator import FeatureImportanceValidator
        import xgboost as xgb
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
        np.random.seed(42)
        n_samples = 1000
        n_features = 20
        
        X = np.random.randn(n_samples, n_features)
        y = np.random.randint(0, 2, n_samples)
        
        model = xgb.XGBClassifier(n_estimators=50, max_depth=3, random_state=42)
        model.fit(X, y)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é - temporal –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∞–∂–Ω–µ–µ
        feature_names = [
            'dow_cos', 'hour_sin', 'is_weekend',  # temporal (–ø–µ—Ä–≤—ã–µ 3 - –±—É–¥—É—Ç –≤–∞–∂–Ω–µ–µ)
            'rsi_val', 'macd_val', 'bb_position', 'adx_val',  # technical
            'btc_correlation_20', 'btc_volatility',  # btc_related
            'is_btc', 'is_eth'  # symbol
        ] + [f'other_feature_{i}' for i in range(9)]  # other
        
        # –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º temporal –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∞–∂–Ω–µ–µ
        original_importances = model.feature_importances_.copy()
        modified_importances = original_importances.copy()
        modified_importances[0] = 0.3  # dow_cos
        modified_importances[1] = 0.25  # hour_sin
        modified_importances[2] = 0.15  # is_weekend
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        remaining_sum = 1.0 - 0.7
        remaining_features = modified_importances[3:]
        remaining_features = remaining_features / remaining_features.sum() * remaining_sum
        modified_importances[3:] = remaining_features
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ monkey patching
        # –ü–æ—Å–∫–æ–ª—å–∫—É feature_importances_ readonly, —Å–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç
        class MockModel:
            def __init__(self, importances):
                self.feature_importances_ = importances
        
        mock_model = MockModel(modified_importances)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        validator = FeatureImportanceValidator(max_temporal_importance=5.0)
        result = validator.validate_model_feature_importance(mock_model, feature_names, "test_model")
        
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {result}")
        
        # –î–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
        if not result['valid'] and result['severity'] == 'critical':
            logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ temporal")
        else:
            logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—É")
            return False
        
        logger.info("‚úÖ Feature importance validator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ validator: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config_updates():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ rolling_windows —É–º–µ–Ω—å—à–µ–Ω—ã
        from config.features_config import FEATURE_CONFIG
        
        rolling_windows = FEATURE_CONFIG['rolling_windows']
        logger.info(f"   Rolling windows: {rolling_windows}")
        
        if len(rolling_windows) == 2 and rolling_windows == [20, 60]:
            logger.info("‚úÖ Rolling windows –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–º–µ–Ω—å—à–µ–Ω—ã –¥–æ 2")
        else:
            logger.error(f"‚ùå Rolling windows –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {rolling_windows}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–µ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        from config.feature_mapping import get_category_targets
        targets = get_category_targets()
        
        if (targets['technical'] == 85 and targets['temporal'] == 2 and 
            targets['btc_related'] == 10 and targets['symbol'] == 3):
            logger.info("‚úÖ –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            logger.error(f"‚ùå –¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {targets}")
            return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô FEATURE SELECTION")
    logger.info("="*60)
    
    tests = [
        test_feature_mapping,
        test_config_updates,
        test_feature_selector,
        test_feature_importance_validator
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_func.__name__}: {e}")
            failed += 1
        
        logger.info("-" * 40)
    
    logger.info("="*60)
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    
    if failed == 0:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        logger.error("üí• –ï–°–¢–¨ –ü–†–û–í–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)