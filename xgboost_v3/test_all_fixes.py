#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ XGBoost v3
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import logging
import pandas as pd
import numpy as np
from config import Config
from config.constants import TOP_SYMBOLS, DATA_LEAKAGE_PARAMS, ENSEMBLE_PARAMS
from data.btc_data_loader import BTCDataLoader
from data.feature_engineer import FeatureEngineer
from data.preprocessor import DataPreprocessor
from models.data_balancer import DataBalancer
from models.ensemble import EnsembleModel

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)


def test_btc_data_loader():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ btc_data_loader.py"""
    logger.info("\n" + "="*60)
    logger.info("üß™ –¢–ï–°–¢ 1: BTCDataLoader - validate_btc_coverage")
    logger.info("="*60)
    
    try:
        config = Config()
        btc_loader = BTCDataLoader(config)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame
        df = pd.DataFrame({
            'timestamp': pd.date_range('2024-01-01', periods=100, freq='15min').astype(int) // 10**6,
            'close': np.random.randn(100).cumsum() + 100,
            'btc_close': np.random.randn(100).cumsum() + 50000
        })
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ validate_btc_coverage
        stats = btc_loader.validate_btc_coverage(df)
        
        logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ validate_btc_coverage —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        logger.info(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {stats['coverage']:.1f}%")
        logger.info(f"   –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {stats['is_synthetic']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ BTCDataLoader: {e}")
        return False
        
    return True


def test_constants():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ constants.py"""
    logger.info("\n" + "="*60)
    logger.info("üß™ –¢–ï–°–¢ 2: –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã TOP_SYMBOLS –∏ DATA_LEAKAGE_PARAMS")
    logger.info("="*60)
    
    try:
        logger.info(f"‚úÖ TOP_SYMBOLS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: {len(TOP_SYMBOLS)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   –ü–µ—Ä–≤—ã–µ 5: {TOP_SYMBOLS[:5]}")
        
        logger.info(f"\n‚úÖ DATA_LEAKAGE_PARAMS –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:")
        for key, value in DATA_LEAKAGE_PARAMS.items():
            logger.info(f"   {key}: {value}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞—Ö: {e}")
        return False
        
    return True


def test_feature_engineer():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ feature_engineer.py"""
    logger.info("\n" + "="*60)
    logger.info("üß™ –¢–ï–°–¢ 3: FeatureEngineer - –ø–æ—Ä—è–¥–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ TOP_SYMBOLS")
    logger.info("="*60)
    
    try:
        config = Config()
        config.training.test_mode = True
        feature_engineer = FeatureEngineer(config)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π DataFrame
        df = pd.DataFrame({
            'timestamp': pd.date_range('2024-01-01', periods=100, freq='15min').astype(int) // 10**6,
            'symbol': np.random.choice(['BTCUSDT', 'ETHUSDT', 'BNBUSDT'], 100),
            'open': np.random.randn(100).cumsum() + 100,
            'high': np.random.randn(100).cumsum() + 101,
            'low': np.random.randn(100).cumsum() + 99,
            'close': np.random.randn(100).cumsum() + 100,
            'volume': np.random.exponential(1000, 100),
            'rsi_val': np.random.uniform(20, 80, 100),
            'adx_val': np.random.uniform(10, 50, 100),
            'macd_hist': np.random.randn(100),
            'atr': np.random.exponential(0.5, 100),
            'bb_position': np.random.uniform(0, 1, 100),
            'volume_ratio': np.random.exponential(1, 100),
            'ema_15': np.random.randn(100).cumsum() + 100,
            'sar': np.random.randn(100).cumsum() + 100
        })
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        df_features = feature_engineer.create_features(df.copy())
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"   –ò—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {df.shape[1]}")
        logger.info(f"   –ò—Ç–æ–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {df_features.shape[1]}")
        logger.info(f"   –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: {df_features.shape[1] - df.shape[1]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ symbol one-hot encoding –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TOP_SYMBOLS
        symbol_features = [col for col in df_features.columns if col.startswith('is_')]
        logger.info(f"\n‚úÖ Symbol one-hot encoding –ø—Ä–∏–∑–Ω–∞–∫–∏: {len(symbol_features)}")
        logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã: {symbol_features[:5]}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ FeatureEngineer: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    return True


def test_preprocessor():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ preprocessor.py"""
    logger.info("\n" + "="*60)
    logger.info("üß™ –¢–ï–°–¢ 4: DataPreprocessor - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å DATA_LEAKAGE_PARAMS")
    logger.info("="*60)
    
    try:
        config = Config()
        preprocessor = DataPreprocessor(config)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        n_samples = 1000
        n_features = 50
        
        X = pd.DataFrame(
            np.random.randn(n_samples, n_features),
            columns=[f'feature_{i}' for i in range(n_features)]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π
        y_buy = pd.Series(np.random.randn(n_samples))
        y_sell = pd.Series(np.random.randn(n_samples))
        
        # –°–æ–∑–¥–∞–µ–º —É—Ç–µ—á–∫—É –≤ –æ–¥–Ω–æ–º –ø—Ä–∏–∑–Ω–∞–∫–µ
        X['feature_leak'] = y_buy * 0.95 + np.random.randn(n_samples) * 0.05
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        preprocessor._check_data_leakage(X, y_buy, y_sell)
        
        logger.info(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ DataPreprocessor: {e}")
        return False
        
    return True


def test_data_balancer():
    """–¢–µ—Å—Ç DataBalancer –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã"""
    logger.info("\n" + "="*60)
    logger.info("üß™ –¢–ï–°–¢ 5: DataBalancer - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    logger.info("="*60)
    
    try:
        config = Config()
        config.training.balance_method = "smote"
        balancer = DataBalancer(config)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        n_majority = 900
        n_minority = 100
        n_features = 10
        
        X_majority = pd.DataFrame(
            np.random.randn(n_majority, n_features),
            columns=[f'feature_{i}' for i in range(n_features)]
        )
        X_minority = pd.DataFrame(
            np.random.randn(n_minority, n_features),
            columns=[f'feature_{i}' for i in range(n_features)]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        X_majority['is_bullish'] = np.random.choice([0, 1], n_majority)
        X_minority['is_bullish'] = np.random.choice([0, 1], n_minority)
        
        X = pd.concat([X_majority, X_minority], ignore_index=True)
        y = pd.Series([0] * n_majority + [1] * n_minority)
        
        # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
        X_balanced, y_balanced = balancer.balance_data(X, y, is_classification=True)
        
        logger.info(f"‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"   –î–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {len(y)} –ø—Ä–∏–º–µ—Ä–æ–≤")
        logger.info(f"   –ü–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {len(y_balanced)} –ø—Ä–∏–º–µ—Ä–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        if 'is_bullish' in X_balanced.columns:
            unique_vals = X_balanced['is_bullish'].unique()
            logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è is_bullish: {sorted(unique_vals)}")
            if all(val in [0, 1] for val in unique_vals):
                logger.info(f"   ‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                logger.error(f"   ‚ùå –ë–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã!")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ DataBalancer: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    return True


def test_ensemble_params():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ENSEMBLE_PARAMS –≤ ensemble.py"""
    logger.info("\n" + "="*60)
    logger.info("üß™ –¢–ï–°–¢ 6: EnsembleModel - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ENSEMBLE_PARAMS")
    logger.info("="*60)
    
    try:
        config = Config()
        ensemble = EnsembleModel(config)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        for i in range(10):
            params = ensemble._get_diverse_params(i)
            variation_idx = i % len(ENSEMBLE_PARAMS['model_variations'])
            expected_variation = ENSEMBLE_PARAMS['model_variations'][variation_idx]
            
            logger.info(f"\n–ú–æ–¥–µ–ª—å {i+1}:")
            logger.info(f"   max_depth: {params.get('max_depth')} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_variation['max_depth']})")
            logger.info(f"   learning_rate: {params.get('learning_rate')} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_variation['learning_rate']})")
            logger.info(f"   subsample: {params.get('subsample')} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_variation['subsample']})")
            
        logger.info(f"\n‚úÖ ENSEMBLE_PARAMS –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ EnsembleModel: {e}")
        return False
        
    return True


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô XGBoost v3    ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    tests = [
        ("BTCDataLoader", test_btc_data_loader),
        ("Constants", test_constants),
        ("FeatureEngineer", test_feature_engineer),
        ("DataPreprocessor", test_preprocessor),
        ("DataBalancer", test_data_balancer),
        ("EnsembleModel", test_ensemble_params)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "="*60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    logger.info("="*60)
    
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        logger.info(f"{test_name}: {status}")
    
    logger.info(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    logger.info(f"–£—Å–ø–µ—à–Ω–æ: {passed}")
    logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}")
    
    if passed == total:
        logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        logger.info("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)