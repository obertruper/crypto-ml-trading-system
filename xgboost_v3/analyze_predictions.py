#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
import logging
from data.loader import DataLoader
from data.preprocessor import DataPreprocessor
from data.feature_engineer import FeatureEngineer
from config import settings

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_data_distribution():
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    loader = DataLoader(settings)
    df = loader.load_data(no_cache=True)
    
    # 2. –ò–Ω–∂–µ–Ω–µ—Ä–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    logger.info("üî¨ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    engineer = FeatureEngineer()
    df = engineer.create_features(df)
    
    # 3. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    logger.info("üîß –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞...")
    preprocessor = DataPreprocessor()
    df = preprocessor.preprocess(df)
    
    # 4. –ê–Ω–∞–ª–∏–∑ expected returns
    logger.info("\nüìä –ê–ù–ê–õ–ò–ó EXPECTED RETURNS:")
    
    for target in ['buy_expected_return', 'sell_expected_return']:
        logger.info(f"\n{target}:")
        data = df[target].astype(float)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"  –°—Ä–µ–¥–Ω–µ–µ: {data.mean():.3f}%")
        logger.info(f"  –ú–µ–¥–∏–∞–Ω–∞: {data.median():.3f}%")
        logger.info(f"  Std: {data.std():.3f}%")
        logger.info(f"  Min: {data.min():.3f}%")
        logger.info(f"  Max: {data.max():.3f}%")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–≥–∞–º
        thresholds = [0, 0.5, 1.0, 1.5, 2.0, 3.0]
        logger.info("\n  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–≥–∞–º:")
        for thresh in thresholds:
            pct = (data > thresh).mean() * 100
            logger.info(f"    > {thresh}%: {pct:.1f}%")
    
    # 5. –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    logger.info("\nüìä –ê–ù–ê–õ–ò–ó –ü–û –°–ò–ú–í–û–õ–ê–ú:")
    for symbol in df['symbol'].unique():
        symbol_data = df[df['symbol'] == symbol]
        logger.info(f"\n{symbol} ({len(symbol_data)} –∑–∞–ø–∏—Å–µ–π):")
        
        for target in ['buy_expected_return', 'sell_expected_return']:
            data = symbol_data[target].astype(float)
            pos_rate = (data > 1.5).mean() * 100
            logger.info(f"  {target} > 1.5%: {pos_rate:.1f}%")
    
    # 6. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
    logger.info("\nüìä –í–†–ï–ú–ï–ù–ù–û–ô –ê–ù–ê–õ–ò–ó:")
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df['date'] = df['timestamp'].dt.date
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
    daily_stats = df.groupby('date').agg({
        'buy_expected_return': lambda x: (x.astype(float) > 1.5).mean() * 100,
        'sell_expected_return': lambda x: (x.astype(float) > 1.5).mean() * 100
    })
    
    logger.info(f"  –î–Ω–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö: {len(daily_stats)}")
    logger.info(f"  Buy > 1.5% (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ –¥–Ω—è–º): {daily_stats['buy_expected_return'].mean():.1f}%")
    logger.info(f"  Buy > 1.5% (std –ø–æ –¥–Ω—è–º): {daily_stats['buy_expected_return'].std():.1f}%")
    
    # 7. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É buy –∏ sell
    buy_binary = (df['buy_expected_return'].astype(float) > 1.5).astype(int)
    sell_binary = (df['sell_expected_return'].astype(float) > 1.5).astype(int)
    correlation = buy_binary.corr(sell_binary)
    logger.info(f"\nüìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É buy –∏ sell —Å–∏–≥–Ω–∞–ª–∞–º–∏: {correlation:.3f}")
    
    # 8. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    logger.info("\nüìä –ê–ù–ê–õ–ò–ó –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í:")
    for symbol in df['symbol'].unique():
        symbol_data = df[df['symbol'] == symbol].copy()
        symbol_data = symbol_data.sort_values('timestamp')
        
        buy_signals = (symbol_data['buy_expected_return'].astype(float) > 1.5)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_changes = buy_signals.diff().abs().sum()
        max_possible_changes = len(buy_signals) - 1
        change_rate = signal_changes / max_possible_changes
        
        logger.info(f"  {symbol} - —á–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {change_rate:.3f}")

if __name__ == "__main__":
    logger.info("="*60)
    logger.info("–ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ô")
    logger.info("="*60)
    analyze_data_distribution()