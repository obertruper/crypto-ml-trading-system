#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π XGBoost v3.0
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
from config import Config
from models import DataBalancer
from models.xgboost_trainer import XGBoostTrainer

print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π XGBoost v3.0")
print("="*60)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫
print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ DataBalancer:")
config = Config()
config.training.balance_method = "smote"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
X = pd.DataFrame(np.random.randn(100, 5), columns=[f'feat_{i}' for i in range(5)])
y = pd.Series(np.concatenate([np.zeros(80), np.ones(20)]))

balancer = DataBalancer(config)
X_balanced, y_balanced = balancer.balance_data(X, y)

print(f"   –î–æ: {dict(zip(*np.unique(y, return_counts=True)))}")
print(f"   –ü–æ—Å–ª–µ: {dict(zip(*np.unique(y_balanced, return_counts=True)))}")
print("   ‚úÖ DataBalancer —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if len(X_balanced) == len(y_balanced) else "   ‚ùå –û—à–∏–±–∫–∞")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: XGBoostTrainer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DataBalancer
print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ XGBoostTrainer:")
trainer = XGBoostTrainer(config, "test_model")
print(f"   –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫: {type(trainer.data_balancer).__name__}")
print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DataBalancer" if hasattr(trainer, 'data_balancer') else "   ‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π BalanceStrategy")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
print(f"   –†–∞–∑–º–µ—Ä –∞–Ω—Å–∞–º–±–ª—è: {config.training.ensemble_size}")
print(f"   –ú–µ—Ç—Ä–∏–∫–∞ –ø–æ—Ä–æ–≥–∞: {config.training.threshold_metric}")
print(f"   –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–≥–∞: {config.training.optimize_threshold}")

print("\n"+"="*60)
print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞!")
print("\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞:")
print("   python xgboost_v3/main.py --test-mode")
print("="*60)