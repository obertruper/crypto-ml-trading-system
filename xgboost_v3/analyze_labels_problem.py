#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ç–∫–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤ –∏ –ø–æ—Ä–æ–≥–∞–º–∏
"""

import pandas as pd
import numpy as np
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from data.loader import DataLoader
from config.settings import Config

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def analyze_labels():
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–∫ –∏ expected returns"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = Config()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    loader = DataLoader(config)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    df = loader.load_data(test_mode=True)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º expected returns
    logger.info("\nüìä –ê–ù–ê–õ–ò–ó EXPECTED RETURNS:")
    logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(df):,}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ buy_expected_return
    logger.info("\nüéØ BUY Expected Returns:")
    logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ: {df['buy_expected_return'].mean():.4f}%")
    logger.info(f"   –ú–µ–¥–∏–∞–Ω–∞: {df['buy_expected_return'].median():.4f}%")
    logger.info(f"   –ú–∏–Ω: {df['buy_expected_return'].min():.4f}%")
    logger.info(f"   –ú–∞–∫—Å: {df['buy_expected_return'].max():.4f}%")
    logger.info(f"   Std: {df['buy_expected_return'].std():.4f}%")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ sell_expected_return
    logger.info("\nüéØ SELL Expected Returns:")
    logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ: {df['sell_expected_return'].mean():.4f}%")
    logger.info(f"   –ú–µ–¥–∏–∞–Ω–∞: {df['sell_expected_return'].median():.4f}%")
    logger.info(f"   –ú–∏–Ω: {df['sell_expected_return'].min():.4f}%")
    logger.info(f"   –ú–∞–∫—Å: {df['sell_expected_return'].max():.4f}%")
    logger.info(f"   Std: {df['sell_expected_return'].std():.4f}%")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
    logger.info("\nüìä –ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–õ–ê–°–°–û–í –î–õ–Ø –†–ê–ó–ù–´–• –ü–û–†–û–ì–û–í:")
    
    thresholds = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0]
    
    for threshold in thresholds:
        buy_positive = (df['buy_expected_return'] > threshold).sum()
        buy_negative = (df['buy_expected_return'] <= threshold).sum()
        buy_ratio = buy_positive / len(df) * 100
        
        sell_positive = (df['sell_expected_return'] > threshold).sum()
        sell_negative = (df['sell_expected_return'] <= threshold).sum()
        sell_ratio = sell_positive / len(df) * 100
        
        logger.info(f"\nüîç –ü–æ—Ä–æ–≥ = {threshold}%:")
        logger.info(f"   BUY:  {buy_positive:,} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö ({buy_ratio:.1f}%), {buy_negative:,} –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö")
        logger.info(f"   SELL: {sell_positive:,} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö ({sell_ratio:.1f}%), {sell_negative:,} –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
        buy_balance = min(buy_positive, buy_negative) / max(buy_positive, buy_negative)
        sell_balance = min(sell_positive, sell_negative) / max(sell_positive, sell_negative)
        
        logger.info(f"   –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤: BUY={buy_balance:.3f}, SELL={sell_balance:.3f}")
        
        if buy_balance < 0.1 or sell_balance < 0.1:
            logger.warning(f"   ‚ö†Ô∏è –°–ò–õ–¨–ù–´–ô –î–ò–°–ë–ê–õ–ê–ù–° –ö–õ–ê–°–°–û–í!")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–≤–∞–Ω—Ç–∏–ª–µ–π
    logger.info("\nüìä –ö–í–ê–ù–¢–ò–õ–ò EXPECTED RETURNS:")
    quantiles = [0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99]
    
    logger.info("\nBUY –∫–≤–∞–Ω—Ç–∏–ª–∏:")
    for q in quantiles:
        value = df['buy_expected_return'].quantile(q)
        logger.info(f"   {q*100:.0f}%: {value:.4f}%")
    
    logger.info("\nSELL –∫–≤–∞–Ω—Ç–∏–ª–∏:")
    for q in quantiles:
        value = df['sell_expected_return'].quantile(q)
        logger.info(f"   {q*100:.0f}%: {value:.4f}%")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
    logger.info("\nüîç –ü–†–û–í–ï–†–ö–ê –ù–ê –ê–ù–û–ú–ê–õ–ò–ò:")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    buy_zeros = (df['buy_expected_return'] == 0).sum()
    sell_zeros = (df['sell_expected_return'] == 0).sum()
    
    logger.info(f"   –ù—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: BUY={buy_zeros:,} ({buy_zeros/len(df)*100:.1f}%), SELL={sell_zeros:,} ({sell_zeros/len(df)*100:.1f}%)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    very_small_threshold = 0.01  # 0.01%
    buy_very_small = (df['buy_expected_return'].abs() < very_small_threshold).sum()
    sell_very_small = (df['sell_expected_return'].abs() < very_small_threshold).sum()
    
    logger.info(f"   –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (<{very_small_threshold}%): BUY={buy_very_small:,} ({buy_very_small/len(df)*100:.1f}%), SELL={sell_very_small:,} ({sell_very_small/len(df)*100:.1f}%)")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    logger.info("\nüìä –ì–ò–°–¢–û–ì–†–ê–ú–ú–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:")
    
    import matplotlib.pyplot as plt
    
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    # Buy expected returns
    axes[0, 0].hist(df['buy_expected_return'], bins=100, alpha=0.7, color='green', edgecolor='black')
    axes[0, 0].axvline(x=1.5, color='red', linestyle='--', label='–ü–æ—Ä–æ–≥ 1.5%')
    axes[0, 0].set_title('Buy Expected Returns')
    axes[0, 0].set_xlabel('Expected Return (%)')
    axes[0, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    axes[0, 0].legend()
    
    # Sell expected returns
    axes[0, 1].hist(df['sell_expected_return'], bins=100, alpha=0.7, color='red', edgecolor='black')
    axes[0, 1].axvline(x=1.5, color='green', linestyle='--', label='–ü–æ—Ä–æ–≥ 1.5%')
    axes[0, 1].set_title('Sell Expected Returns')
    axes[0, 1].set_xlabel('Expected Return (%)')
    axes[0, 1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
    axes[0, 1].legend()
    
    # Buy - –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞
    axes[1, 0].hist(df['buy_expected_return'], bins=100, alpha=0.7, color='green', edgecolor='black', log=True)
    axes[1, 0].axvline(x=1.5, color='red', linestyle='--', label='–ü–æ—Ä–æ–≥ 1.5%')
    axes[1, 0].set_title('Buy Expected Returns (log scale)')
    axes[1, 0].set_xlabel('Expected Return (%)')
    axes[1, 0].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (log)')
    axes[1, 0].legend()
    
    # Sell - –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞
    axes[1, 1].hist(df['sell_expected_return'], bins=100, alpha=0.7, color='red', edgecolor='black', log=True)
    axes[1, 1].axvline(x=1.5, color='green', linestyle='--', label='–ü–æ—Ä–æ–≥ 1.5%')
    axes[1, 1].set_title('Sell Expected Returns (log scale)')
    axes[1, 1].set_xlabel('Expected Return (%)')
    axes[1, 1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (log)')
    axes[1, 1].legend()
    
    plt.tight_layout()
    plt.savefig('expected_returns_distribution.png', dpi=150)
    logger.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: expected_returns_distribution.png")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    logger.info("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤
    best_threshold = None
    best_balance = 0
    
    for threshold in thresholds:
        buy_positive = (df['buy_expected_return'] > threshold).sum()
        buy_negative = (df['buy_expected_return'] <= threshold).sum()
        balance = min(buy_positive, buy_negative) / max(buy_positive, buy_negative)
        
        if balance > best_balance and balance > 0.2:  # –ú–∏–Ω–∏–º—É–º 20% –±–∞–ª–∞–Ω—Å
            best_balance = balance
            best_threshold = threshold
    
    if best_threshold:
        logger.info(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥: {best_threshold}% (–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤: {best_balance:.3f})")
    else:
        logger.info(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ö–æ—Ä–æ—à–∏–π –ø–æ—Ä–æ–≥ —Å –±–∞–ª–∞–Ω—Å–æ–º –∫–ª–∞—Å—Å–æ–≤ > 20%")
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ –¥–∞–Ω–Ω—ã—Ö
    if df['buy_expected_return'].std() < 0.1:
        logger.warning("   ‚ö†Ô∏è –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è expected returns! –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –≤ –¥–æ–ª—è—Ö (0.015), –∞ –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (1.5)")
        logger.info("   üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–Ω–æ–∂–∏—Ç—å expected returns –Ω–∞ 100")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞
    current_threshold = config.training.classification_threshold
    logger.info(f"\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –ü–û–†–û–ì–ê ({current_threshold}%):")
    
    buy_positive = (df['buy_expected_return'] > current_threshold).sum()
    buy_ratio = buy_positive / len(df) * 100
    
    sell_positive = (df['sell_expected_return'] > current_threshold).sum()
    sell_ratio = sell_positive / len(df) * 100
    
    logger.info(f"   BUY:  {buy_positive:,} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö ({buy_ratio:.1f}%)")
    logger.info(f"   SELL: {sell_positive:,} –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö ({sell_ratio:.1f}%)")
    
    if buy_ratio < 5 or sell_ratio < 5:
        logger.error("   ‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ú–µ–Ω–µ–µ 5% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤! –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –æ–±—É—á–∏—Ç—å—Å—è!")
    elif buy_ratio < 10 or sell_ratio < 10:
        logger.warning("   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–µ–Ω–µ–µ 10% –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤. –°–∏–ª—å–Ω—ã–π –¥–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤!")
    else:
        logger.info("   ‚úÖ –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏–µ–º–ª–µ–º—ã–π")


if __name__ == "__main__":
    analyze_labels()