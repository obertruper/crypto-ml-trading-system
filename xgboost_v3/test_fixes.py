#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import pandas as pd
import numpy as np
from imblearn.over_sampling import SMOTE

print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π XGBoost v3.0")
print("="*50)

# –¢–µ—Å—Ç 1: SMOTE —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∏–Ω–¥–µ–∫—Å–æ–≤
print("\n1. –¢–µ—Å—Ç SMOTE –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏:")
X = pd.DataFrame(np.random.randn(100, 5), columns=[f'feat_{i}' for i in range(5)])
y = pd.Series(np.random.choice([0, 1], 100, p=[0.8, 0.2]))

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
X = X.reset_index(drop=True)
y = y.reset_index(drop=True)

print(f"   –î–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {dict(zip(*np.unique(y, return_counts=True)))}")

smote = SMOTE(k_neighbors=3, random_state=42)
X_balanced, y_balanced = smote.fit_resample(X, y)

print(f"   –ü–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: {dict(zip(*np.unique(y_balanced, return_counts=True)))}")
print("   ‚úÖ SMOTE —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

# –¢–µ—Å—Ç 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è numpy —Ç–∏–ø–æ–≤ –¥–ª—è JSON
print("\n2. –¢–µ—Å—Ç JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
import json

data = {
    'float32': np.float32(1.5),
    'float64': np.float64(2.5),
    'int32': np.int32(10),
    'array': np.array([1, 2, 3])
}

def convert_to_native_types(obj):
    if isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, (np.int64, np.int32, np.int16, np.int8)):
        return int(obj)
    elif isinstance(obj, (np.float64, np.float32, np.float16)):
        return float(obj)
    elif isinstance(obj, dict):
        return {k: convert_to_native_types(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [convert_to_native_types(i) for i in obj]
    else:
        return obj

converted_data = convert_to_native_types(data)
json_str = json.dumps(converted_data, indent=2)
print(f"   –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {json_str[:100]}...")
print("   ‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

# –¢–µ—Å—Ç 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
print("\n3. –¢–µ—Å—Ç –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
df = pd.DataFrame({
    'is_bullish': [0, 1, -1, 2, 0],
    'rsi_oversold': [0, 1, -1, 0, 1],
    'regular_feat': [1.5, 2.0, -3.5, 4.0, 0.5]
})

print("   –î–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
print(f"   is_bullish —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ: {df['is_bullish'].unique()}")

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
binary_cols = ['is_bullish', 'rsi_oversold']
for col in binary_cols:
    df[col] = (df[col] != 0).astype(int)

print("   –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
print(f"   is_bullish —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ: {df['is_bullish'].unique()}")
print("   ‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")

print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
print("="*50)