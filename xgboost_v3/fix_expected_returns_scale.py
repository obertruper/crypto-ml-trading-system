#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞ expected returns - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –¥–æ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
"""

import logging
import psycopg2
from psycopg2.extras import RealDictCursor
import sys
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def fix_expected_returns_scale():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç expected returns –∏–∑ –¥–æ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host="localhost",
        port=5555,
        user="ruslan",
        password="",
        database="crypto_trading"
    )
    
    try:
        with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–±
            cursor.execute("""
                SELECT 
                    AVG(buy_expected_return) as avg_buy,
                    AVG(sell_expected_return) as avg_sell,
                    MAX(ABS(buy_expected_return)) as max_buy,
                    MAX(ABS(sell_expected_return)) as max_sell
                FROM processed_market_data
                WHERE symbol IN ('BTCUSDT', 'ETHUSDT')
            """)
            
            result = cursor.fetchone()
            avg_buy, avg_sell, max_buy, max_sell = result
            
            logger.info("üìä –¢–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± expected returns:")
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ buy: {avg_buy:.6f}")
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ sell: {avg_sell:.6f}")
            logger.info(f"   –ú–∞–∫—Å buy: {max_buy:.6f}")
            logger.info(f"   –ú–∞–∫—Å sell: {max_sell:.6f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            if max_buy < 1 and max_sell < 1:
                logger.info("\n‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–æ–ª—è—Ö (< 1), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã...")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è - —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100
                cursor.execute("""
                    UPDATE processed_market_data
                    SET 
                        buy_expected_return = buy_expected_return * 100,
                        sell_expected_return = sell_expected_return * 100
                    WHERE buy_expected_return IS NOT NULL 
                    AND sell_expected_return IS NOT NULL
                """)
                
                updated_rows = cursor.rowcount
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_rows:,} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                cursor.execute("""
                    SELECT 
                        AVG(buy_expected_return) as avg_buy,
                        AVG(sell_expected_return) as avg_sell,
                        MAX(ABS(buy_expected_return)) as max_buy,
                        MAX(ABS(sell_expected_return)) as max_sell
                    FROM processed_market_data
                    WHERE symbol IN ('BTCUSDT', 'ETHUSDT')
                """)
                
                result = cursor.fetchone()
                avg_buy, avg_sell, max_buy, max_sell = result
                
                logger.info("\nüìä –ù–æ–≤—ã–π –º–∞—Å—à—Ç–∞–± expected returns (–≤ %):")
                logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ buy: {avg_buy:.2f}%")
                logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ sell: {avg_sell:.2f}%")
                logger.info(f"   –ú–∞–∫—Å buy: {max_buy:.2f}%")
                logger.info(f"   –ú–∞–∫—Å sell: {max_sell:.2f}%")
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø–æ—Ä–æ–≥–∞ 1.5%
                cursor.execute("""
                    SELECT 
                        symbol,
                        COUNT(*) as total,
                        SUM(CASE WHEN buy_expected_return > 1.5 THEN 1 ELSE 0 END) as buy_positive,
                        SUM(CASE WHEN sell_expected_return > 1.5 THEN 1 ELSE 0 END) as sell_positive
                    FROM processed_market_data
                    WHERE symbol IN ('BTCUSDT', 'ETHUSDT')
                    GROUP BY symbol
                """)
                
                logger.info("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å –ø–æ—Ä–æ–≥–æ–º 1.5%:")
                for row in cursor.fetchall():
                    symbol, total, buy_pos, sell_pos = row
                    buy_ratio = buy_pos / total * 100
                    sell_ratio = sell_pos / total * 100
                    logger.info(f"   {symbol}: BUY={buy_pos:,}/{total:,} ({buy_ratio:.1f}%), SELL={sell_pos:,}/{total:,} ({sell_ratio:.1f}%)")
                
                # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                conn.commit()
                logger.info("\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                
            else:
                logger.info("\n‚úÖ Expected returns —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()


if __name__ == "__main__":
    fix_expected_returns_scale()