"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL
"""

import pandas as pd
import numpy as np
import psycopg2
from psycopg2.extras import RealDictCursor
import json
import logging
from typing import List, Optional, Dict, Tuple
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm

from config import Config

logger = logging.getLogger(__name__)


class DataLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL"""
    
    def __init__(self, config: Config):
        self.config = config
        self.connection = None
        self.technical_indicators = [
            'ema_15', 'adx_val', 'adx_plus_di', 'adx_minus_di', 'adx_diff',
            'macd_val', 'macd_signal', 'macd_hist', 'macd_signal_ratio',
            'sar', 'sar_trend', 'sar_distance',
            'ich_tenkan', 'ich_kijun', 'ich_senkou_a', 'ich_senkou_b',
            'ich_chikou', 'ich_tenkan_kijun_signal', 'ich_price_kumo',
            'aroon_up', 'aroon_down', 'aroon_oscillator',
            'rsi_val', 'rsi_ma', 'stoch_k', 'stoch_d', 'stoch_signal',
            'cci', 'williams_r', 'obv', 'obv_slope', 'cmf', 'mfi',
            'volume_ratio', 'atr', 'bb_upper', 'bb_middle', 'bb_lower',
            'bb_width', 'bb_position', 'kc_upper', 'kc_lower',
            'dc_upper', 'dc_lower'
        ]
        
    def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        try:
            self.connection = psycopg2.connect(
                host=self.config.database.host,
                port=self.config.database.port,
                database=self.config.database.database,
                user=self.config.database.user,
                password=self.config.database.password,
                connect_timeout=10,  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                options='-c statement_timeout=60000'  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
            )
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
            
    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        if self.connection:
            self.connection.close()
            logger.info("üì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
            
    def get_available_symbols(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        query = """
        SELECT DISTINCT symbol 
        FROM processed_market_data 
        ORDER BY symbol
        """
        
        with self.connection.cursor() as cursor:
            cursor.execute(query)
            symbols = [row[0] for row in cursor.fetchall()]
            
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        symbols = [s for s in symbols if s not in self.config.training.exclude_symbols]
        
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return symbols
        
    def load_symbol_data(self, symbol: str) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        query = """
        SELECT 
            timestamp, symbol, open, high, low, close, volume,
            technical_indicators, buy_expected_return, sell_expected_return
        FROM processed_market_data
        WHERE symbol = %s
        ORDER BY timestamp
        """
        
        with self.connection.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute(query, (symbol,))
            data = cursor.fetchall()
            
        if not data:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return pd.DataFrame()
            
        df = pd.DataFrame(data)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º decimal.Decimal –≤ float
        for col in ['open', 'high', 'low', 'close', 'volume', 'buy_expected_return', 'sell_expected_return']:
            if col in df.columns:
                df[col] = df[col].astype(float)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df = self._extract_technical_indicators(df)
        
        # Expected returns —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        # df = self._extract_expected_returns(df)
        
        logger.info(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
        return df
        
    def load_data(self, symbols: Optional[List[str]] = None, 
                  max_workers: Optional[int] = None) -> pd.DataFrame:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (None = –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)
            max_workers: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            DataFrame —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if symbols is None:
            symbols = self.get_available_symbols()
            
        if self.config.training.test_mode:
            symbols = self.config.training.test_symbols
            logger.info(f"‚ö° –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ {symbols}")
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        import multiprocessing
        cpu_count = multiprocessing.cpu_count()
        
        if max_workers is None:
            # –î–ª—è –º–æ—â–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
            if cpu_count > 64:
                max_workers = min(50, cpu_count // 2)
                logger.info(f"üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–æ—â–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {cpu_count} CPU, –∏—Å–ø–æ–ª—å–∑—É–µ–º {max_workers} –≤–æ—Ä–∫–µ—Ä–æ–≤")
            else:
                max_workers = min(10, cpu_count)
            
        logger.info(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        all_data = []
        
        # –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –±–æ–ª—å—à–æ–π –ø–∞–º—è—Ç—å—é
        import psutil
        available_memory_gb = psutil.virtual_memory().available / (1024**3)
        
        if available_memory_gb > 100:  # –ë–æ–ª—å—à–µ 100 GB —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏
            batch_size = 50
            logger.info(f"üíæ –î–æ—Å—Ç—É–ø–Ω–æ {available_memory_gb:.1f} GB RAM, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–∏ –ø–æ {batch_size}")
        else:
            batch_size = 10
            
        batches = [symbols[i:i+batch_size] for i in range(0, len(symbols), batch_size)]
        
        with tqdm(total=len(batches), desc="–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞—Ç—á–µ–π") as pbar:
            for batch in batches:
                with ThreadPoolExecutor(max_workers=max_workers) as executor:
                    logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á –∏–∑ {len(batch)} —Å–∏–º–≤–æ–ª–æ–≤...")
                    futures = {
                        executor.submit(self.load_symbol_data, symbol): symbol
                        for symbol in batch
                    }
                    
                    for future in as_completed(futures, timeout=300):  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –Ω–∞ –±–∞—Ç—á
                        try:
                            df = future.result(timeout=60)  # 1 –º–∏–Ω—É—Ç–∞ —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–∏–º–≤–æ–ª
                            if not df.empty:
                                all_data.append(df)
                                logger.debug(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {futures[future]}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                        except Exception as e:
                            symbol = futures[future]
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
                            
                pbar.update(1)
                
        if not all_data:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        df = pd.concat(all_data, ignore_index=True)
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π")
        
        return df
        
    def load_market_data(self, reference_symbol: str = "BTCUSDT") -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"""
        query = """
        SELECT timestamp, close, volume
        FROM processed_market_data
        WHERE symbol = %s
        ORDER BY timestamp
        """
        
        with self.connection.cursor(cursor_factory=RealDictCursor) as cursor:
            cursor.execute(query, (reference_symbol,))
            data = cursor.fetchall()
            
        df = pd.DataFrame(data)
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {reference_symbol}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
        return df
        
    def _extract_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ JSON"""
        logger.info("   üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ JSON...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        indicators_dict = {}
        for idx, row in df.iterrows():
            if row['technical_indicators']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–∂–µ —Å–ª–æ–≤–∞—Ä–µ–º –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–æ–π
                if isinstance(row['technical_indicators'], dict):
                    indicators = row['technical_indicators']
                else:
                    indicators = json.loads(row['technical_indicators'])
                    
                for indicator in self.technical_indicators:
                    if indicator not in indicators_dict:
                        indicators_dict[indicator] = []
                    indicators_dict[indicator].append(indicators.get(indicator))
                    
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ DataFrame
        for indicator, values in indicators_dict.items():
            df[indicator] = values
            
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é JSON –∫–æ–ª–æ–Ω–∫—É
        df.drop('technical_indicators', axis=1, inplace=True)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        found_indicators = [ind for ind in self.technical_indicators if ind in df.columns]
        missing_indicators = [ind for ind in self.technical_indicators if ind not in df.columns]
        
        logger.info(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_indicators)} –∏–∑ {len(self.technical_indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        
        if missing_indicators:
            logger.warning(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {missing_indicators[:10]}...")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        logger.info(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º:")
        
        # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        trend_indicators = ['ema_15', 'adx_val', 'macd_val', 'sar', 'ich_tenkan', 'aroon_up']
        trend_found = sum(1 for ind in trend_indicators if ind in df.columns)
        logger.info(f"      –¢—Ä–µ–Ω–¥–æ–≤—ã–µ: {trend_found}/{len(trend_indicators)}")
        
        # –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã
        oscillators = ['rsi_val', 'stoch_k', 'cci', 'williams_r', 'mfi']
        osc_found = sum(1 for ind in oscillators if ind in df.columns)
        logger.info(f"      –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã: {osc_found}/{len(oscillators)}")
        
        # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        volume_indicators = ['obv', 'cmf', 'mfi', 'volume_ratio']
        vol_found = sum(1 for ind in volume_indicators if ind in df.columns)
        logger.info(f"      –û–±—ä–µ–º–Ω—ã–µ: {vol_found}/{len(volume_indicators)}")
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility_indicators = ['atr', 'bb_upper', 'bb_width', 'kc_upper', 'dc_upper']
        volat_found = sum(1 for ind in volatility_indicators if ind in df.columns)
        logger.info(f"      –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volat_found}/{len(volatility_indicators)}")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        if 'rsi_val' in df.columns:
            logger.info(f"   üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
            logger.info(f"      RSI: min={df['rsi_val'].min():.2f}, max={df['rsi_val'].max():.2f}, mean={df['rsi_val'].mean():.2f}")
            
        if 'macd_hist' in df.columns:
            logger.info(f"      MACD hist: min={df['macd_hist'].min():.4f}, max={df['macd_hist'].max():.4f}, mean={df['macd_hist'].mean():.4f}")
            
        if 'adx_val' in df.columns:
            logger.info(f"      ADX: min={df['adx_val'].min():.2f}, max={df['adx_val'].max():.2f}, mean={df['adx_val'].mean():.2f}")
            
        if 'bb_position' in df.columns:
            logger.info(f"      BB position: min={df['bb_position'].min():.2f}, max={df['bb_position'].max():.2f}")
            
        if 'volume_ratio' in df.columns:
            logger.info(f"      Volume ratio: min={df['volume_ratio'].min():.2f}, max={df['volume_ratio'].max():.2f}")
            
        return df
        
    def _extract_expected_returns(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ expected returns –∏–∑ JSON"""
        if 'expected_returns' not in df.columns:
            logger.warning("   ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ expected_returns –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return df
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º buy –∏ sell returns
        buy_returns = []
        sell_returns = []
        
        for idx, row in df.iterrows():
            if row['expected_returns']:
                returns = json.loads(row['expected_returns'])
                buy_returns.append(returns.get('buy_expected_return'))
                sell_returns.append(returns.get('sell_expected_return'))
            else:
                buy_returns.append(None)
                sell_returns.append(None)
                
        df['buy_expected_return'] = buy_returns
        df['sell_expected_return'] = sell_returns
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é JSON –∫–æ–ª–æ–Ω–∫—É
        df.drop('expected_returns', axis=1, inplace=True)
        
        logger.info("   ‚úÖ –¶–µ–ª–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¢–û–õ–¨–ö–û –∫–∞–∫ targets")
        
        return df
        
    def validate_data(self, df: pd.DataFrame) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if len(df) < 1000:
            logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
        missing_counts = df.isnull().sum()
        high_missing = missing_counts[missing_counts > len(df) * 0.1]
        if not high_missing.empty:
            logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–ø—É—Å–∫–æ–≤: {high_missing.index.tolist()}")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if 'buy_expected_return' not in df.columns or 'sell_expected_return' not in df.columns:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
        numeric_df = df.select_dtypes(include=[np.number])
        inf_mask = np.isinf(numeric_df).any()
        inf_columns = numeric_df.columns[inf_mask].tolist()
        if inf_columns:
            logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∏ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {inf_columns}")
            
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
        return True