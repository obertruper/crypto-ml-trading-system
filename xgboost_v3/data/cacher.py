"""
–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
"""

import pandas as pd
import logging
from pathlib import Path
from typing import Optional

from config import Config

logger = logging.getLogger(__name__)


class CacheManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, config: Config):
        self.config = config
        self.cache_dir = Path("cache")
        self.cache_dir.mkdir(exist_ok=True)
        
    def get_cache_path(self) -> Path:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞"""
        if self.config.training.test_mode:
            return self.cache_dir / "test_data.parquet"
        else:
            return self.cache_dir / "full_data.parquet"
            
    def load_from_cache(self) -> Optional[pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        cache_path = self.get_cache_path()
        
        if not cache_path.exists():
            logger.info("üì≠ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        try:
            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞: {cache_path}")
            df = pd.read_parquet(cache_path)
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞")
            return df
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
            return None
            
    def save_to_cache(self, df: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        cache_path = self.get_cache_path()
        
        try:
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à: {cache_path}")
            df.to_parquet(cache_path, index=False)
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df):,} –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
            
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        cache_files = list(self.cache_dir.glob("*.parquet"))
        
        for file in cache_files:
            file.unlink()
            
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(cache_files)} —Ñ–∞–π–ª–æ–≤ –∫—ç—à–∞")