"""
–ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö BTC –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import pandas as pd
import numpy as np
import logging
from typing import Optional, Dict
from pathlib import Path
import psycopg2
from psycopg2.extras import RealDictCursor

from config import Config, BTC_DATA_PARAMS, MARKET_FEATURES

logger = logging.getLogger(__name__)


class BTCDataLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö BTC"""
    
    def __init__(self, config: Config):
        self.config = config
        self.btc_symbol = BTC_DATA_PARAMS['symbol']
        self.cache = {}
        
    def load_btc_data(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ BTC –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ DataFrame
        
        Args:
            df: DataFrame —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å timestamp)
            
        Returns:
            DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π btc_close
        """
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö {self.btc_symbol}...")
        
        if 'timestamp' not in df.columns:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ timestamp –≤ DataFrame")
            return df
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        min_timestamp = df['timestamp'].min()
        max_timestamp = df['timestamp'].max()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        btc_data = self._load_from_database(min_timestamp, max_timestamp)
        
        if btc_data is None or btc_data.empty:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ {self.btc_symbol} –∏–∑ –ë–î")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É fallback
            if not BTC_DATA_PARAMS.get('fallback_to_synthetic', False):
                logger.error("‚ùå –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame")
                return df
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω fallback –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            if BTC_DATA_PARAMS['fallback_to_synthetic']:
                logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ BTC! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                df['btc_close'] = df['close'] * np.random.uniform(
                    MARKET_FEATURES['btc_synthetic_min'], 
                    MARKET_FEATURES['btc_synthetic_max'], 
                    len(df)
                )
            else:
                logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ {self.btc_symbol} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ BTC –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
                return df
        else:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(btc_data)} –∑–∞–ø–∏—Å–µ–π {self.btc_symbol}")
            
            # Merge –ø–æ timestamp
            df = df.merge(
                btc_data[['timestamp', 'close']].rename(columns={'close': 'btc_close'}),
                on='timestamp',
                how='left'
            )
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –º–µ—Ç–æ–¥–æ–º forward fill
            if df['btc_close'].isnull().any():
                null_count = df['btc_close'].isnull().sum()
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {null_count} –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö BTC, –∑–∞–ø–æ–ª–Ω—è–µ–º...")
                df['btc_close'] = df['btc_close'].ffill().bfill()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            stats = self.validate_btc_coverage(df)
            logger.info(f"üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö BTC: {stats['coverage']:.1f}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            if not stats['is_synthetic']:
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BTC")
            else:
                logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö!")
                
        return df
        
    def _load_from_database(self, min_timestamp: int, max_timestamp: int) -> Optional[pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ BTC –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            min_timestamp: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            max_timestamp: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ BTC –∏–ª–∏ None
        """
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            conn_params = {
                'host': self.config.database.host,
                'port': self.config.database.port,
                'database': self.config.database.database,
                'user': self.config.database.user,
                'password': self.config.database.password,
                'connect_timeout': 10,  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                'options': '-c statement_timeout=30000'  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
            }
            
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î {self.config.database.host}:{self.config.database.port}...")
            with psycopg2.connect(**conn_params) as conn:
                with conn.cursor(cursor_factory=RealDictCursor) as cursor:
                    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö BTC
                    query = """
                        SELECT timestamp, close
                        FROM raw_market_data
                        WHERE symbol = %s
                        AND timestamp >= %s
                        AND timestamp <= %s
                        ORDER BY timestamp
                    """
                    
                    logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è {self.btc_symbol} —Å {min_timestamp} –ø–æ {max_timestamp}...")
                    cursor.execute(query, (self.btc_symbol, int(min_timestamp), int(max_timestamp)))
                    
                    logger.info("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î...")
                    results = cursor.fetchall()
                    
                    if results:
                        logger.info(f"üìä –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º {len(results)} –∑–∞–ø–∏—Å–µ–π –≤ DataFrame...")
                        df = pd.DataFrame(results)
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º decimal –≤ float
                        df['close'] = df['close'].astype(float)
                        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π {self.btc_symbol} –∏–∑ –ë–î")
                        return df
                    else:
                        logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ {self.btc_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
            return None
            
    def validate_btc_coverage(self, df: pd.DataFrame) -> Dict[str, float]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö BTC
        
        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è btc_close
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–∫—Ä—ã—Ç–∏—è
        """
        if 'btc_close' not in df.columns:
            return {'coverage': 0.0, 'is_synthetic': True}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏–º–µ—Ç—å –≤—ã—Å–æ–∫—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        # –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±—É–¥–µ—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.8-1.2
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–±–∞ —Å—Ç–æ–ª–±—Ü–∞ float
        btc_close = df['btc_close'].astype(float)
        close = df['close'].astype(float)
        ratio = btc_close / close
        is_synthetic = (ratio.min() >= 0.79) and (ratio.max() <= 1.21) and (ratio.std() < 0.1)
        
        # –°—á–∏—Ç–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
        non_null_count = df['btc_close'].notna().sum()
        coverage = non_null_count / len(df) * 100
        
        stats = {
            'coverage': coverage,
            'is_synthetic': is_synthetic,
            'non_null_count': non_null_count,
            'total_count': len(df)
        }
        
        if is_synthetic:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ BTC!")
        else:
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BTC (–ø–æ–∫—Ä—ã—Ç–∏–µ: {coverage:.1f}%)")
            
        return stats


def update_feature_engineer_btc_loading():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ _create_market_features –≤ feature_engineer.py
    –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BTCDataLoader
    """
    update_code = '''
    def _create_market_features(self, df: pd.DataFrame) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        logger.info("üåç –°–æ–∑–¥–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ BTC –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        if 'btc_close' not in df.columns:
            from data.btc_data_loader import BTCDataLoader
            btc_loader = BTCDataLoader(self.config)
            df = btc_loader.load_btc_data(df)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
            if 'btc_close' not in df.columns:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ BTC, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
                return df
        
        # –î–∞–ª–µ–µ –∏–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...
    '''
    
    logger.info("‚ÑπÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BTCDataLoader –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ _create_market_features –≤ feature_engineer.py")
    logger.info("‚ÑπÔ∏è –ó–∞–º–µ–Ω–∏—Ç–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—ã–∑–æ–≤ BTCDataLoader")