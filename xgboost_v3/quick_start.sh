#!/bin/bash

# üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ ML TRADING SYSTEM v3.0
# –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ROC-AUC 0.5

echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                     üöÄ ML TRADING SYSTEM v3.0                 ‚ïë"
echo "‚ïë                                                                ‚ïë"
echo "‚ïë  –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ROC-AUC 0.5 —á–µ—Ä–µ–∑:                         ‚ïë"
echo "‚ïë  ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏                  ‚ïë"
echo "‚ïë  ‚Ä¢ Confidence-based –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è                              ‚ïë"
echo "‚ïë  ‚Ä¢ –ê–Ω—Å–∞–º–±–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π                                         ‚ïë"
echo "‚ïë  ‚Ä¢ Walk-forward –∞–Ω–∞–ª–∏–∑                                        ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ config.yaml
if [ ! -f "config.yaml" ]; then
    echo "‚ö†Ô∏è –§–∞–π–ª config.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö–æ–ø–∏—Ä—É—é –∏–∑ logs..."
    if [ -f "logs/xgboost_v3_20250614_161646/config.yaml" ]; then
        cp logs/xgboost_v3_20250614_161646/config.yaml .
        echo "‚úÖ config.yaml —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
    else
        echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω config.yaml –Ω–∏ –≤ –∫–æ—Ä–Ω–µ, –Ω–∏ –≤ logs/"
        exit 1
    fi
fi

echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:"
echo "1) üß™ –¢–µ—Å—Ç (–±—ã—Å—Ç—Ä–æ, 1 —Å–∏–º–≤–æ–ª, 50k –∑–∞–ø–∏—Å–µ–π)"
echo "2) üöÄ –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)"
echo "3) üìä –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –æ–±—É—á–µ–Ω–∏—è)"
echo "4) ‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"

read -p "–í–∞—à –≤—ã–±–æ—Ä [1-4]: " choice

case $choice in
    1)
        echo ""
        echo "üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–û–ì–û –†–ï–ñ–ò–ú–ê..."
        echo "–≠—Ç–æ –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç"
        python run_ml_trading.py --mode test
        ;;
    2)
        echo ""
        echo "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã:"
        echo "1) BTCUSDT ETHUSDT (–±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä)"
        echo "2) BTCUSDT ETHUSDT BNBUSDT XRPUSDT (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)"
        echo "3) –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"
        
        read -p "–í–∞—à –≤—ã–±–æ—Ä [1-3]: " symbol_choice
        
        case $symbol_choice in
            1)
                symbols="BTCUSDT ETHUSDT"
                ;;
            2)
                symbols="BTCUSDT ETHUSDT BNBUSDT XRPUSDT"
                ;;
            3)
                read -p "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: " symbols
                ;;
            *)
                symbols="BTCUSDT ETHUSDT"
                ;;
        esac
        
        echo ""
        echo "üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø..."
        echo "–°–∏–º–≤–æ–ª—ã: $symbols"
        echo "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 –º–∏–Ω—É—Ç"
        python run_ml_trading.py --mode full --symbols $symbols
        ;;
    3)
        echo ""
        echo "üìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:"
        psql -U ruslan -d crypto_trading -p 5555 -c "
        SELECT 
            'raw_market_data' as table_name,
            COUNT(*) as records,
            COUNT(DISTINCT symbol) as symbols,
            MIN(timestamp) as start_date,
            MAX(timestamp) as end_date
        FROM raw_market_data
        UNION ALL
        SELECT 
            'processed_market_data',
            COUNT(*),
            COUNT(DISTINCT symbol),
            MIN(timestamp::text),
            MAX(timestamp::text)
        FROM processed_market_data
        UNION ALL
        SELECT 
            'simple_targets',
            COUNT(*),
            COUNT(DISTINCT symbol),
            MIN(timestamp::text),
            MAX(timestamp::text)
        FROM simple_targets
        WHERE EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'simple_targets')
        UNION ALL
        SELECT 
            'advanced_targets',
            COUNT(*),
            COUNT(DISTINCT symbol),
            MIN(timestamp::text),
            MAX(timestamp::text)
        FROM advanced_targets
        WHERE EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'advanced_targets');
        "
        ;;
    4)
        echo ""
        echo "üìñ –°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú:"
        echo ""
        echo "–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:"
        echo "# –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç"
        echo "python run_ml_trading.py --mode test"
        echo ""
        echo "# –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        echo "python run_ml_trading.py --mode full --symbols BTCUSDT ETHUSDT"
        echo ""
        echo "# –†–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã"
        echo "python run_ml_trading.py --mode test --horizon 4hour"
        echo ""
        echo "# –ë–æ–ª—å—à–µ CV folds"
        echo "python run_ml_trading.py --mode full --cv-splits 10"
        echo ""
        echo "–û–¢–î–ï–õ–¨–ù–´–ï –ú–û–î–£–õ–ò:"
        echo "# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
        echo "python init_simple_targets.py --test"
        echo ""
        echo "# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"  
        echo "python advanced_trading_system.py --test"
        echo ""
        echo "# –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π"
        echo "python train_advanced_models.py --symbols BTCUSDT"
        echo ""
        echo "–ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:"
        echo "# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –≤ –ë–î"
        echo "psql -U ruslan -d crypto_trading -p 5555 -c \"SELECT COUNT(*) FROM advanced_targets;\""
        echo ""
        echo "# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏"
        echo "ls -la ml_models_*/"
        echo "cat ml_models_*/final_report.txt"
        ;;
    *)
        echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
        exit 1
        ;;
esac

echo ""
echo "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ ml_models_*/"
echo "2. –û—Ç–∫—Ä–æ–π—Ç–µ final_report.txt –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
echo "3. –ï—Å–ª–∏ ROC-AUC > 0.55 - –º–æ–¥–µ–ª—å —É–ª—É—á—à–µ–Ω–∞!"
echo "4. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö–æ—Ä–æ—à–∏–µ - –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –≤ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
echo ""
echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "ls -la ml_models_*/"
echo "cat ml_models_*/final_report.txt"
echo "python -c \"import joblib; model = joblib.load('ml_models_*/ensemble_model.pkl'); print('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')\""