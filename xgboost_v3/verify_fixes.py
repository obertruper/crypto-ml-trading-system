#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π XGBoost v3.0
"""

import sys
sys.path.append('.')

import pandas as pd
import numpy as np
from config import Config
from data import FeatureEngineer
from models import DataBalancer

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π XGBoost v3.0")
print("="*60)

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
df_test = pd.DataFrame({
    'close': [100, 101, 99, 102, 98],
    'open': [99, 102, 100, 101, 99],
    'high': [102, 103, 101, 104, 100],
    'low': [98, 100, 98, 100, 97],
    'volume': [1000, 1200, 900, 1100, 950],
    'rsi_val': [30, 70, 50, 80, 20],
    'adx_val': [20, 30, 25, 35, 15],
    'is_bullish': [1, -1, 0, 1, -1]  # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
})

config = Config()
fe = FeatureEngineer(config)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º validate_features
df_validated = fe.validate_features(df_test.copy())
print(f"   is_bullish –¥–æ: {df_test['is_bullish'].unique()}")
print(f"   is_bullish –ø–æ—Å–ª–µ: {df_validated['is_bullish'].unique()}")
print("   ‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã" if set(df_validated['is_bullish'].unique()) <= {0, 1} else "   ‚ùå –û—à–∏–±–∫–∞")

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞
print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞:")
X = pd.DataFrame(np.random.randn(100, 5), columns=[f'feat_{i}' for i in range(5)])
# –î–æ–±–∞–≤–ª—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
X['is_feature'] = np.random.choice([0, 1], 100)
X['binary_feat'] = np.random.choice([0, 1], 100)
y = pd.Series(np.concatenate([np.zeros(80), np.ones(20)]))  # –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã

balancer = DataBalancer(config)
X_balanced, y_balanced = balancer.balance_data(X, y)

print(f"   –î–æ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: Class 0: {(y==0).sum()}, Class 1: {(y==1).sum()}")
print(f"   –ü–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏: Class 0: {(y_balanced==0).sum()}, Class 1: {(y_balanced==1).sum()}")
print(f"   –†–∞–∑–º–µ—Ä X: {X.shape} -> {X_balanced.shape}")
print("   ‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if len(X_balanced) == len(y_balanced) else "   ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏")

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –∞–Ω—Å–∞–º–±–ª—è:")

# –°–∏–º—É–ª—è—Ü–∏—è scores –º–æ–¥–µ–ª–µ–π
scores_similar = np.array([0.850, 0.851, 0.849])  # –û—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏–µ
scores_different = np.array([0.750, 0.850, 0.800])  # –†–∞–∑–Ω—ã–µ

from models.ensemble import EnsembleModel
ensemble = EnsembleModel(config)

# –¢–µ—Å—Ç 1: –ø–æ—Ö–æ–∂–∏–µ scores
scores = scores_similar
scores_normalized = (scores - scores.mean()) / (scores.std() + 1e-8)
scores_normalized = np.clip(scores_normalized, -2, 2)
exp_scores = np.exp(scores_normalized)
weights = exp_scores / exp_scores.sum()

print(f"   –ü–æ—Ö–æ–∂–∏–µ scores: {scores}")
print(f"   –í–µ—Å–∞: {weights}")
print(f"   –ú–∞–∫—Å –≤–µ—Å: {weights.max():.3f}")

# –¢–µ—Å—Ç 2: —Ä–∞–∑–Ω—ã–µ scores
scores = scores_different
if scores.std() > 0.01:
    scores_normalized = (scores - scores.mean()) / (scores.std() + 1e-8)
    scores_normalized = np.clip(scores_normalized, -2, 2)
    exp_scores = np.exp(scores_normalized)
    weights = exp_scores / exp_scores.sum()
    
    if weights.max() > 0.9:
        weights = 0.8 * weights + 0.2 * (np.ones(len(scores)) / len(scores))

print(f"\n   –†–∞–∑–Ω—ã–µ scores: {scores}")
print(f"   –í–µ—Å–∞: {weights}")
print(f"   –ú–∞–∫—Å –≤–µ—Å: {weights.max():.3f}")
print("   ‚úÖ –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if weights.max() < 0.9 else "   ‚ùå –°–ª–∏—à–∫–æ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞")

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
from data import DataPreprocessor
df_const = pd.DataFrame({
    'feature1': [1, 1, 1, 1, 1],
    'feature2': [1, 2, 3, 4, 5],
    'constant_feat': [0, 0, 0, 0, 0],
    'buy_expected_return': [0.5, -0.3, 1.2, -0.8, 0.2],
    'sell_expected_return': [-0.2, 0.8, -1.0, 0.3, -0.5]
})

preprocessor = DataPreprocessor(config)
# –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_columns = ['feature1', 'feature2', 'constant_feat']
X = df_const[feature_columns].copy()

constant_features = []
for col in X.columns:
    if X[col].nunique() <= 1:
        constant_features.append(col)

print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(constant_features)}")
print(f"   –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {constant_features}")
print("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç" if 'constant_feat' in constant_features else "   ‚ùå –û—à–∏–±–∫–∞")

print("\n"+"="*60)
print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ optimize_threshold=True –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞")
print("   3. –£–≤–µ–ª–∏—á—å—Ç–µ ensemble_size –¥–æ 3-5 –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
print("="*60)