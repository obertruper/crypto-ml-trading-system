#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ expected returns
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
import psycopg2
from psycopg2.extras import RealDictCursor
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

def check_expected_returns():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ expected returns –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host="localhost",
        port=5555,
        database="crypto_trading",
        user="ruslan"
    )
    
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã processed_market_data...")
            cursor.execute("""
                SELECT COUNT(*) as total, 
                       COUNT(DISTINCT symbol) as symbols,
                       MIN(timestamp) as min_date,
                       MAX(timestamp) as max_date
                FROM processed_market_data
            """)
            info = cursor.fetchone()
            logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {info['total']:,}")
            logger.info(f"   –°–∏–º–≤–æ–ª–æ–≤: {info['symbols']}")
            logger.info(f"   –ü–µ—Ä–∏–æ–¥: {info['min_date']} - {info['max_date']}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ expected returns
            logger.info("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ expected returns...")
            cursor.execute("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(buy_expected_return) as buy_not_null,
                    COUNT(sell_expected_return) as sell_not_null,
                    AVG(buy_expected_return) as buy_avg,
                    MIN(buy_expected_return) as buy_min,
                    MAX(buy_expected_return) as buy_max,
                    AVG(sell_expected_return) as sell_avg,
                    MIN(sell_expected_return) as sell_min,
                    MAX(sell_expected_return) as sell_max
                FROM processed_market_data
                WHERE buy_expected_return IS NOT NULL
            """)
            stats = cursor.fetchone()
            
            logger.info(f"   –ó–∞–ø–∏—Å–µ–π —Å expected returns: {stats['buy_not_null']:,}")
            logger.info(f"   Buy Expected Return:")
            logger.info(f"      –°—Ä–µ–¥–Ω–µ–µ: {stats['buy_avg']:.2f}%")
            logger.info(f"      –ú–∏–Ω: {stats['buy_min']:.2f}%")
            logger.info(f"      –ú–∞–∫—Å: {stats['buy_max']:.2f}%")
            logger.info(f"   Sell Expected Return:")
            logger.info(f"      –°—Ä–µ–¥–Ω–µ–µ: {stats['sell_avg']:.2f}%")
            logger.info(f"      –ú–∏–Ω: {stats['sell_min']:.2f}%")
            logger.info(f"      –ú–∞–∫—Å: {stats['sell_max']:.2f}%")
            
            # 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä–æ–≥–∞–º
            logger.info("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ expected returns –ø–æ –ø–æ—Ä–æ–≥–∞–º...")
            thresholds = [0, 0.5, 1.0, 1.5, 2.0]
            
            for threshold in thresholds:
                cursor.execute(f"""
                    SELECT 
                        COUNT(CASE WHEN buy_expected_return > {threshold} THEN 1 END) as buy_above,
                        COUNT(CASE WHEN sell_expected_return > {threshold} THEN 1 END) as sell_above,
                        COUNT(*) as total
                    FROM processed_market_data
                    WHERE buy_expected_return IS NOT NULL
                """)
                dist = cursor.fetchone()
                buy_pct = dist['buy_above'] / dist['total'] * 100 if dist['total'] > 0 else 0
                sell_pct = dist['sell_above'] / dist['total'] * 100 if dist['total'] > 0 else 0
                logger.info(f"   > {threshold}%: Buy={buy_pct:.1f}%, Sell={sell_pct:.1f}%")
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            logger.info("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
            cursor.execute("""
                SELECT 
                    symbol,
                    COUNT(*) as records,
                    technical_indicators
                FROM processed_market_data
                WHERE technical_indicators IS NOT NULL
                GROUP BY symbol, technical_indicators
                LIMIT 1
            """)
            sample = cursor.fetchone()
            
            if sample and sample['technical_indicators']:
                indicators = list(sample['technical_indicators'].keys())
                logger.info(f"   –ù–∞–π–¥–µ–Ω–æ {len(indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
                logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã: {', '.join(indicators[:10])}")
            else:
                logger.warning("   ‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            logger.info("\nüìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–ø —Å–∏–º–≤–æ–ª–∞–º...")
            cursor.execute("""
                SELECT 
                    symbol,
                    COUNT(*) as records,
                    AVG(buy_expected_return) as buy_avg,
                    AVG(sell_expected_return) as sell_avg,
                    COUNT(CASE WHEN buy_expected_return > 0.5 THEN 1 END) * 100.0 / COUNT(*) as buy_profitable_pct,
                    COUNT(CASE WHEN sell_expected_return > 0.5 THEN 1 END) * 100.0 / COUNT(*) as sell_profitable_pct
                FROM processed_market_data
                WHERE buy_expected_return IS NOT NULL
                GROUP BY symbol
                ORDER BY records DESC
                LIMIT 10
            """)
            
            for row in cursor.fetchall():
                logger.info(f"   {row['symbol']:10} Records: {row['records']:6,}, "
                          f"Buy avg: {row['buy_avg']:5.2f}% ({row['buy_profitable_pct']:4.1f}% > 0.5%), "
                          f"Sell avg: {row['sell_avg']:5.2f}% ({row['sell_profitable_pct']:4.1f}% > 0.5%)")
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
            logger.info("\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏...")
            cursor.execute("""
                SELECT COUNT(*) as anomalies
                FROM processed_market_data
                WHERE buy_expected_return IS NOT NULL
                AND (buy_expected_return > 50 OR buy_expected_return < -50
                     OR sell_expected_return > 50 OR sell_expected_return < -50)
            """)
            anomalies = cursor.fetchone()
            if anomalies['anomalies'] > 0:
                logger.warning(f"   –ù–∞–π–¥–µ–Ω–æ {anomalies['anomalies']} –∑–∞–ø–∏—Å–µ–π —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (>50%)")
            else:
                logger.info("   ‚úÖ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    logger.info("="*60)
    logger.info("–ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–• –î–õ–Ø XGBOOST")
    logger.info("="*60)
    check_expected_returns()
    logger.info("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")