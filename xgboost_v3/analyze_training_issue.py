#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—É—á–µ–Ω–∏–µ–º XGBoost v3
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
import psycopg2
from psycopg2.extras import RealDictCursor
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

def analyze_data_distribution():
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ expected returns"""
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host="localhost",
        port=5555,
        database="crypto_trading",
        user="ruslan"
    )
    
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # –ü–æ–ª—É—á–∞–µ–º expected returns
            logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ expected returns...")
            cursor.execute("""
                SELECT buy_expected_return, sell_expected_return
                FROM processed_market_data
                WHERE symbol IN ('BTCUSDT', 'ETHUSDT')
                AND buy_expected_return IS NOT NULL
                ORDER BY timestamp DESC
                LIMIT 200000
            """)
            
            data = cursor.fetchall()
            df = pd.DataFrame(data)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
            df['buy_expected_return'] = df['buy_expected_return'].astype(float)
            df['sell_expected_return'] = df['sell_expected_return'].astype(float)
            
            logger.info(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            logger.info("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ expected returns:")
            logger.info(f"   Buy - mean: {df['buy_expected_return'].mean():.3f}%, std: {df['buy_expected_return'].std():.3f}%")
            logger.info(f"   Buy - min: {df['buy_expected_return'].min():.3f}%, max: {df['buy_expected_return'].max():.3f}%")
            logger.info(f"   Buy - –∫–≤–∞–Ω—Ç–∏–ª–∏: 25%={df['buy_expected_return'].quantile(0.25):.3f}%, "
                       f"50%={df['buy_expected_return'].quantile(0.5):.3f}%, "
                       f"75%={df['buy_expected_return'].quantile(0.75):.3f}%, "
                       f"95%={df['buy_expected_return'].quantile(0.95):.3f}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
            thresholds = [0.5, 1.0, 1.5, 2.0, 2.5, 3.0]
            
            logger.info("\nüìä –ë–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö:")
            logger.info("–ü–æ—Ä–æ–≥ | Buy Class 1 % | scale_pos_weight | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
            logger.info("-" * 70)
            
            for threshold in thresholds:
                buy_class_1 = (df['buy_expected_return'] > threshold).mean() * 100
                
                if buy_class_1 > 0:
                    scale_pos_weight = (100 - buy_class_1) / buy_class_1
                    # –° —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –∫–æ–¥–µ (70% –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ)
                    adjusted_spw = min(3.0, scale_pos_weight * 0.7)
                else:
                    scale_pos_weight = np.inf
                    adjusted_spw = 3.0
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                if buy_class_1 < 5:
                    rec = "‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö"
                elif buy_class_1 > 40:
                    rec = "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö"
                elif 15 <= buy_class_1 <= 25:
                    rec = "‚úÖ –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å"
                else:
                    rec = "‚ö†Ô∏è –ü—Ä–∏–µ–º–ª–µ–º–æ"
                
                logger.info(f"{threshold:4.1f}% | {buy_class_1:13.1f}% | {adjusted_spw:16.2f} | {rec}")
            
            # –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ expected returns
            logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ expected returns:")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –ø–æ—Ä–æ–≥–∞ 1.5%
            y_buy = (df['buy_expected_return'] > 1.5).astype(int)
            
            # –°–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ returns –≤ –∫–∞–∂–¥–æ–º –∫–ª–∞—Å—Å–µ
            logger.info(f"\n   –ö–ª–∞—Å—Å 0 (–Ω–µ –≤—Ö–æ–¥–∏—Ç—å): {(y_buy == 0).sum()} –ø—Ä–∏–º–µ—Ä–æ–≤")
            logger.info(f"   Expected return: mean={df.loc[y_buy == 0, 'buy_expected_return'].mean():.3f}%, "
                       f"std={df.loc[y_buy == 0, 'buy_expected_return'].std():.3f}%")
            
            logger.info(f"\n   –ö–ª–∞—Å—Å 1 (–≤—Ö–æ–¥–∏—Ç—å): {(y_buy == 1).sum()} –ø—Ä–∏–º–µ—Ä–æ–≤")
            logger.info(f"   Expected return: mean={df.loc[y_buy == 1, 'buy_expected_return'].mean():.3f}%, "
                       f"std={df.loc[y_buy == 1, 'buy_expected_return'].std():.3f}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
            class0_95p = df.loc[y_buy == 0, 'buy_expected_return'].quantile(0.95)
            class1_5p = df.loc[y_buy == 1, 'buy_expected_return'].quantile(0.05)
            
            logger.info(f"\n   –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
            logger.info(f"   –ö–ª–∞—Å—Å 0 (95-–ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å): {class0_95p:.3f}%")
            logger.info(f"   –ö–ª–∞—Å—Å 1 (5-–ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å): {class1_5p:.3f}%")
            
            if class0_95p < class1_5p:
                logger.info("   ‚úÖ –ö–ª–∞—Å—Å—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã")
            else:
                logger.info("   ‚ö†Ô∏è –ö–ª–∞—Å—Å—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è - —ç—Ç–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç –æ–±—É—á–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    logger.info("="*70)
    logger.info("–ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –û–ë–£–ß–ï–ù–ò–ï–ú XGBoost v3")
    logger.info("="*70)
    analyze_data_distribution()