"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–±—É—á–µ–Ω–∏—è
"""

import logging
from pathlib import Path
from datetime import datetime
import json
from typing import Dict, Any

logger = logging.getLogger(__name__)


class ReportGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, config, log_dir: Path):
        self.config = config
        self.log_dir = Path(log_dir)
        
    def generate_report(self, results: Dict[str, Any]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        report_path = self.log_dir / "final_report.txt"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            f.write("="*60 + "\n")
            f.write("XGBoost v3.0 - –û–¢–ß–ï–¢ –û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–• –û–ë–£–ß–ï–ù–ò–Ø\n")
            f.write("="*60 + "\n\n")
            
            # –í—Ä–µ–º—è
            f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config.training.task_type}\n")
            f.write(f"–†–µ–∂–∏–º: {'–¢–µ—Å—Ç' if self.config.training.test_mode else '–ü–æ–ª–Ω—ã–π'}\n\n")
            
            # –î–∞–Ω–Ω—ã–µ
            f.write("–î–ê–ù–ù–´–ï:\n")
            f.write("-"*40 + "\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {results.get('n_samples', 0):,}\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {results.get('n_features', 0)}\n")
            f.write(f"–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {self.config.training.classification_threshold}%\n\n")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ BUY
            f.write("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–î–ï–õ–ò BUY:\n")
            f.write("-"*40 + "\n")
            self._write_metrics(f, results.get('buy', {}))
            
            # –ú–µ—Ç—Ä–∏–∫–∏ SELL
            f.write("\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–î–ï–õ–ò SELL:\n")
            f.write("-"*40 + "\n")
            self._write_metrics(f, results.get('sell', {}))
            
            # –¢–æ–ø –ø—Ä–∏–∑–Ω–∞–∫–∏
            if 'feature_names' in results:
                f.write("\n–¢–û–ü-20 –ü–†–ò–ó–ù–ê–ö–û–í:\n")
                f.write("-"*40 + "\n")
                for i, feat in enumerate(results['feature_names'][:20], 1):
                    f.write(f"{i:2d}. {feat}\n")
                    
            # –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if 'feature_importance_analysis' in results:
                f.write("\n–ê–ù–ê–õ–ò–ó –í–ê–ñ–ù–û–°–¢–ò –ü–†–ò–ó–ù–ê–ö–û–í –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:\n")
                f.write("-"*40 + "\n")
                analysis = results['feature_importance_analysis']
                for category, info in analysis.items():
                    f.write(f"\n{category}:\n")
                    f.write(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {info.get('count', 0)} ({info.get('percentage', 0):.1f}%)\n")
                    f.write(f"  –°—É–º–º–∞—Ä–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å: {info.get('total_importance', 0):.3f}\n")
                    f.write(f"  –¢–æ–ø –ø—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(info.get('top_features', [])[:5])}\n")
                    
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
            f.write("\n–ü–ê–†–ê–ú–ï–¢–†–´ –ú–û–î–ï–õ–ò:\n")
            f.write("-"*40 + "\n")
            f.write(f"Max Depth: {self.config.model.max_depth}\n")
            f.write(f"Learning Rate: {self.config.model.learning_rate}\n")
            f.write(f"N Estimators: {self.config.model.n_estimators}\n")
            f.write(f"Ensemble Size: {self.config.training.ensemble_size}\n")
            
            f.write("\n" + "="*60 + "\n")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON
        metrics_path = self.log_dir / "metrics.json"
        with open(metrics_path, 'w') as f:
            json.dump(results, f, indent=2, default=str)
            
        logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metrics_path}")
        
    def _write_metrics(self, f, metrics: Dict[str, float]):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–∞–π–ª"""
        if self.config.training.task_type == "regression":
            f.write(f"MAE: {metrics.get('mae', 0):.4f}\n")
            f.write(f"RMSE: {metrics.get('rmse', 0):.4f}\n")
            f.write(f"R¬≤: {metrics.get('r2', 0):.4f}\n")
            f.write(f"Direction Accuracy: {metrics.get('direction_accuracy', 0):.1%}\n")
        else:
            f.write(f"ROC-AUC: {metrics.get('roc_auc', 0):.4f}\n")
            f.write(f"Accuracy: {metrics.get('accuracy', 0):.1%}\n")
            f.write(f"Precision: {metrics.get('precision', 0):.1%}\n")
            f.write(f"Recall: {metrics.get('recall', 0):.1%}\n")
            f.write(f"F1-Score: {metrics.get('f1', 0):.3f}\n")
            
            if 'total_trades' in metrics:
                f.write(f"\n–¢—Ä–µ–π–¥–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫–∏:\n")
                f.write(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {metrics.get('total_trades', 0)}\n")
                f.write(f"Win Rate: {metrics.get('win_rate', 0):.1%}\n")