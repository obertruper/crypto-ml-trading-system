"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ—â–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import os
import multiprocessing
import psutil
import logging

logger = logging.getLogger(__name__)


class ServerOptimizer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self):
        self.cpu_count = multiprocessing.cpu_count()
        self.ram_gb = psutil.virtual_memory().total / (1024**3)
        self.server_type = os.environ.get('SERVER_TYPE', 'auto')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if self.server_type == 'auto':
            if self.cpu_count >= 64 and self.ram_gb >= 100:
                self.server_type = 'powerful'
            else:
                self.server_type = 'normal'
                
        logger.info(f"üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {self.cpu_count} CPU, {self.ram_gb:.0f}GB RAM")
        logger.info(f"üìã –¢–∏–ø: {self.server_type}")
    
    def get_data_loader_workers(self, default=10):
        """–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if self.server_type == 'powerful':
            workers = min(50, self.cpu_count // 2)
            logger.info(f"üöÄ DataLoader: {workers} –≤–æ—Ä–∫–µ—Ä–æ–≤ (–º–æ—â–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)")
            return workers
        return min(default, self.cpu_count)
    
    def get_batch_size(self, default=10):
        """–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞"""
        if self.server_type == 'powerful' and self.ram_gb > 100:
            batch_size = 50
            logger.info(f"üöÄ Batch size: {batch_size} (–º–Ω–æ–≥–æ RAM)")
            return batch_size
        return default
    
    def get_optuna_jobs(self, default=1):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö Optuna –≤–æ—Ä–∫–µ—Ä–æ–≤"""
        if self.server_type == 'powerful':
            n_jobs = min(32, self.cpu_count // 4)
            logger.info(f"üöÄ Optuna: {n_jobs} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤")
            return n_jobs
        return default
    
    def get_adasyn_params(self, n_samples):
        """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã ADASYN –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        if self.server_type == 'powerful':
            n_neighbors = min(15, n_samples // 1000)
            n_jobs = min(32, self.cpu_count // 4)
            logger.info(f"üöÄ ADASYN: {n_neighbors} —Å–æ—Å–µ–¥–µ–π, {n_jobs} –≤–æ—Ä–∫–µ—Ä–æ–≤")
            return {'n_neighbors': n_neighbors, 'n_jobs': n_jobs}
        
        return {'n_neighbors': min(5, n_samples // 1000), 'n_jobs': 1}
    
    def get_xgboost_params(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è XGBoost"""
        params = {}
        
        if self.server_type == 'powerful':
            # –ë–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤
            params['nthread'] = -1
            
            # –ë–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º
            if self.ram_gb > 200:
                params['max_bin'] = 512  # –ë–æ–ª—å—à–µ –±–∏–Ω–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            else:
                params['max_bin'] = 256
                
            logger.info(f"üöÄ XGBoost: max_bin={params.get('max_bin', 256)}")
            
        return params
    
    def should_use_parallel_optuna(self):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        return self.server_type == 'powerful'
    
    def get_feature_engineering_workers(self):
        """–í–æ—Ä–∫–µ—Ä—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        if self.server_type == 'powerful':
            return self.cpu_count // 2
        return self.cpu_count
    
    def log_optimization_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        logger.info("\nüîß –ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        logger.info(f"   –¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞: {self.server_type}")
        logger.info(f"   CPU: {self.cpu_count}")
        logger.info(f"   RAM: {self.ram_gb:.0f} GB")
        
        if self.server_type == 'powerful':
            logger.info("   ‚úÖ –í–∫–ª—é—á–µ–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è Optuna")
            logger.info("   ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω—ã –±–∞—Ç—á–∏ –¥–∞–Ω–Ω—ã—Ö")
            logger.info("   ‚úÖ –ë–æ–ª—å—à–µ –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            logger.info("   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ADASYN")
        else:
            logger.info("   üìã –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
_optimizer = None

def get_optimizer():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    global _optimizer
    if _optimizer is None:
        _optimizer = ServerOptimizer()
    return _optimizer