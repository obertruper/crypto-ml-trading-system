"""
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è Optuna
"""

import os
import logging
import optuna
from optuna.samplers import TPESampler
from optuna.pruners import MedianPruner, HyperbandPruner
from typing import Dict, Any, Optional, Callable
import joblib
from pathlib import Path
import psutil

logger = logging.getLogger(__name__)


class OptunaOptimizer:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Optuna"""
    
    def __init__(self, 
                 study_name: str,
                 storage: Optional[str] = None,
                 direction: str = "maximize",
                 load_if_exists: bool = True):
        """
        Args:
            study_name: –ò–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            storage: URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (None = –≤ –ø–∞–º—è—Ç–∏)
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            load_if_exists: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        """
        self.study_name = study_name
        self.direction = direction
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        cpu_count = psutil.cpu_count(logical=True)
        self.is_powerful = cpu_count >= 64
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        self.study = self._create_study(storage, load_if_exists)
        
    def _create_study(self, storage: Optional[str], load_if_exists: bool) -> optuna.Study:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π sampler
        if self.is_powerful:
            # –î–ª—è –º–æ—â–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π sampler
            sampler = TPESampler(
                n_startup_trials=10,  # –ú–µ–Ω—å—à–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                n_ei_candidates=48,   # –ë–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è EI
                multivariate=True,    # –£—á–∏—Ç—ã–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                seed=42
            )
            # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π pruner
            pruner = HyperbandPruner(
                min_resource=1,
                max_resource=100,
                reduction_factor=3
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            sampler = TPESampler(
                n_startup_trials=20,
                n_ei_candidates=24,
                multivariate=True,
                seed=42
            )
            pruner = MedianPruner(
                n_startup_trials=5,
                n_warmup_steps=10,
                interval_steps=1
            )
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        try:
            if storage:
                study = optuna.create_study(
                    study_name=self.study_name,
                    storage=storage,
                    sampler=sampler,
                    pruner=pruner,
                    direction=self.direction,
                    load_if_exists=load_if_exists
                )
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ {self.study_name} —Å –ë–î: {storage}")
            else:
                study = optuna.create_study(
                    study_name=self.study_name,
                    sampler=sampler,
                    pruner=pruner,
                    direction=self.direction
                )
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ {self.study_name} –≤ –ø–∞–º—è—Ç–∏")
                
            return study
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    def optimize_parallel(self,
                         objective: Callable,
                         n_trials: int,
                         n_jobs: Optional[int] = None,
                         timeout: Optional[float] = None,
                         gc_after_trial: bool = True,
                         show_progress_bar: bool = True) -> optuna.Study:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        
        Args:
            objective: –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            n_trials: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            n_jobs: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            gc_after_trial: –ó–∞–ø—É—Å–∫–∞—Ç—å —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
            show_progress_bar: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            
        Returns:
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
        if n_jobs is None:
            cpu_count = psutil.cpu_count(logical=True)
            if self.is_powerful:
                # –î–ª—è –º–æ—â–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ - –±–æ–ª—å—à–µ –≤–æ—Ä–∫–µ—Ä–æ–≤
                n_jobs = min(32, cpu_count // 4)
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö - –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ
                n_jobs = min(4, cpu_count // 2)
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {n_trials} –ø–æ–ø—ã—Ç–æ–∫, {n_jobs} –≤–æ—Ä–∫–µ—Ä–æ–≤")
        
        try:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.study.optimize(
                objective,
                n_trials=n_trials,
                n_jobs=n_jobs,
                timeout=timeout,
                gc_after_trial=gc_after_trial,
                show_progress_bar=show_progress_bar,
                catch=(Exception,)  # –õ–æ–≤–∏–º –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            best_trial = self.study.best_trial
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"   –õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {best_trial.value:.4f}")
            logger.info(f"   –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_trial.params}")
            
            return self.study
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def get_best_params(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        return self.study.best_params
    
    def save_study(self, filepath: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        joblib.dump(self.study, filepath)
        logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
    
    @staticmethod
    def load_study(filepath: str) -> optuna.Study:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        study = joblib.load(filepath)
        logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filepath}")
        return study
    
    def create_visualization_cache(self, cache_dir: str = "optuna_cache") -> None:
        """
        –°–æ–∑–¥–∞—Ç—å –∫—ç—à –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        
        Args:
            cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞
        """
        os.makedirs(cache_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        visualizations = {
            'optimization_history': optuna.visualization.plot_optimization_history,
            'param_importances': optuna.visualization.plot_param_importances,
            'parallel_coordinate': optuna.visualization.plot_parallel_coordinate,
            'slice': optuna.visualization.plot_slice
        }
        
        for name, plot_func in visualizations.items():
            try:
                fig = plot_func(self.study)
                fig.write_html(os.path.join(cache_dir, f"{name}.html"))
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {name}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é {name}: {e}")


def create_fast_objective(model_class, X_train, y_train, X_val, y_val,
                         use_gpu: bool = True,
                         early_stopping_rounds: int = 50) -> Callable:
    """
    –°–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Optuna
    
    Args:
        model_class: –ö–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, XGBClassifier)
        X_train, y_train: –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        X_val, y_val: –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        use_gpu: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU
        early_stopping_rounds: –†–∞—É–Ω–¥—ã –¥–ª—è —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
    Returns:
        –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Optuna
    """
    def objective(trial):
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            'n_estimators': trial.suggest_int('n_estimators', 100, 1000, step=100),
            'max_depth': trial.suggest_int('max_depth', 3, 12),
            'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3, log=True),
            'subsample': trial.suggest_float('subsample', 0.6, 1.0),
            'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),
            'min_child_weight': trial.suggest_int('min_child_weight', 1, 10),
            'gamma': trial.suggest_float('gamma', 0, 0.5),
            'reg_alpha': trial.suggest_float('reg_alpha', 0, 1.0),
            'reg_lambda': trial.suggest_float('reg_lambda', 0, 1.0),
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º GPU –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if use_gpu:
            params['tree_method'] = 'gpu_hist'
            params['predictor'] = 'gpu_predictor'
        else:
            params['tree_method'] = 'hist'
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = model_class(**params, random_state=42, n_jobs=-1)
        
        # –û–±—É—á–∞–µ–º —Å —Ä–∞–Ω–Ω–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        model.fit(
            X_train, y_train,
            eval_set=[(X_val, y_val)],
            early_stopping_rounds=early_stopping_rounds,
            verbose=False
        )
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º
        y_pred = model.predict_proba(X_val)[:, 1]
        
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        from sklearn.metrics import roc_auc_score
        score = roc_auc_score(y_val, y_pred)
        
        return score
    
    return objective