#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞ –≤ —Ä—ã–Ω–æ–∫
–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Å–¥–µ–ª–∫–∏ –¥–ª—è LONG –∏ SHORT –ø–æ–∑–∏—Ü–∏–π
"""

import pandas as pd
import numpy as np
import ta
import json
from datetime import datetime
import warnings
import time
import pickle
import os
import random

warnings.filterwarnings('ignore')
import psycopg2
from psycopg2.extras import execute_values, Json
import logging
from tqdm import tqdm

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class PostgreSQLManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
    """

    def __init__(self, db_config: dict):
        self.db_config = db_config.copy()
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
        if not self.db_config.get('password'):
            self.db_config.pop('password', None)
        self.connection = None

    def connect(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            self.connection = psycopg2.connect(**self.db_config)
            self.connection.autocommit = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise

    def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        if self.connection:
            self.connection.close()
            logger.info("üì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")

    def execute_query(self, query: str, params=None, fetch=False):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å"""
        try:
            with self.connection.cursor() as cursor:
                cursor.execute(query, params)
                if fetch:
                    return cursor.fetchall()
                return cursor.rowcount
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise

    def fetch_dataframe(self, query: str, params=None) -> pd.DataFrame:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ DataFrame
        """
        try:
            return pd.read_sql_query(query, self.connection, params=params)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ DataFrame: {e}")
            raise


class RealisticMarketDatasetPreparator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞
    """

    def __init__(self, db_manager: PostgreSQLManager, risk_profile: dict):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª–µ–º

        Args:
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä PostgreSQL
            risk_profile: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ä–∏—Å–∫–∞ –∏–∑ config.yaml
        """
        self.db = db_manager
        self.risk_profile = risk_profile
        self.feature_columns = []
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
        self.entry_probability = 0.02  # 2% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
        self.min_bars_between_trades = 5  # –ú–∏–Ω–∏–º—É–º –±–∞—Ä–æ–≤ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
        self.bad_entry_probability = 0.15  # 15% –≤—Ö–æ–¥–æ–≤ –±—É–¥—É—Ç "–ø–ª–æ—Ö–∏–º–∏"
        self.good_entry_probability = 0.15  # 15% –≤—Ö–æ–¥–æ–≤ –±—É–¥—É—Ç "—Ö–æ—Ä–æ—à–∏–º–∏"
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ 70% - —Å–ª—É—á–∞–π–Ω—ã–µ

    def get_available_symbols(self) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –ë–î
        """
        query = """
        SELECT DISTINCT symbol, COUNT(*) as record_count
        FROM raw_market_data 
        WHERE interval_minutes = 15 AND market_type = 'futures'
        GROUP BY symbol
        HAVING COUNT(*) >= 1000
        ORDER BY symbol
        """

        results = self.db.execute_query(query, fetch=True)
        symbols = [row[0] for row in results]

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö")
        return symbols

    def load_raw_data(self, symbol: str, limit: int = None) -> pd.DataFrame:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏–∑ PostgreSQL
        """
        query = """
        SELECT id, symbol, timestamp, datetime, open, high, low, close, volume, turnover
        FROM raw_market_data 
        WHERE symbol = %s AND interval_minutes = 15 AND market_type = 'futures'
        ORDER BY timestamp
        """

        if limit:
            query += f" LIMIT {limit}"

        df = self.db.fetch_dataframe(query, (symbol,))

        if len(df) == 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")
            return pd.DataFrame()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        numeric_columns = ['open', 'high', 'low', 'close', 'volume', 'turnover']
        for col in numeric_columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
        return df

    def calculate_technical_indicators(self, df: pd.DataFrame) -> dict:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        """
        if len(df) < 100:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
            return {}

        logger.info("üìà –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")

        indicators = {}

        try:
            # === –ë–ê–ó–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
            # EMA 15
            indicators['ema_15'] = ta.trend.EMAIndicator(df['close'], window=15).ema_indicator().tolist()

            # ADX (Average Directional Index)
            adx_indicator = ta.trend.ADXIndicator(df['high'], df['low'], df['close'], window=14)
            indicators['adx_val'] = adx_indicator.adx().tolist()
            indicators['adx_plus_di'] = adx_indicator.adx_pos().tolist()
            indicators['adx_minus_di'] = adx_indicator.adx_neg().tolist()

            # RSI (Relative Strength Index)
            indicators['rsi_val'] = ta.momentum.RSIIndicator(df['close'], window=14).rsi().tolist()

            # MACD
            macd_indicator = ta.trend.MACD(df['close'], window_fast=12, window_slow=26, window_sign=9)
            indicators['macd_val'] = macd_indicator.macd().tolist()
            indicators['macd_signal'] = macd_indicator.macd_signal().tolist()
            indicators['macd_hist'] = macd_indicator.macd_diff().tolist()

            # ATR (Average True Range)
            indicators['atr_val'] = ta.volatility.AverageTrueRange(df['high'], df['low'], df['close'],
                                                                   window=10).average_true_range().tolist()

            # Bollinger Bands
            bb_indicator = ta.volatility.BollingerBands(df['close'], window=20, window_dev=2)
            indicators['bb_upper'] = bb_indicator.bollinger_hband().tolist()
            indicators['bb_lower'] = bb_indicator.bollinger_lband().tolist()
            indicators['bb_basis'] = bb_indicator.bollinger_mavg().tolist()

            # Stochastic
            stoch_indicator = ta.momentum.StochasticOscillator(df['high'], df['low'], df['close'], window=14)
            indicators['stoch_k'] = stoch_indicator.stoch().tolist()
            indicators['stoch_d'] = stoch_indicator.stoch_signal().tolist()

            # CCI (Commodity Channel Index)
            indicators['cci_val'] = ta.trend.CCIIndicator(df['high'], df['low'], df['close'], window=20).cci().tolist()

            # Williams %R
            indicators['williams_r'] = ta.momentum.WilliamsRIndicator(df['high'], df['low'], df['close'],
                                                                      lbp=14).williams_r().tolist()

            # OBV (On Balance Volume)
            indicators['obv'] = ta.volume.OnBalanceVolumeIndicator(df['close'],
                                                                   df['volume']).on_balance_volume().tolist()

            # CMF (Chaikin Money Flow)
            indicators['cmf'] = ta.volume.ChaikinMoneyFlowIndicator(df['high'], df['low'], df['close'], df['volume'],
                                                                    window=20).chaikin_money_flow().tolist()

            # MFI (Money Flow Index)
            indicators['mfi'] = ta.volume.MFIIndicator(df['high'], df['low'], df['close'], df['volume'],
                                                       window=14).money_flow_index().tolist()

            # Ichimoku
            ichimoku_indicator = ta.trend.IchimokuIndicator(df['high'], df['low'], window1=9, window2=26)
            indicators['ichimoku_conv'] = ichimoku_indicator.ichimoku_conversion_line().tolist()
            indicators['ichimoku_base'] = ichimoku_indicator.ichimoku_base_line().tolist()

            # Parabolic SAR
            indicators['sar'] = ta.trend.PSARIndicator(df['high'], df['low'], df['close']).psar().tolist()

            # Donchian Channel
            donchian_indicator = ta.volatility.DonchianChannel(df['high'], df['low'], df['close'], window=20)
            indicators['donchian_upper'] = donchian_indicator.donchian_channel_hband().tolist()
            indicators['donchian_lower'] = donchian_indicator.donchian_channel_lband().tolist()

            # ROC (Rate of Change)
            indicators['roc'] = ta.momentum.ROCIndicator(df['close'], window=12).roc().tolist()

            # Aroon
            aroon_indicator = ta.trend.AroonIndicator(df['high'], df['low'], window=14)
            indicators['aroon_up'] = aroon_indicator.aroon_up().tolist()
            indicators['aroon_down'] = aroon_indicator.aroon_down().tolist()

            # DPO (Detrended Price Oscillator)
            indicators['dpo'] = ta.trend.DPOIndicator(df['close'], window=20).dpo().tolist()

            # Ultimate Oscillator
            indicators['ult_osc'] = ta.momentum.UltimateOscillator(
                df['high'], df['low'], df['close'],
                window1=7, window2=14, window3=28
            ).ultimate_oscillator().tolist()

            # Vortex Indicator
            vortex_indicator = ta.trend.VortexIndicator(df['high'], df['low'], df['close'], window=14)
            indicators['vortex_vip'] = vortex_indicator.vortex_indicator_pos().tolist()
            indicators['vortex_vin'] = vortex_indicator.vortex_indicator_neg().tolist()

            # === –ü–†–û–ò–ó–í–û–î–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ ===
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            macd_val = pd.Series(indicators['macd_val'])
            macd_signal = pd.Series(indicators['macd_signal'])
            adx_plus_di = pd.Series(indicators['adx_plus_di'])
            adx_minus_di = pd.Series(indicators['adx_minus_di'])
            bb_upper = pd.Series(indicators['bb_upper'])
            bb_lower = pd.Series(indicators['bb_lower'])
            rsi_val = pd.Series(indicators['rsi_val'])
            stoch_k = pd.Series(indicators['stoch_k'])
            stoch_d = pd.Series(indicators['stoch_d'])
            vortex_vip = pd.Series(indicators['vortex_vip'])
            vortex_vin = pd.Series(indicators['vortex_vin'])
            ichimoku_conv = pd.Series(indicators['ichimoku_conv'])
            ichimoku_base = pd.Series(indicators['ichimoku_base'])
            atr_val = pd.Series(indicators['atr_val'])

            # MACD —Å–∏–≥–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            indicators['macd_signal_ratio'] = (macd_val / (macd_signal + 1e-8)).tolist()

            # ADX —Ä–∞–∑–Ω–æ—Å—Ç–∏
            indicators['adx_diff'] = (adx_plus_di - adx_minus_di).tolist()

            # Bollinger –ø–æ–∑–∏—Ü–∏—è
            band_width = bb_upper - bb_lower
            indicators['bb_position'] = ((df['close'] - bb_lower) / (band_width + 1e-8)).tolist()

            # RSI –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
            indicators['rsi_dist_from_mid'] = (np.abs(rsi_val - 50) / 50.0).tolist()

            # Stochastic –∫–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
            indicators['stoch_diff'] = (stoch_k - stoch_d).tolist()

            # Vortex —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
            indicators['vortex_ratio'] = (vortex_vip / (vortex_vin + 1e-8)).tolist()

            # Ichimoku –æ–±–ª–∞–∫–æ
            indicators['ichimoku_diff'] = (ichimoku_conv - ichimoku_base).tolist()

            # ATR –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π
            indicators['atr_norm'] = (atr_val / (df['close'] + 1e-8)).tolist()

            # === –í–†–ï–ú–ï–ù–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò ===
            indicators['hour'] = df['datetime'].dt.hour.tolist()
            indicators['day_of_week'] = df['datetime'].dt.dayofweek.tolist()
            indicators['is_weekend'] = (df['datetime'].dt.dayofweek >= 5).astype(int).tolist()

            # === –¶–ï–ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ ===
            indicators['price_change_1'] = df['close'].pct_change(1).tolist()
            indicators['price_change_4'] = df['close'].pct_change(4).tolist()  # 1 —á–∞—Å
            indicators['price_change_16'] = df['close'].pct_change(16).tolist()  # 4 —á–∞—Å–∞

            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            indicators['volatility_4'] = df['close'].rolling(4).std().tolist()
            indicators['volatility_16'] = df['close'].rolling(16).std().tolist()

            # –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            volume_sma = df['volume'].rolling(20).mean()
            indicators['volume_sma'] = volume_sma.tolist()
            indicators['volume_ratio'] = (df['volume'] / (volume_sma + 1e-8)).tolist()

            # –ó–∞–º–µ–Ω—è–µ–º NaN –∏ inf –Ω–∞ None –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            for key, values in indicators.items():
                indicators[key] = [None if pd.isna(x) or np.isinf(x) else float(x) for x in values]

            logger.info(f"‚úÖ –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(indicators)} –≥—Ä—É–ø–ø –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            raise

        return indicators

    def _determine_entry_quality(self, indicators_at_bar: dict, direction: str) -> tuple:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        
        Returns:
            tuple: (entry_type, confidence)
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        rsi = indicators_at_bar.get('rsi_val', 50)
        adx = indicators_at_bar.get('adx_val', 0)
        bb_position = indicators_at_bar.get('bb_position', 0.5)
        macd_hist = indicators_at_bar.get('macd_hist', 0)
        volume_ratio = indicators_at_bar.get('volume_ratio', 1.0)
        atr_norm = indicators_at_bar.get('atr_norm', 0.01)
        
        # –°—á–∏—Ç–∞–µ–º "–ø–ª–æ—Ö–∏–µ" –∏ "—Ö–æ—Ä–æ—à–∏–µ" —Å–∏–≥–Ω–∞–ª—ã
        bad_signals = 0
        good_signals = 0
        
        if direction == 'long':
            # –ü–ª–æ—Ö–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è LONG
            if rsi and rsi > 75:  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                bad_signals += 2
            if bb_position and bb_position > 0.9:  # –£ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                bad_signals += 1
            if macd_hist and macd_hist < -0.5:  # –°–∏–ª—å–Ω—ã–π –º–µ–¥–≤–µ–∂–∏–π momentum
                bad_signals += 1
            if atr_norm and atr_norm > 0.03:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                bad_signals += 1
                
            # –•–æ—Ä–æ—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è LONG
            if rsi and 30 < rsi < 50:  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                good_signals += 1
            if bb_position and bb_position < 0.3:  # –£ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                good_signals += 1
            if macd_hist and macd_hist > 0.5:  # –ë—ã—á–∏–π momentum
                good_signals += 2
            if adx and adx > 25:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                good_signals += 1
            if volume_ratio and volume_ratio > 1.5:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
                good_signals += 1
                
        else:  # SHORT
            # –ü–ª–æ—Ö–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è SHORT
            if rsi and rsi < 25:  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                bad_signals += 2
            if bb_position and bb_position < 0.1:  # –£ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                bad_signals += 1
            if macd_hist and macd_hist > 0.5:  # –°–∏–ª—å–Ω—ã–π –±—ã—á–∏–π momentum
                bad_signals += 1
            if atr_norm and atr_norm > 0.03:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                bad_signals += 1
                
            # –•–æ—Ä–æ—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è SHORT
            if rsi and 50 < rsi < 70:  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                good_signals += 1
            if bb_position and bb_position > 0.7:  # –£ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
                good_signals += 1
            if macd_hist and macd_hist < -0.5:  # –ú–µ–¥–≤–µ–∂–∏–π momentum
                good_signals += 2
            if adx and adx > 25:  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                good_signals += 1
            if volume_ratio and volume_ratio > 1.5:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
                good_signals += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if bad_signals >= 3:
            entry_type = 'bad'
            confidence = 0.2 + (bad_signals - 3) * 0.1  # 0.2-0.5
        elif good_signals >= 3:
            entry_type = 'good'
            confidence = 0.7 + (good_signals - 3) * 0.05  # 0.7-0.95
        else:
            entry_type = 'random'
            confidence = 0.4 + random.uniform(-0.1, 0.1)  # 0.3-0.5
            
        return entry_type, min(max(confidence, 0.1), 0.95)

    def _calculate_enhanced_result(self, entry_price, future_bars, direction,
                                 sl_pct, tp_pct, partial_levels, protection):
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –∏ –∑–∞—â–∏—Ç—ã –ø—Ä–∏–±—ã–ª–∏
        (–ö–æ–ø–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ prepare_dataset.py)
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        position_size = 1.0
        realized_pnl = 0.0
        executed_level_indices = []
        exit_reason = None
        exit_bar = None
        
        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω
        if direction == 'buy':
            sl_price = entry_price * sl_pct
            tp_price = entry_price * tp_pct
            current_sl = sl_price
        else:  # sell
            sl_price = entry_price * sl_pct
            tp_price = entry_price * tp_pct
            current_sl = sl_price
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –±—É–¥—É—â–∏–º –±–∞—Ä–∞–º
        for bar_idx, bar in enumerate(future_bars):
            high = float(bar['high'])
            low = float(bar['low'])
            close = float(bar['close'])
            
            # === –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –ü–û–î–•–û–î ===
            
            if direction == 'buy':
                # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å –≥—ç–ø–æ–º –≤–Ω–∏–∑ - —Å—Ä–∞–∑—É —Å—Ç–æ–ø
                if bar['open'] <= current_sl and position_size > 0:
                    loss_pct = ((bar['open'] - entry_price) / entry_price) * 100
                    remaining_loss = loss_pct * position_size
                    exit_reason = f"Stop Loss at open {bar['open']:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_loss,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_loss,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0
                    }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ TP
                tp_hit_in_this_bar = False
                
                for idx, level in enumerate(partial_levels):
                    level_price = entry_price * (1 + level['percent'] / 100)
                    
                    if high >= level_price and idx not in executed_level_indices and position_size > 0:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TP –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–æ SL
                        if low <= current_sl:
                            open_to_tp = abs(bar['open'] - level_price)
                            open_to_sl = abs(bar['open'] - current_sl)
                            if open_to_sl < open_to_tp:
                                continue
                        
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                        close_ratio = min(level['close_ratio'], position_size)
                        execution_price = max(level_price, bar['open'])
                        actual_profit_pct = ((execution_price - entry_price) / entry_price) * 100
                        
                        profit_at_level = actual_profit_pct * close_ratio
                        realized_pnl += profit_at_level
                        position_size -= close_ratio
                        executed_level_indices.append(idx)
                        tp_hit_in_this_bar = True
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop
                        if level['percent'] >= protection['breakeven_percent']:
                            new_sl = entry_price * (1 + protection['breakeven_offset'] / 100)
                            current_sl = max(current_sl, new_sl)
                        
                        for lock in protection['lock_levels']:
                            if level['percent'] >= lock['trigger']:
                                new_sl = entry_price * (1 + lock['lock'] / 100)
                                current_sl = max(current_sl, new_sl)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                if low <= current_sl and position_size > 0 and not tp_hit_in_this_bar:
                    loss_pct = ((current_sl - entry_price) / entry_price) * 100
                    remaining_loss = loss_pct * position_size
                    exit_reason = f"Stop Loss at {current_sl:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_loss,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_loss,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0
                    }
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                if high >= tp_price and position_size > 0:
                    final_profit_pct = ((tp_price - entry_price) / entry_price) * 100
                    remaining_profit = final_profit_pct * position_size
                    exit_reason = f"Take Profit at {tp_price:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_profit,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_profit,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0
                    }
                    
            else:  # SELL –ø–æ–∑–∏—Ü–∏—è
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è SHORT
                if bar['open'] >= current_sl and position_size > 0:
                    loss_pct = -((bar['open'] - entry_price) / entry_price) * 100
                    remaining_loss = loss_pct * position_size
                    exit_reason = f"Stop Loss at open {bar['open']:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_loss,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_loss,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0
                    }
                
                tp_hit_in_this_bar = False
                
                for idx, level in enumerate(partial_levels):
                    level_price = entry_price * (1 - level['percent'] / 100)
                    
                    if low <= level_price and idx not in executed_level_indices and position_size > 0:
                        if high >= current_sl:
                            open_to_tp = abs(bar['open'] - level_price)
                            open_to_sl = abs(bar['open'] - current_sl)
                            if open_to_sl < open_to_tp:
                                continue
                        
                        close_ratio = min(level['close_ratio'], position_size)
                        execution_price = min(level_price, bar['open'])
                        actual_profit_pct = ((entry_price - execution_price) / entry_price) * 100
                        
                        profit_at_level = actual_profit_pct * close_ratio
                        realized_pnl += profit_at_level
                        position_size -= close_ratio
                        executed_level_indices.append(idx)
                        tp_hit_in_this_bar = True
                        
                        if level['percent'] >= protection['breakeven_percent']:
                            new_sl = entry_price * (1 - protection['breakeven_offset'] / 100)
                            current_sl = min(current_sl, new_sl)
                        
                        for lock in protection['lock_levels']:
                            if level['percent'] >= lock['trigger']:
                                new_sl = entry_price * (1 - lock['lock'] / 100)
                                current_sl = min(current_sl, new_sl)
                
                if high >= current_sl and position_size > 0 and not tp_hit_in_this_bar:
                    loss_pct = -((current_sl - entry_price) / entry_price) * 100
                    remaining_loss = loss_pct * position_size
                    exit_reason = f"Stop Loss at {current_sl:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_loss,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_loss,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0
                    }
                
                if low <= tp_price and position_size > 0:
                    final_profit_pct = ((entry_price - tp_price) / entry_price) * 100
                    remaining_profit = final_profit_pct * position_size
                    exit_reason = f"Take Profit at {tp_price:.4f} (bar {bar_idx+1})"
                    exit_bar = bar_idx + 1
                    return {
                        'final_return': realized_pnl + remaining_profit,
                        'realized_pnl': realized_pnl,
                        'unrealized_pnl': remaining_profit,
                        'exit_reason': exit_reason,
                        'exit_bar': exit_bar,
                        'final_position_size': 0
                    }
        
        # –¢–∞–π–º–∞—É—Ç
        if position_size > 0 and future_bars:
            last_close = float(future_bars[-1]['close'])
            if direction == 'buy':
                unrealized_pct = ((last_close - entry_price) / entry_price) * 100
            else:
                unrealized_pct = ((entry_price - last_close) / entry_price) * 100
            
            variation = len(executed_level_indices) * 0.01
            unrealized_pnl = unrealized_pct * position_size + variation
            
            exit_reason = f"Timeout at bar {len(future_bars)} (price: {last_close:.4f})"
            exit_bar = len(future_bars)
            
            return {
                'final_return': realized_pnl + unrealized_pnl,
                'realized_pnl': realized_pnl,
                'unrealized_pnl': unrealized_pnl,
                'exit_reason': exit_reason,
                'exit_bar': exit_bar,
                'final_position_size': position_size
            }
        
        # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        return {
            'final_return': realized_pnl,
            'realized_pnl': realized_pnl,
            'unrealized_pnl': 0.0,
            'exit_reason': 'No data',
            'exit_bar': 0,
            'final_position_size': position_size
        }

    def create_realistic_trades(self, df: pd.DataFrame, indicators: dict, symbol: str) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è LONG –∏ SHORT
        """
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –¥–ª—è {symbol}...")
        
        # –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å
        buy_sl_pct = self.risk_profile.get('stop_loss_pct_buy', 0.989)
        buy_tp_pct = self.risk_profile.get('take_profit_pct_buy', 1.058)
        sell_sl_pct = self.risk_profile.get('stop_loss_pct_sell', 1.011)
        sell_tp_pct = self.risk_profile.get('take_profit_pct_sell', 0.942)
        
        partial_tp_levels = [
            {'percent': 1.2, 'close_ratio': 0.20},
            {'percent': 2.4, 'close_ratio': 0.30},
            {'percent': 3.5, 'close_ratio': 0.30}
        ]
        
        profit_protection = {
            'breakeven_percent': 1.2,
            'breakeven_offset': 0.3,
            'lock_levels': [
                {'trigger': 2.4, 'lock': 1.2},
                {'trigger': 3.5, 'lock': 2.4},
                {'trigger': 4.6, 'lock': 3.5}
            ]
        }
        
        total_bars = len(df)
        lookahead_limit = 100
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = {
            'is_long_entry': [False] * total_bars,
            'is_short_entry': [False] * total_bars,
            'long_entry_type': [None] * total_bars,
            'short_entry_type': [None] * total_bars,
            'long_entry_confidence': [None] * total_bars,
            'short_entry_confidence': [None] * total_bars,
            'buy_expected_return': [0.0] * total_bars,
            'sell_expected_return': [0.0] * total_bars,
            'buy_profit_target': [0] * total_bars,
            'buy_loss_target': [0] * total_bars,
            'sell_profit_target': [0] * total_bars,
            'sell_loss_target': [0] * total_bars
        }
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        long_trades = []
        short_trades = []
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        current_long_position = None
        current_short_position = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤
        entry_stats = {
            'long': {'good': 0, 'bad': 0, 'random': 0},
            'short': {'good': 0, 'bad': 0, 'random': 0}
        }
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –±–∞—Ä–∞–º
        for i in tqdm(range(total_bars - lookahead_limit), desc=f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–¥–µ–ª–æ–∫ {symbol}"):
            
            # === LONG –ü–û–ó–ò–¶–ò–ò ===
            if current_long_position is None:
                # –ú–æ–∂–µ–º –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                if random.random() < self.entry_probability:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–∞
                    indicators_at_bar = {key: values[i] for key, values in indicators.items() if i < len(values)}
                    entry_type, confidence = self._determine_entry_quality(indicators_at_bar, 'long')
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º —Ç–∏–ø –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    rand_val = random.random()
                    if rand_val < self.bad_entry_probability:
                        entry_type = 'bad'
                        confidence = random.uniform(0.1, 0.3)
                    elif rand_val < self.bad_entry_probability + self.good_entry_probability:
                        entry_type = 'good'
                        confidence = random.uniform(0.7, 0.9)
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    current_long_position = {
                        'entry_bar': i,
                        'entry_price': df.iloc[i]['close'],
                        'entry_type': entry_type,
                        'confidence': confidence
                    }
                    
                    results['is_long_entry'][i] = True
                    results['long_entry_type'][i] = entry_type
                    results['long_entry_confidence'][i] = confidence
                    entry_stats['long'][entry_type] += 1
                    
            else:
                # –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å –ª–∏
                entry_bar = current_long_position['entry_bar']
                bars_in_position = i - entry_bar
                
                if bars_in_position >= self.min_bars_between_trades:
                    # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ, –º–æ–∂–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    
                    # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ –±–∞—Ä—ã –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
                    future_bars = []
                    for j in range(entry_bar + 1, min(entry_bar + lookahead_limit + 1, total_bars)):
                        future_bars.append({
                            'open': df.iloc[j]['open'],
                            'high': df.iloc[j]['high'],
                            'low': df.iloc[j]['low'],
                            'close': df.iloc[j]['close']
                        })
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    buy_result = self._calculate_enhanced_result(
                        current_long_position['entry_price'], 
                        future_bars, 
                        'buy',
                        buy_sl_pct, buy_tp_pct, partial_tp_levels, profit_protection
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
                    results['buy_expected_return'][entry_bar] = buy_result['final_return']
                    
                    # –ë–∏–Ω–∞—Ä–Ω—ã–µ –º–µ—Ç–∫–∏
                    if buy_result['final_return'] > 0.5:
                        results['buy_profit_target'][entry_bar] = 1
                    elif buy_result['final_return'] < -0.5:
                        results['buy_loss_target'][entry_bar] = 1
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞—Ä –≤—ã—Ö–æ–¥–∞
                    exit_bar = entry_bar + buy_result['exit_bar']
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                    long_trades.append({
                        'entry_bar': entry_bar,
                        'exit_bar': exit_bar,
                        'entry_type': current_long_position['entry_type'],
                        'return': buy_result['final_return'],
                        'exit_reason': buy_result['exit_reason']
                    })
                    
                    # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã–ª–∞—Å—å, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º
                    if exit_bar <= i:
                        current_long_position = None
            
            # === SHORT –ü–û–ó–ò–¶–ò–ò (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ) ===
            if current_short_position is None:
                if random.random() < self.entry_probability:
                    indicators_at_bar = {key: values[i] for key, values in indicators.items() if i < len(values)}
                    entry_type, confidence = self._determine_entry_quality(indicators_at_bar, 'short')
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º —Ç–∏–ø –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    rand_val = random.random()
                    if rand_val < self.bad_entry_probability:
                        entry_type = 'bad'
                        confidence = random.uniform(0.1, 0.3)
                    elif rand_val < self.bad_entry_probability + self.good_entry_probability:
                        entry_type = 'good'
                        confidence = random.uniform(0.7, 0.9)
                    
                    current_short_position = {
                        'entry_bar': i,
                        'entry_price': df.iloc[i]['close'],
                        'entry_type': entry_type,
                        'confidence': confidence
                    }
                    
                    results['is_short_entry'][i] = True
                    results['short_entry_type'][i] = entry_type
                    results['short_entry_confidence'][i] = confidence
                    entry_stats['short'][entry_type] += 1
                    
            else:
                entry_bar = current_short_position['entry_bar']
                bars_in_position = i - entry_bar
                
                if bars_in_position >= self.min_bars_between_trades:
                    future_bars = []
                    for j in range(entry_bar + 1, min(entry_bar + lookahead_limit + 1, total_bars)):
                        future_bars.append({
                            'open': df.iloc[j]['open'],
                            'high': df.iloc[j]['high'],
                            'low': df.iloc[j]['low'],
                            'close': df.iloc[j]['close']
                        })
                    
                    sell_result = self._calculate_enhanced_result(
                        current_short_position['entry_price'], 
                        future_bars, 
                        'sell',
                        sell_sl_pct, sell_tp_pct, partial_tp_levels, profit_protection
                    )
                    
                    results['sell_expected_return'][entry_bar] = sell_result['final_return']
                    
                    if sell_result['final_return'] > 0.5:
                        results['sell_profit_target'][entry_bar] = 1
                    elif sell_result['final_return'] < -0.5:
                        results['sell_loss_target'][entry_bar] = 1
                    
                    exit_bar = entry_bar + sell_result['exit_bar']
                    
                    short_trades.append({
                        'entry_bar': entry_bar,
                        'exit_bar': exit_bar,
                        'entry_type': current_short_position['entry_type'],
                        'return': sell_result['final_return'],
                        'exit_reason': sell_result['exit_reason']
                    })
                    
                    if exit_bar <= i:
                        current_short_position = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}:")
        logger.info(f"   LONG —Å–¥–µ–ª–æ–∫: {len(long_trades)}")
        logger.info(f"   SHORT —Å–¥–µ–ª–æ–∫: {len(short_trades)}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤
        for direction in ['long', 'short']:
            trades = long_trades if direction == 'long' else short_trades
            if trades:
                logger.info(f"\n   {direction.upper()} –ø–æ–∑–∏—Ü–∏–∏:")
                for entry_type in ['good', 'bad', 'random']:
                    type_trades = [t for t in trades if t['entry_type'] == entry_type]
                    if type_trades:
                        avg_return = np.mean([t['return'] for t in type_trades])
                        win_rate = len([t for t in type_trades if t['return'] > 0]) / len(type_trades) * 100
                        logger.info(f"      {entry_type}: {len(type_trades)} —Å–¥–µ–ª–æ–∫, "
                                  f"—Å—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {avg_return:.2f}%, win rate: {win_rate:.1f}%")
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –±–∞—Ä–æ–≤ —Å –≤—Ö–æ–¥–∞–º–∏
        long_entry_pct = sum(results['is_long_entry']) / len(results['is_long_entry']) * 100
        short_entry_pct = sum(results['is_short_entry']) / len(results['is_short_entry']) * 100
        logger.info(f"\n   –ü—Ä–æ—Ü–µ–Ω—Ç –±–∞—Ä–æ–≤ —Å –≤—Ö–æ–¥–∞–º–∏:")
        logger.info(f"      LONG: {long_entry_pct:.2f}%")
        logger.info(f"      SHORT: {short_entry_pct:.2f}%")
        
        return results

    def save_processed_data(self, symbol: str, df: pd.DataFrame, indicators: dict, trade_results: dict):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞ –≤ PostgreSQL
        """
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        delete_query = "DELETE FROM processed_market_data WHERE symbol = %s"
        self.db.execute_query(delete_query, (symbol,))

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        values_to_insert = []

        for i in range(len(df)):
            # –°–æ–∑–¥–∞–µ–º JSON –æ–±—ä–µ–∫—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞—Ä–∞
            bar_indicators = {}
            for indicator_name, values_list in indicators.items():
                if i < len(values_list):
                    bar_indicators[indicator_name] = values_list[i]
                else:
                    bar_indicators[indicator_name] = None
            
            # –î–æ–±–∞–≤–ª—è–µ–º expected returns –≤ JSON
            bar_indicators['buy_expected_return'] = trade_results['buy_expected_return'][i]
            bar_indicators['sell_expected_return'] = trade_results['sell_expected_return'][i]

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            record = (
                int(df.iloc[i]['id']),  # raw_data_id
                symbol,
                int(df.iloc[i]['timestamp']),
                df.iloc[i]['datetime'],
                float(df.iloc[i]['open']),
                float(df.iloc[i]['high']),
                float(df.iloc[i]['low']),
                float(df.iloc[i]['close']),
                float(df.iloc[i]['volume']),
                Json(bar_indicators),  # JSONB —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                int(trade_results['buy_profit_target'][i]),
                int(trade_results['buy_loss_target'][i]),
                int(trade_results['sell_profit_target'][i]),
                int(trade_results['sell_loss_target'][i]),
                float(trade_results['buy_expected_return'][i]),
                float(trade_results['sell_expected_return'][i]),
                bool(trade_results['is_long_entry'][i]),
                bool(trade_results['is_short_entry'][i]),
                trade_results['long_entry_type'][i],
                trade_results['short_entry_type'][i],
                float(trade_results['long_entry_confidence'][i]) if trade_results['long_entry_confidence'][i] else None,
                float(trade_results['short_entry_confidence'][i]) if trade_results['short_entry_confidence'][i] else None
            )

            values_to_insert.append(record)

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        insert_query = """
        INSERT INTO processed_market_data 
        (raw_data_id, symbol, timestamp, datetime, open, high, low, close, volume, 
         technical_indicators, buy_profit_target, buy_loss_target, 
         sell_profit_target, sell_loss_target, buy_expected_return, sell_expected_return,
         is_long_entry, is_short_entry, long_entry_type, short_entry_type,
         long_entry_confidence, short_entry_confidence)
        VALUES %s
        """

        try:
            with self.db.connection.cursor() as cursor:
                execute_values(cursor, insert_query, values_to_insert, page_size=1000)

            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(values_to_insert)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            raise

    def process_single_symbol(self, symbol: str, limit: int = None) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞
        """
        logger.info(f"\n{'=' * 50}")
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        logger.info(f"{'=' * 50}")

        try:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            df = self.load_raw_data(symbol, limit)

            if len(df) == 0:
                return {'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}

            # 2. –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            indicators = self.calculate_technical_indicators(df)

            if not indicators:
                return {'success': False, 'error': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤'}

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
            trade_results = self.create_realistic_trades(df, indicators, symbol)

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.save_processed_data(symbol, df, indicators, trade_results)

            # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            long_entries = sum(trade_results['is_long_entry'])
            short_entries = sum(trade_results['is_short_entry'])
            
            stats = {
                'success': True,
                'symbol': symbol,
                'total_records': len(df),
                'indicators_count': len(indicators),
                'long_entries': long_entries,
                'short_entries': short_entries,
                'long_entry_rate': long_entries / len(df) * 100,
                'short_entry_rate': short_entries / len(df) * 100
            }

            return stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
            return {'success': False, 'error': str(e)}

    def process_all_symbols(self, symbols: list = None, limit: int = None) -> dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
        """
        if symbols is None:
            symbols = self.get_available_symbols()

        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞...")

        results = {}
        successful = 0
        failed = 0
        start_time = time.time()

        for idx, symbol in enumerate(symbols):
            logger.info(f"\n‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: {idx+1}/{len(symbols)} ({(idx+1)/len(symbols)*100:.1f}%)")
            
            result = self.process_single_symbol(symbol, limit)
            results[symbol] = result

            if result['success']:
                successful += 1
            else:
                failed += 1

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        logger.info(f"\n{'=' * 50}")
        logger.info(f"üìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò")
        logger.info(f"{'=' * 50}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω—É—Ç")

        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    import yaml
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    risk_profile = config['risk_profile']

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    db_manager = PostgreSQLManager(db_config)

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        db_manager.connect()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
        preparator = RealisticMarketDatasetPreparator(db_manager, risk_profile)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        import sys
        if len(sys.argv) > 1:
            symbol = sys.argv[1]
            logger.info(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞: {symbol}")
            limit = int(sys.argv[2]) if len(sys.argv) > 2 else None
            results = {symbol: preparator.process_single_symbol(symbol, limit)}
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
            logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            results = preparator.process_all_symbols()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if results:
            logger.info(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê!")
            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ processed_market_data")
            logger.info(f"üéØ –ì–æ—Ç–æ–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞!")

    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db_manager.disconnect()


if __name__ == "__main__":
    main()