#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import pandas as pd
import psycopg2
import json
import yaml

def check_db_indicators():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host=db_config['host'],
        port=db_config['port'],
        database=db_config['dbname'],
        user=db_config['user']
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    query = """
    SELECT symbol, timestamp, technical_indicators
    FROM processed_market_data
    WHERE symbol IN ('BTCUSDT', 'ETHUSDT')
    ORDER BY timestamp DESC
    LIMIT 10
    """
    
    df = pd.read_sql_query(query, conn)
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    print(f"–°–∏–º–≤–æ–ª—ã: {df['symbol'].unique()}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º technical_indicators
    for idx, row in df.iterrows():
        print(f"\n{'='*60}")
        print(f"–°–∏–º–≤–æ–ª: {row['symbol']}, Timestamp: {row['timestamp']}")
        
        indicators = row['technical_indicators']
        if indicators:
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(indicators)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            key_indicators = ['rsi_val', 'macd_hist', 'adx_val', 'bb_upper', 'bb_lower']
            print("\n–ö–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
            for ind in key_indicators:
                if ind in indicators:
                    value = indicators[ind]
                    if value is not None:
                        print(f"  {ind}: {value:.4f}")
                    else:
                        print(f"  {ind}: None")
                else:
                    print(f"  {ind}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            time_features = ['hour', 'day_of_week', 'is_weekend']
            print("\n–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:")
            for feat in time_features:
                if feat in indicators:
                    print(f"  {feat}: {indicators[feat]}")
                else:
                    print(f"  {feat}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
                    
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            if idx == 0:  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
                print(f"\n–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã ({len(indicators)}):")
                for i, (key, value) in enumerate(sorted(indicators.items())):
                    if i < 20:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
                        print(f"  - {key}")
                if len(indicators) > 20:
                    print(f"  ... –∏ –µ—â–µ {len(indicators) - 20} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        else:
            print("‚ö†Ô∏è technical_indicators –ø—É—Å—Ç–æ–π!")
            
        if idx >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø—Ä–∏–º–µ—Ä–∞
            break
    
    conn.close()
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    check_db_indicators()