#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞
"""

import psycopg2
import yaml
import pandas as pd
import numpy as np
import logging

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

conn = psycopg2.connect(**db_config)
cursor = conn.cursor()

print("="*80)
print("üîç –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –õ–û–ì–ò–ö–ò")
print("="*80)

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute("SELECT COUNT(*) FROM processed_market_data")
total_count = cursor.fetchone()[0]

if total_count == 0:
    print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ processed_market_data –ø—É—Å—Ç–∞!")
    print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python prepare_dataset.py")
    conn.close()
    exit()

print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_count:,} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ")

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
query = """
SELECT 
    symbol,
    datetime,
    buy_expected_return,
    sell_expected_return,
    buy_profit_target,
    buy_loss_target,
    sell_profit_target,
    sell_loss_target
FROM processed_market_data
LIMIT 10
"""

df = pd.read_sql(query, conn)
print(f"\nüìä –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
print(df.to_string(index=False))

# 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ expected returns
query = """
SELECT 
    AVG(buy_expected_return) as avg_buy,
    AVG(sell_expected_return) as avg_sell,
    STDDEV(buy_expected_return) as std_buy,
    STDDEV(sell_expected_return) as std_sell,
    MIN(buy_expected_return) as min_buy,
    MAX(buy_expected_return) as max_buy,
    MIN(sell_expected_return) as min_sell,
    MAX(sell_expected_return) as max_sell,
    COUNT(CASE WHEN buy_expected_return > 0 THEN 1 END) as buy_profits,
    COUNT(CASE WHEN buy_expected_return < 0 THEN 1 END) as buy_losses,
    COUNT(CASE WHEN sell_expected_return > 0 THEN 1 END) as sell_profits,
    COUNT(CASE WHEN sell_expected_return < 0 THEN 1 END) as sell_losses
FROM processed_market_data
"""

stats = pd.read_sql(query, conn).iloc[0]

print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê EXPECTED RETURNS:")
print(f"\nüü¢ BUY:")
print(f"   –°—Ä–µ–¥–Ω–µ–µ: {stats['avg_buy']:.3f}%")
print(f"   Std Dev: {stats['std_buy']:.3f}%")
print(f"   Min/Max: {stats['min_buy']:.3f}% / {stats['max_buy']:.3f}%")
print(f"   Win Rate: {stats['buy_profits']/(stats['buy_profits']+stats['buy_losses'])*100:.1f}%")
print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['buy_profits']:,} | –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['buy_losses']:,}")

print(f"\nüî¥ SELL:")
print(f"   –°—Ä–µ–¥–Ω–µ–µ: {stats['avg_sell']:.3f}%")
print(f"   Std Dev: {stats['std_sell']:.3f}%")
print(f"   Min/Max: {stats['min_sell']:.3f}% / {stats['max_sell']:.3f}%")
print(f"   Win Rate: {stats['sell_profits']/(stats['sell_profits']+stats['sell_losses'])*100:.1f}%")
print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['sell_profits']:,} | –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['sell_losses']:,}")

# 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï BUY EXPECTED RETURNS:")
query = """
SELECT 
    CASE 
        WHEN buy_expected_return <= -1.1 THEN 'Stop Loss (-1.1%)'
        WHEN buy_expected_return > -1.1 AND buy_expected_return < 0 THEN '–ù–µ–±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫'
        WHEN buy_expected_return >= 0 AND buy_expected_return < 1 THEN '–ú–∞–ª–∞—è –ø—Ä–∏–±—ã–ª—å (0-1%)'
        WHEN buy_expected_return >= 1 AND buy_expected_return < 2 THEN '–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å (1-2%)'
        WHEN buy_expected_return >= 2 AND buy_expected_return < 3.5 THEN '–•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å (2-3.5%)'
        WHEN buy_expected_return >= 3.5 THEN '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (3.5%+)'
    END as category,
    COUNT(*) as count,
    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM processed_market_data) as percentage
FROM processed_market_data
GROUP BY category
ORDER BY 
    CASE category
        WHEN 'Stop Loss (-1.1%)' THEN 1
        WHEN '–ù–µ–±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫' THEN 2
        WHEN '–ú–∞–ª–∞—è –ø—Ä–∏–±—ã–ª—å (0-1%)' THEN 3
        WHEN '–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å (1-2%)' THEN 4
        WHEN '–•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å (2-3.5%)' THEN 5
        WHEN '–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (3.5%+)' THEN 6
    END
"""

distribution = pd.read_sql(query, conn)
for _, row in distribution.iterrows():
    print(f"   {row['category']:<30} {row['count']:>10,} ({row['percentage']:>6.2f}%)")

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
print(f"\nüéØ –ü–†–ò–ú–ï–†–´ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
query = """
SELECT symbol, datetime, buy_expected_return, sell_expected_return
FROM processed_market_data
WHERE buy_expected_return >= 3
ORDER BY buy_expected_return DESC
LIMIT 5
"""

extreme_df = pd.read_sql(query, conn)
for _, row in extreme_df.iterrows():
    print(f"   {row['symbol']} @ {row['datetime']}: BUY={row['buy_expected_return']:.2f}%, SELL={row['sell_expected_return']:.2f}%")

# 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:")
query = """
SELECT 
    symbol,
    COUNT(*) as records,
    AVG(buy_expected_return) as avg_buy,
    AVG(sell_expected_return) as avg_sell,
    COUNT(CASE WHEN buy_expected_return > 0 THEN 1 END) * 100.0 / COUNT(*) as buy_wr,
    COUNT(CASE WHEN sell_expected_return > 0 THEN 1 END) * 100.0 / COUNT(*) as sell_wr
FROM processed_market_data
GROUP BY symbol
ORDER BY records DESC
LIMIT 10
"""

symbols_df = pd.read_sql(query, conn)
print(f"\n{'–°–∏–º–≤–æ–ª':<15} {'–ó–∞–ø–∏—Å–µ–π':>10} {'Buy Avg':>10} {'Buy WR':>8} {'Sell Avg':>10} {'Sell WR':>8}")
print("-" * 75)
for _, row in symbols_df.iterrows():
    print(f"{row['symbol']:<15} {row['records']:>10,} {row['avg_buy']:>10.3f}% {row['buy_wr']:>7.1f}% {row['avg_sell']:>10.3f}% {row['sell_wr']:>7.1f}%")

conn.close()

print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")