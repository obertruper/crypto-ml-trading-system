#!/bin/bash

echo "üöÄ –ó–∞–ø—É—Å–∫ Enhanced XGBoost v2.0 –ª–æ–∫–∞–ª—å–Ω–æ"
echo "========================================"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
if pg_isready -h localhost -p 5555 > /dev/null 2>&1; then
    echo "‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 5555"
else
    echo "‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5555!"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ë–î –∫–æ–º–∞–Ω–¥–æ–π: docker-compose up -d"
    exit 1
fi

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo ""
echo "üêç –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ -d ".venv" ]; then
    source .venv/bin/activate
    echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
elif [ -d "venv" ]; then
    source venv/bin/activate
    echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
else
    echo "‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π Python"
fi

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
echo ""
echo "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:"
echo "1) üéØ –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
echo "2) üìä –†–µ–≥—Ä–µ—Å—Å–∏—è" 
echo "3) üé≤ –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (5 –∫–ª–∞—Å—Å–æ–≤)"
echo "4) üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú (2 —Å–∏–º–≤–æ–ª–∞, –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ)"
echo -n "–í–∞—à –≤—ã–±–æ—Ä (1-4): "
read choice

case $choice in
    1)
        TASK="classification_binary"
        ENSEMBLE=3
        TEST_MODE=""
        echo "‚úÖ –í—ã–±—Ä–∞–Ω–∞ –±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∞–Ω—Å–∞–º–±–ª–µ–º –∏–∑ 3 –º–æ–¥–µ–ª–µ–π"
        ;;
    2)
        TASK="regression"
        ENSEMBLE=3
        TEST_MODE=""
        echo "‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å –∞–Ω—Å–∞–º–±–ª–µ–º –∏–∑ 3 –º–æ–¥–µ–ª–µ–π"
        ;;
    3)
        TASK="classification_multiclass"
        ENSEMBLE=1
        TEST_MODE=""
        echo "‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"
        ;;
    4)
        TASK="classification_binary"
        ENSEMBLE=1
        TEST_MODE="--test_mode"
        echo "‚úÖ –í—ã–±—Ä–∞–Ω –¢–ï–°–¢–û–í–´–ô —Ä–µ–∂–∏–º"
        ;;
    *)
        echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        exit 1
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo ""
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if ! python -c "import xgboost" 2>/dev/null; then
    echo "‚ùå XGBoost –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install xgboost"
    exit 1
fi

echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è Enhanced XGBoost v2.0..."
echo "=================================================="
echo "Task: $TASK"
echo "Ensemble size: $ENSEMBLE"
echo "Test mode: $TEST_MODE"
echo ""

# –ó–∞–ø—É—Å–∫ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
python train_xgboost_enhanced_v2.py \
    --task $TASK \
    --ensemble_size $ENSEMBLE \
    $TEST_MODE

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo ""
    echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:"
    echo "  - trained_model/*_xgboost_v2_*.pkl"
    echo "  - trained_model/metadata_xgboost_v2.json"
    echo "  - trained_model/scaler_xgboost_v2.pkl"
    echo ""
    echo "üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã:"
    LATEST_LOG=$(ls -t logs | grep xgboost_training | head -1)
    echo "  - logs/$LATEST_LOG/plots/"
    echo "  - logs/$LATEST_LOG/final_report.txt"
    echo ""
    echo "üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤:"
    echo "  open logs/$LATEST_LOG/plots/*.png"
else
    echo ""
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏!"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
fi