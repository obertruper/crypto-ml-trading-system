#!/usr/bin/env python3
"""
–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã processed_market_data –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
"""

import psycopg2
import yaml
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def clear_processed_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É processed_market_data"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = psycopg2.connect(**db_config)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
        cursor.execute("SELECT COUNT(*) FROM processed_market_data")
        count_before = cursor.fetchone()[0]
        logger.info(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏: {count_before:,}")
        
        if count_before > 0:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            response = input(f"\n‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {count_before:,} –∑–∞–ø–∏—Å–µ–π? (yes/no): ")
            
            if response.lower() == 'yes':
                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                logger.info("üóëÔ∏è  –û—á–∏—â–∞—é —Ç–∞–±–ª–∏—Ü—É processed_market_data...")
                cursor.execute("TRUNCATE TABLE processed_market_data")
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                cursor.execute("SELECT COUNT(*) FROM processed_market_data")
                count_after = cursor.fetchone()[0]
                logger.info(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {count_after}")
                
                # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
                cursor.execute("DELETE FROM model_metadata WHERE model_name = 'feature_extraction'")
                logger.info("‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö —Ç–∞–∫–∂–µ –æ—á–∏—â–µ–Ω—ã")
            else:
                logger.info("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            logger.info("‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø—É—Å—Ç–∞")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
        raise

if __name__ == "__main__":
    clear_processed_data()
    print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç:")
    print("   python prepare_dataset.py")