#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ expected_return —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–æ–π
"""

import numpy as np
import pandas as pd
from prepare_dataset import MarketDatasetPreparator
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

def test_trading_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MarketDatasetPreparator —Å –ø—É—Å—Ç—ã–º —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª–µ–º
    risk_profile = {}  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ _calculate_enhanced_result
    preparer = MarketDatasetPreparator(None, risk_profile)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = [
        {
            'name': 'BUY - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å',
            'entry_price': 100.0,
            'direction': 'buy',
            'bars': [
                {'high': 100.5, 'low': 98.8, 'close': 99.0},  # –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
            ],
            'expected': -1.1  # –ü–æ—Ç–µ—Ä—è -1.1%
        },
        {
            'name': 'BUY - –ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ñ–∏—Ç—ã',
            'entry_price': 100.0,
            'direction': 'buy',
            'bars': [
                {'high': 101.3, 'low': 100.1, 'close': 101.2},  # +1.2% - –∑–∞–∫—Ä—ã–≤–∞–µ–º 20%
                {'high': 102.5, 'low': 101.0, 'close': 102.4},  # +2.4% - –∑–∞–∫—Ä—ã–≤–∞–µ–º 30%
                {'high': 103.6, 'low': 102.0, 'close': 103.5},  # +3.5% - –∑–∞–∫—Ä—ã–≤–∞–µ–º 30%
                {'high': 106.0, 'low': 103.0, 'close': 105.8},  # +5.8% - –∑–∞–∫—Ä—ã–≤–∞–µ–º 20%
            ],
            'expected': 1.2*0.2 + 2.4*0.3 + 3.5*0.3 + 5.8*0.2  # = 3.19%
        },
        {
            'name': 'BUY - –°—Ç–æ–ø –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞',
            'entry_price': 100.0,
            'direction': 'buy',
            'bars': [
                {'high': 101.3, 'low': 100.1, 'close': 101.2},  # +1.2% - –∑–∞–∫—Ä—ã–≤–∞–µ–º 20%
                {'high': 101.0, 'low': 99.5, 'close': 100.0},   # –û—Ç–∫–∞—Ç
                {'high': 100.5, 'low': 100.2, 'close': 100.3},  # –°—Ç–æ–ø –≤ –±–µ–∑—É–±—ã—Ç–∫–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
            ],
            'expected': 1.2*0.2 + 0.3*0.8  # 20% –∑–∞–∫—Ä—ã—Ç–æ —Å +1.2%, 80% —Å +0.3%
        },
        {
            'name': 'SELL - –ü–æ–ª–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç',
            'entry_price': 100.0,
            'direction': 'sell',
            'bars': [
                {'high': 99.5, 'low': 94.0, 'close': 94.2},  # -5.8% - –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
            ],
            'expected': 3.17  # –° —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Ç–∞–∫–∏–º –∂–µ –∫–∞–∫ —É BUY
        },
        {
            'name': '–¢–∞–π–º–∞—É—Ç —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª—å—é',
            'entry_price': 100.0,
            'direction': 'buy',
            'bars': [{'high': 100.5, 'low': 99.5, 'close': 100.5} for _ in range(100)],
            'expected': 0.5  # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É —Å +0.5%
        }
    ]
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ prepare_dataset.py
    buy_sl_pct = 0.989   # -1.1%
    buy_tp_pct = 1.058   # +5.8%
    sell_sl_pct = 1.011  # +1.1%
    sell_tp_pct = 0.942  # -5.8%
    
    partial_levels = [
        {'percent': 1.2, 'close_ratio': 0.20},
        {'percent': 2.4, 'close_ratio': 0.30},
        {'percent': 3.5, 'close_ratio': 0.30}
    ]
    
    protection = {
        'breakeven_percent': 1.2,
        'breakeven_offset': 0.3,
        'lock_levels': [
            {'trigger': 2.4, 'lock': 1.2},
            {'trigger': 3.5, 'lock': 2.4},
            {'trigger': 4.6, 'lock': 3.5}
        ]
    }
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò")
    print("="*60)
    
    for scenario in scenarios:
        result = preparer._calculate_enhanced_result(
            scenario['entry_price'],
            scenario['bars'],
            scenario['direction'],
            buy_sl_pct if scenario['direction'] == 'buy' else sell_sl_pct,
            buy_tp_pct if scenario['direction'] == 'buy' else sell_tp_pct,
            partial_levels,
            protection
        )
        
        print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario['name']}")
        print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {scenario['direction'].upper()}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {scenario['entry_price']}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä–æ–≤: {len(scenario['bars'])}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['final_return']:.2f}%")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {scenario['expected']:.2f}%")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞: {result['exit_reason']}")
        print(f"   Realized PnL: {result['realized_pnl']:.2f}%")
        print(f"   Unrealized PnL: {result['unrealized_pnl']:.2f}%")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        if abs(result['final_return'] - scenario['expected']) < 0.01:
            print("   ‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
        else:
            print("   ‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")

def test_real_data_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\n\nüìä –°–ò–ú–£–õ–Ø–¶–ò–Ø –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫
    np.random.seed(42)
    n_bars = 1000
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    returns = np.random.normal(0, 0.02, n_bars)  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    prices = 100 * np.exp(np.cumsum(returns))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è high/low
    highs = prices * (1 + np.abs(np.random.normal(0, 0.005, n_bars)))
    lows = prices * (1 - np.abs(np.random.normal(0, 0.005, n_bars)))
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame({
        'close': prices,
        'high': highs,
        'low': lows
    })
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    preparer = MarketDatasetPreparator(None, {})
    
    wins = 0
    losses = 0
    total_return = 0
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥—ã –∫–∞–∂–¥—ã–µ 10 –±–∞—Ä–æ–≤
    for i in range(0, len(df)-100, 10):
        entry_price = df.iloc[i]['close']
        future_bars = df.iloc[i+1:i+101].to_dict('records')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º BUY
        buy_result = preparer._calculate_enhanced_result(
            entry_price, future_bars, 'buy',
            0.989, 1.058,
            [
                {'percent': 1.2, 'close_ratio': 0.20},
                {'percent': 2.4, 'close_ratio': 0.30},
                {'percent': 3.5, 'close_ratio': 0.30}
            ],
            {
                'breakeven_percent': 1.2,
                'breakeven_offset': 0.3,
                'lock_levels': [
                    {'trigger': 2.4, 'lock': 1.2},
                    {'trigger': 3.5, 'lock': 2.4}
                ]
            }
        )
        
        if buy_result['final_return'] > 0:
            wins += 1
        else:
            losses += 1
        total_return += buy_result['final_return']
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ (BUY):")
    print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {wins + losses}")
    print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {wins} ({wins/(wins+losses)*100:.1f}%)")
    print(f"   –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losses} ({losses/(wins+losses)*100:.1f}%)")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_return/(wins+losses):.2f}%")
    print(f"   –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_return:.2f}%")

if __name__ == "__main__":
    test_trading_scenarios()
    test_real_data_simulation()