#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ Transformer
"""

import psycopg2
import yaml
import numpy as np
import pandas as pd
from datetime import datetime
import logging
from train_advanced import run_training_advanced

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def analyze_risk_profile():
    """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = psycopg2.connect(
        host='localhost',
        port=5555,
        database='crypto_trading',
        user='ruslan',
        password='ruslan'
    )
    cursor = conn.cursor()
    
    logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è 1000PEPEUSDT")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç–∫–∞–º
    cursor.execute("""
        SELECT 
            COUNT(*) as total,
            SUM(buy_profit_target) as buy_profits,
            SUM(buy_loss_target) as buy_losses,
            SUM(sell_profit_target) as sell_profits,
            SUM(sell_loss_target) as sell_losses
        FROM processed_market_data
        WHERE symbol = '1000PEPEUSDT'
    """)
    
    total, buy_p, buy_l, sell_p, sell_l = cursor.fetchone()
    
    # –°—á–∏—Ç–∞–µ–º win rate
    buy_wr = (buy_p / (buy_p + buy_l) * 100) if (buy_p + buy_l) > 0 else 0
    sell_wr = (sell_p / (sell_p + sell_l) * 100) if (sell_p + sell_l) > 0 else 0
    
    # –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    # Risk/Reward = 1:5.3 (1.1% loss vs 5.8% profit)
    buy_expected = (buy_wr/100 * 5.8) - ((100-buy_wr)/100 * 1.1)
    sell_expected = (sell_wr/100 * 5.8) - ((100-sell_wr)/100 * 1.1)
    
    logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–æ–∫:")
    logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total:,}")
    logger.info(f"\nüü¢ BUY —Å–∏–≥–Ω–∞–ª—ã:")
    logger.info(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {buy_p} ({buy_wr:.2f}%)")
    logger.info(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö: {buy_l} ({100-buy_wr:.2f}%)")
    logger.info(f"  –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {buy_expected:.2f}%")
    
    logger.info(f"\nüî¥ SELL —Å–∏–≥–Ω–∞–ª—ã:")
    logger.info(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {sell_p} ({sell_wr:.2f}%)")
    logger.info(f"  –£–±—ã—Ç–æ—á–Ω—ã—Ö: {sell_l} ({100-sell_wr:.2f}%)")
    logger.info(f"  –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {sell_expected:.2f}%")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    cursor.execute("""
        SELECT 
            DATE_TRUNC('day', datetime) as day,
            SUM(buy_profit_target + buy_loss_target) as buy_signals,
            SUM(sell_profit_target + sell_loss_target) as sell_signals
        FROM processed_market_data
        WHERE symbol = '1000PEPEUSDT'
        GROUP BY day
        ORDER BY day DESC
        LIMIT 30
    """)
    
    recent_days = cursor.fetchall()
    avg_buy_signals = np.mean([d[1] for d in recent_days])
    avg_sell_signals = np.mean([d[2] for d in recent_days])
    
    logger.info(f"\nüìÖ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –¥–µ–Ω—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π):")
    logger.info(f"  BUY: {avg_buy_signals:.1f}")
    logger.info(f"  SELL: {avg_sell_signals:.1f}")
    
    cursor.close()
    conn.close()
    
    return {
        'buy_win_rate': buy_wr,
        'sell_win_rate': sell_wr,
        'buy_expected': buy_expected,
        'sell_expected': sell_expected,
        'total_records': total
    }

def optimize_model_config(risk_stats):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'epochs': 50,  # –ù–∞—á–Ω–µ–º —Å 50 —ç–ø–æ—Ö
        'batch_size': 64,
        'learning_rate': 0.001,
        'hidden_size': 256,
        'num_heads': 8,
        'num_layers': 4,
        'dropout_rate': 0.2,
        'early_stopping_patience': 10
    }
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ win rate
    avg_wr = (risk_stats['buy_win_rate'] + risk_stats['sell_win_rate']) / 2
    
    if avg_wr < 5:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π win rate
        logger.info("‚ö†Ô∏è –ù–∏–∑–∫–∏–π win rate - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
        config['hidden_size'] = 512
        config['num_layers'] = 6
        config['epochs'] = 100
        config['dropout_rate'] = 0.3
    elif avg_wr < 10:
        logger.info("üìä –°—Ä–µ–¥–Ω–∏–π win rate - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        config['hidden_size'] = 384
        config['num_layers'] = 5
        config['epochs'] = 75
    else:
        logger.info("‚úÖ –•–æ—Ä–æ—à–∏–π win rate - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        config['hidden_size'] = 256
        config['num_layers'] = 4
        config['epochs'] = 50
    
    return config

def prepare_training_config(model_config):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        base_config = yaml.safe_load(f)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
    training_config = {
        'database': base_config['database'],
        'model': {
            'architecture': 'transformer',
            'epochs': model_config['epochs'],
            'batch_size': model_config['batch_size'],
            'learning_rate': model_config['learning_rate'],
            'sequence_length': 60,
            'prediction_horizon': 100,
            'hidden_size': model_config['hidden_size'],
            'num_heads': model_config['num_heads'],
            'num_layers': model_config['num_layers'],
            'dropout_rate': model_config['dropout_rate'],
            'early_stopping_patience': model_config['early_stopping_patience']
        },
        'training': {
            'symbol': '1000PEPEUSDT',
            'validation_split': 0.2,
            'test_split': 0.1,
            'shuffle': False,  # –í–∞–∂–Ω–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
            'use_class_weights': True,
            'save_best_only': True
        },
        'paths': base_config['paths']
    }
    
    return training_config

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è
    risk_stats = analyze_risk_profile()
    
    # 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
    model_config = optimize_model_config(risk_stats)
    
    logger.info(f"\nüîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏:")
    for key, value in model_config.items():
        logger.info(f"  {key}: {value}")
    
    # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    training_config = prepare_training_config(model_config)
    
    # 4. –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    logger.info(f"\nüéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è Transformer –º–æ–¥–µ–ª–∏...")
    logger.info(f"  –°–∏–º–≤–æ–ª: 1000PEPEUSDT")
    logger.info(f"  –ó–∞–ø–∏—Å–µ–π: {risk_stats['total_records']:,}")
    logger.info(f"  –≠–ø–æ—Ö: {model_config['epochs']}")
    logger.info(f"  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {model_config['num_layers']} —Å–ª–æ–µ–≤, {model_config['hidden_size']} —Ä–∞–∑–º–µ—Ä")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('training_config_optimized.yaml', 'w') as f:
        yaml.dump(training_config, f, default_flow_style=False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    results = run_training_advanced(training_config)
    
    if results['success']:
        logger.info(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        logger.info(f"  –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {results['best_accuracy']:.2%}")
        logger.info(f"  –§–∏–Ω–∞–ª—å–Ω–∞—è loss: {results['final_loss']:.4f}")
        logger.info(f"  –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results['model_paths']}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {results.get('error')}")

if __name__ == "__main__":
    main()