#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
"""

import psycopg2
import yaml
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞...")

try:
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ processed_market_data
    alter_queries = [
        """
        ALTER TABLE processed_market_data 
        ADD COLUMN IF NOT EXISTS is_long_entry BOOLEAN DEFAULT FALSE
        """,
        """
        ALTER TABLE processed_market_data 
        ADD COLUMN IF NOT EXISTS is_short_entry BOOLEAN DEFAULT FALSE
        """,
        """
        ALTER TABLE processed_market_data 
        ADD COLUMN IF NOT EXISTS long_entry_type VARCHAR(20)
        """,
        """
        ALTER TABLE processed_market_data 
        ADD COLUMN IF NOT EXISTS short_entry_type VARCHAR(20)
        """,
        """
        ALTER TABLE processed_market_data 
        ADD COLUMN IF NOT EXISTS long_entry_confidence FLOAT
        """,
        """
        ALTER TABLE processed_market_data 
        ADD COLUMN IF NOT EXISTS short_entry_confidence FLOAT
        """
    ]
    
    for query in alter_queries:
        cursor.execute(query)
        logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: {query.strip()[:50]}...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    index_queries = [
        """
        CREATE INDEX IF NOT EXISTS idx_long_entries 
        ON processed_market_data(symbol, timestamp) 
        WHERE is_long_entry = TRUE
        """,
        """
        CREATE INDEX IF NOT EXISTS idx_short_entries 
        ON processed_market_data(symbol, timestamp) 
        WHERE is_short_entry = TRUE
        """
    ]
    
    for query in index_queries:
        cursor.execute(query)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {query.strip()[:50]}...")
    
    conn.commit()
    logger.info("‚úÖ –°—Ö–µ–º–∞ –ë–î —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("""
        SELECT column_name, data_type 
        FROM information_schema.columns 
        WHERE table_name = 'processed_market_data' 
        AND column_name IN ('is_long_entry', 'is_short_entry', 
                           'long_entry_type', 'short_entry_type',
                           'long_entry_confidence', 'short_entry_confidence')
        ORDER BY ordinal_position
    """)
    
    columns = cursor.fetchall()
    logger.info("\nüìä –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:")
    for col_name, col_type in columns:
        logger.info(f"   - {col_name}: {col_type}")
    
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
    raise
finally:
    if 'conn' in locals():
        conn.close()
        logger.info("üì§ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")