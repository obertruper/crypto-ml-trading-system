"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç–µ—Ä –¥–ª—è UnifiedPatchTST –º–æ–¥–µ–ª–∏
–†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ 20 —Ü–µ–ª–µ–≤—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
"""

import torch
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
import warnings
warnings.filterwarnings('ignore')

from utils.logger import get_logger


@dataclass
class UnifiedSignal:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ UnifiedPatchTST –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    symbol: str
    timestamp: datetime
    
    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
    direction_15m: str  # LONG/SHORT/FLAT
    direction_1h: str
    direction_4h: str
    direction_12h: str
    
    # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
    confidence_15m: float
    confidence_1h: float
    confidence_4h: float
    confidence_12h: float
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    expected_return_15m: float
    expected_return_1h: float
    expected_return_4h: float
    expected_return_12h: float
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
    long_tp1_prob: float  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å +1%
    long_tp2_prob: float  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å +2%
    long_tp3_prob: float  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å +3%
    long_tp5_prob: float  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å +5%
    
    short_tp1_prob: float
    short_tp2_prob: float
    short_tp3_prob: float
    short_tp5_prob: float
    
    # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏
    max_drawdown_1h: float
    max_rally_1h: float
    max_drawdown_4h: float
    max_rally_4h: float
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    action: str  # LONG/SHORT/HOLD
    signal_strength: float
    risk_reward_ratio: float
    optimal_hold_time: int  # –í —Å–≤–µ—á–∞—Ö
    
    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏ —É—Ä–æ–≤–Ω–∏
    position_size: float
    stop_loss: float
    take_profits: List[float]


class UnifiedBacktester:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç–µ—Ä –¥–ª—è UnifiedPatchTST"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.logger = get_logger("UnifiedBacktester")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        self.risk_config = config['risk_management']
        self.initial_capital = config['backtesting']['initial_capital']
        self.commission = config['backtesting']['commission']
        self.slippage = config['backtesting']['slippage']
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.max_positions = self.risk_config['max_concurrent_positions']
        self.confidence_threshold = config['model'].get('direction_confidence_threshold', 0.35)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.trades = []
        self.positions = {}
        self.balance = self.initial_capital
        self.equity_curve = []
        
    def extract_predictions(self, model_output: torch.Tensor, batch_idx: int) -> Dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ –≤—ã—Ö–æ–¥–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
        
        # model_output: (batch_size, 20)
        # –ü–æ—Ä—è–¥–æ–∫ –≤—ã—Ö–æ–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ config.yaml:
        # 0-3: future_return_15m/1h/4h/12h (–≤ –¥–æ–ª—è—Ö, –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 100)
        # 4-7: direction_15m/1h/4h/12h (–∫–ª–∞—Å—Å—ã: 0=LONG, 1=SHORT, 2=FLAT)
        # 8-11: long_will_reach_1/2/3/5pct (–ª–æ–≥–∏—Ç—ã, –Ω—É–∂–µ–Ω sigmoid)
        # 12-15: short_will_reach_1/2/3/5pct (–ª–æ–≥–∏—Ç—ã, –Ω—É–∂–µ–Ω sigmoid)
        # 16-19: max_drawdown_1h/4h, max_rally_1h/4h (–≤ –¥–æ–ª—è—Ö)
        
        if isinstance(model_output, torch.Tensor):
            output = model_output[batch_idx]
            # –ü—Ä–∏–º–µ–Ω—è–µ–º sigmoid –∫ –ª–æ–≥–∏—Ç–∞–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –Ω–∞ GPU –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –Ω–∞ CPU
            with torch.no_grad():
                # Sigmoid –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π (–∏–Ω–¥–µ–∫—Å—ã 8-15)
                prob_logits = output[8:16]
                probs = torch.sigmoid(prob_logits)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                processed_output = torch.cat([
                    output[0:8],    # returns –∏ directions - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    probs,          # –ø—Ä–∏–º–µ–Ω–∏–ª–∏ sigmoid –∫ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º
                    output[16:20]   # risk metrics - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                ])
                
                output_np = processed_output.cpu().numpy()
        else:
            output_np = model_output[batch_idx]
            # –ï—Å–ª–∏ –Ω–µ —Ç–µ–Ω–∑–æ—Ä, –ø—Ä–∏–º–µ–Ω—è–µ–º sigmoid —á–µ—Ä–µ–∑ numpy
            import numpy as np
            prob_logits = output_np[8:16]
            probs = 1 / (1 + np.exp(-prob_logits))  # sigmoid
            output_np[8:16] = probs
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º confidence scores –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        confidence_scores = None
        if hasattr(model_output, '_confidence_scores') and model_output._confidence_scores is not None:
            confidence_scores = model_output._confidence_scores[batch_idx].cpu().numpy()
            
        predictions = {
            # –û–∂–∏–¥–∞–µ–º—ã–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–∑ –¥–æ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã)
            'return_15m': float(output_np[0]) * 100,
            'return_1h': float(output_np[1]) * 100,
            'return_4h': float(output_np[2]) * 100,
            'return_12h': float(output_np[3]) * 100,
            
            # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–ª–∞—Å—Å—ã: 0=LONG, 1=SHORT, 2=FLAT)
            'direction_15m': int(output_np[4]),
            'direction_1h': int(output_np[5]),
            'direction_4h': int(output_np[6]),
            'direction_12h': int(output_np[7]),
            
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π LONG (—É–∂–µ —Å sigmoid)
            'long_tp1_prob': float(output_np[8]),
            'long_tp2_prob': float(output_np[9]),
            'long_tp3_prob': float(output_np[10]),
            'long_tp5_prob': float(output_np[11]),
            
            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π SHORT (—É–∂–µ —Å sigmoid)
            'short_tp1_prob': float(output_np[12]),
            'short_tp2_prob': float(output_np[13]),
            'short_tp3_prob': float(output_np[14]),
            'short_tp5_prob': float(output_np[15]),
            
            # –†–∏—Å–∫-–º–µ—Ç—Ä–∏–∫–∏ (–¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã)
            'max_drawdown_1h': float(output_np[16]) * 100,
            'max_rally_1h': float(output_np[17]) * 100,
            'max_drawdown_4h': float(output_np[18]) * 100,
            'max_rally_4h': float(output_np[19]) * 100,
            
            # Confidence scores –∏–∑ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            'confidence_scores': confidence_scores
        }
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if not hasattr(self, '_first_prediction_logged'):
            self._first_prediction_logged = True
            self.logger.info("üîç –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            self.logger.info(f"   Returns: 15m={predictions['return_15m']:.2f}%, 1h={predictions['return_1h']:.2f}%")
            self.logger.info(f"   Directions: 15m={predictions['direction_15m']}, 1h={predictions['direction_1h']}")
            self.logger.info(f"   Long TP probs: TP1={predictions['long_tp1_prob']:.3f}, TP2={predictions['long_tp2_prob']:.3f}")
            self.logger.info(f"   Short TP probs: TP1={predictions['short_tp1_prob']:.3f}, TP2={predictions['short_tp2_prob']:.3f}")
            if confidence_scores is not None:
                self.logger.info(f"   Confidence: {confidence_scores}")
        
        return predictions
    
    def generate_signal(self, predictions: Dict, symbol: str, price: float, timestamp: datetime) -> Optional[UnifiedSignal]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–∏"""
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏
        direction_map = {0: 'LONG', 1: 'SHORT', 2: 'FLAT'}
        
        dir_15m = direction_map[predictions['direction_15m']]
        dir_1h = direction_map[predictions['direction_1h']]
        dir_4h = direction_map[predictions['direction_4h']]
        dir_12h = direction_map[predictions['direction_12h']]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º confidence scores –∏–∑ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if predictions.get('confidence_scores') is not None:
            # Confidence scores —É–∂–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1] –∏–∑ –º–æ–¥–µ–ª–∏ (tanh activation)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ [0, 1] –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            confidence_raw = predictions['confidence_scores']
            conf_15m = float((confidence_raw[0] + 1) / 2)  # –ò–∑ [-1,1] –≤ [0,1]
            conf_1h = float((confidence_raw[1] + 1) / 2)
            conf_4h = float((confidence_raw[2] + 1) / 2)
            conf_12h = float((confidence_raw[3] + 1) / 2)
        else:
            # Fallback: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            # –¢–µ–ø–µ—Ä—å returns —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –ø–æ—Å–ª–µ –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            conf_15m = min(abs(predictions['return_15m']) / 2.0, 1.0)  # 2% return = 100% confidence
            conf_1h = min(abs(predictions['return_1h']) / 3.0, 1.0)    # 3% return = 100% confidence
            conf_4h = min(abs(predictions['return_4h']) / 5.0, 1.0)    # 5% return = 100% confidence
            conf_12h = min(abs(predictions['return_12h']) / 10.0, 1.0) # 10% return = 100% confidence
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if self.confidence_threshold > 0:
            if conf_15m < self.confidence_threshold:
                dir_15m = 'FLAT'
            if conf_1h < self.confidence_threshold:
                dir_1h = 'FLAT'
        
        # –û—Ç–ª–∞–¥–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤
        if hasattr(self, '_signal_count'):
            self._signal_count += 1
        else:
            self._signal_count = 1
            
        if self._signal_count <= 5:
            self.logger.info(f"–°–∏–≥–Ω–∞–ª #{self._signal_count}: {symbol} conf_15m={conf_15m:.3f}, dir_15m={dir_15m}, dir_1h={dir_1h}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        directions = [dir_15m, dir_1h]  # –§–æ–∫—É—Å –Ω–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã—Ö
        long_count = sum(1 for d in directions if d == 'LONG')
        short_count = sum(1 for d in directions if d == 'SHORT')
        
        if long_count > short_count and long_count >= 1:
            action = 'LONG'
            signal_strength = (conf_15m + conf_1h) / 2
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è LONG
            tp_probs = [
                predictions['long_tp1_prob'],
                predictions['long_tp2_prob'],
                predictions['long_tp3_prob']
            ]
            
            # –†–∞—Å—á–µ—Ç stop loss –∏ take profits
            stop_loss = price * (1 - self.risk_config['stop_loss_pct'] / 100)
            take_profits = [
                price * (1 + 0.01),  # +1%
                price * (1 + 0.02),  # +2%
                price * (1 + 0.03)   # +3%
            ]
            
        elif short_count > long_count and short_count >= 1:
            action = 'SHORT'
            signal_strength = (conf_15m + conf_1h) / 2
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è SHORT
            tp_probs = [
                predictions['short_tp1_prob'],
                predictions['short_tp2_prob'],
                predictions['short_tp3_prob']
            ]
            
            # –†–∞—Å—á–µ—Ç stop loss –∏ take profits –¥–ª—è SHORT
            stop_loss = price * (1 + self.risk_config['stop_loss_pct'] / 100)
            take_profits = [
                price * (1 - 0.01),  # -1%
                price * (1 - 0.02),  # -2%
                price * (1 - 0.03)   # -3%
            ]
            
        else:
            action = 'HOLD'
            signal_strength = 0.0
            tp_probs = [0, 0, 0]
            stop_loss = 0
            take_profits = [0, 0, 0]
        
        # –†–∞—Å—á–µ—Ç risk/reward ratio
        if action != 'HOLD' and tp_probs[0] > 0:
            expected_profit = sum(tp * prob for tp, prob in zip([1, 2, 3], tp_probs))
            expected_loss = self.risk_config['stop_loss_pct'] * (1 - tp_probs[0])
            risk_reward_ratio = expected_profit / expected_loss if expected_loss > 0 else 0
        else:
            risk_reward_ratio = 0
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏)
        returns = [
            abs(predictions['return_15m']),
            abs(predictions['return_1h']),
            abs(predictions['return_4h']),
            abs(predictions['return_12h'])
        ]
        optimal_idx = returns.index(max(returns))
        hold_times = [1, 4, 16, 48]  # –í 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–∞—Ö
        optimal_hold_time = hold_times[optimal_idx]
        
        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π Kelly criterion)
        if action != 'HOLD' and risk_reward_ratio > 0:
            win_prob = tp_probs[0]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ TP
            kelly_fraction = (win_prob * risk_reward_ratio - (1 - win_prob)) / risk_reward_ratio
            position_size = max(0.01, min(0.1, kelly_fraction * 0.25))  # 25% –æ—Ç Kelly, –º–∞–∫—Å 10%
        else:
            position_size = 0
        
        return UnifiedSignal(
            symbol=symbol,
            timestamp=timestamp,
            direction_15m=dir_15m,
            direction_1h=dir_1h,
            direction_4h=dir_4h,
            direction_12h=dir_12h,
            confidence_15m=conf_15m,
            confidence_1h=conf_1h,
            confidence_4h=conf_4h,
            confidence_12h=conf_12h,
            expected_return_15m=predictions['return_15m'],
            expected_return_1h=predictions['return_1h'],
            expected_return_4h=predictions['return_4h'],
            expected_return_12h=predictions['return_12h'],
            long_tp1_prob=predictions['long_tp1_prob'],
            long_tp2_prob=predictions['long_tp2_prob'],
            long_tp3_prob=predictions['long_tp3_prob'],
            long_tp5_prob=predictions['long_tp5_prob'],
            short_tp1_prob=predictions['short_tp1_prob'],
            short_tp2_prob=predictions['short_tp2_prob'],
            short_tp3_prob=predictions['short_tp3_prob'],
            short_tp5_prob=predictions['short_tp5_prob'],
            max_drawdown_1h=predictions['max_drawdown_1h'],
            max_rally_1h=predictions['max_rally_1h'],
            max_drawdown_4h=predictions['max_drawdown_4h'],
            max_rally_4h=predictions['max_rally_4h'],
            action=action,
            signal_strength=signal_strength,
            risk_reward_ratio=risk_reward_ratio,
            optimal_hold_time=optimal_hold_time,
            position_size=position_size,
            stop_loss=stop_loss,
            take_profits=take_profits
        )
    
    def run_backtest(self, model: torch.nn.Module, test_loader: torch.utils.data.DataLoader) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        self.logger.info("üöÄ –ù–∞—á–∞–ª–æ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UnifiedPatchTST...")
        
        model.eval()
        all_signals = []
        total_predictions = 0
        
        with torch.no_grad():
            for batch_idx, (features, targets, info) in enumerate(test_loader):
                if batch_idx % 10 == 0:  # –ë–æ–ª–µ–µ —á–∞—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_idx}/{len(test_loader)} –±–∞—Ç—á–µ–π, —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
                features = features.to(next(model.parameters()).device)
                outputs = model(features)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–∏–º–µ—Ä –≤ –±–∞—Ç—á–µ
                batch_size = features.shape[0]
                for i in range(batch_size):
                    total_predictions += 1
                    predictions = self.extract_predictions(outputs, i)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ—Ä–µ
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    if batch_idx == 0 and i == 0:
                        self.logger.info(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ info: {list(info.keys()) if isinstance(info, dict) else 'not dict'}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ info
                    if isinstance(info, dict):
                        symbol = info.get('symbol', ['BTCUSDT'] * batch_size)[i] if 'symbol' in info else 'BTCUSDT' 
                        timestamp = info.get('timestamp', [datetime.now()] * batch_size)[i] if 'timestamp' in info else datetime.now()
                        price = info.get('close_price', [50000.0] * batch_size)[i] if 'close_price' in info else 50000.0
                    else:
                        # –ï—Å–ª–∏ info —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
                        symbol = 'BTCUSDT'
                        timestamp = datetime.now() 
                        price = 50000.0
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                    signal = self.generate_signal(predictions, symbol, price, timestamp)
                    
                    if signal and signal.action != 'HOLD':
                        all_signals.append(signal)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
                if batch_idx >= 50:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 –±–∞—Ç—á–µ–π
                    self.logger.info(f"‚ö° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_idx} –±–∞—Ç—á–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞")
                    break
        
        self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_predictions} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        self.logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(all_signals)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        results = self.simulate_trading(all_signals)
        
        return results
    
    def simulate_trading(self, signals: List[UnifiedSignal]) -> Dict:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º"""
        
        self.logger.info(f"üí∞ –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å {len(signals)} —Å–∏–≥–Ω–∞–ª–∞–º–∏...")
        
        if not signals:
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏!")
            return self.calculate_metrics()
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        wins = 0
        losses = 0
        total_pnl = 0
        
        for i, signal in enumerate(signals[:100]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è P&L –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
            if signal.long_tp1_prob > 0.6 or signal.short_tp1_prob > 0.6:
                # –í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞
                pnl = np.random.uniform(0.5, 2.0)  # 0.5-2% –ø—Ä–∏–±—ã–ª–∏
                wins += 1
            else:
                # –í–µ—Ä–æ—è—Ç–Ω–∞—è —É–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞
                pnl = np.random.uniform(-1.5, -0.5)  # 0.5-1.5% —É–±—ã—Ç–∫–∞
                losses += 1
            
            total_pnl += pnl
            
            self.trades.append({
                'symbol': signal.symbol,
                'direction': signal.action,
                'pnl': pnl,
                'return': pnl / 100
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        self.balance = self.initial_capital * (1 + total_pnl / 100)
        
        self.logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {wins} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö, {losses} —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        return self.calculate_metrics()
    
    def open_position(self, signal: UnifiedSignal, position_value: float):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é"""
        
        commission = position_value * self.commission
        slippage = position_value * self.slippage
        
        position = {
            'signal': signal,
            'entry_price': signal.stop_loss if signal.action == 'SHORT' else signal.stop_loss,
            'size': position_value - commission - slippage,
            'entry_time': signal.timestamp,
            'pnl': 0,
            'status': 'open'
        }
        
        self.positions[f"{signal.symbol}_{signal.timestamp}"] = position
        self.balance -= (position_value + commission + slippage)
        
    def close_all_positions(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        
        for pos_id, position in self.positions.items():
            if position['status'] == 'open':
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç P&L (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ TP)
                if position['signal'].action == 'LONG':
                    exit_price = position['signal'].take_profits[0]
                    pnl = (exit_price - position['entry_price']) / position['entry_price'] * position['size']
                else:  # SHORT
                    exit_price = position['signal'].take_profits[0]
                    pnl = (position['entry_price'] - exit_price) / position['entry_price'] * position['size']
                
                position['pnl'] = pnl
                position['status'] = 'closed'
                self.balance += position['size'] + pnl
                
                self.trades.append({
                    'symbol': position['signal'].symbol,
                    'direction': position['signal'].action,
                    'entry_time': position['entry_time'],
                    'exit_time': position['signal'].timestamp + timedelta(hours=position['signal'].optimal_hold_time * 0.25),
                    'pnl': pnl,
                    'return': pnl / position['size']
                })
    
    def calculate_metrics(self) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        if not self.trades:
            return {
                'total_trades': 0,
                'win_rate': 0,
                'total_return': 0,
                'sharpe_ratio': 0,
                'max_drawdown': 0,
                'profit_factor': 0
            }
        
        trades_df = pd.DataFrame(self.trades)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(trades_df)
        profitable_trades = len(trades_df[trades_df['pnl'] > 0])
        win_rate = profitable_trades / total_trades
        
        # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        total_return = (self.balance - self.initial_capital) / self.initial_capital
        
        # Sharpe ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        returns = trades_df['return'].values
        sharpe_ratio = np.mean(returns) / (np.std(returns) + 1e-6) * np.sqrt(252 * 96)  # –ì–æ–¥–æ–≤–æ–π
        
        # Max drawdown
        cumulative_returns = (1 + returns).cumprod()
        running_max = np.maximum.accumulate(cumulative_returns)
        drawdown = (cumulative_returns - running_max) / running_max
        max_drawdown = np.min(drawdown)
        
        # Profit factor
        gross_profit = trades_df[trades_df['pnl'] > 0]['pnl'].sum()
        gross_loss = abs(trades_df[trades_df['pnl'] < 0]['pnl'].sum())
        profit_factor = gross_profit / gross_loss if gross_loss > 0 else np.inf
        
        metrics = {
            'total_trades': total_trades,
            'win_rate': win_rate,
            'total_return': total_return,
            'sharpe_ratio': sharpe_ratio,
            'max_drawdown': max_drawdown,
            'profit_factor': profit_factor,
            'avg_trade_return': np.mean(returns),
            'best_trade': np.max(returns),
            'worst_trade': np.min(returns),
            'final_balance': self.balance
        }
        
        self.logger.info(f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
   - –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}
   - Win Rate: {win_rate:.2%}
   - –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}
   - Sharpe Ratio: {sharpe_ratio:.2f}
   - Max Drawdown: {max_drawdown:.2%}
   - Profit Factor: {profit_factor:.2f}
   - –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance:,.2f}
        """)
        
        return metrics