#!/bin/bash

# User prompt hook –¥–ª—è ML Crypto Trading –ø—Ä–æ–µ–∫—Ç–∞
# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç

USER_PROMPT="$1"
CWD="$2"

LOG_FILE="/mnt/SSD/PYCHARMPRODJECT/LLM TRANSFORM/crypto_ai_trading/logs/hooks.log"
echo "[$(date)] USER-PROMPT: Prompt='$USER_PROMPT', CWD=$CWD" >> "$LOG_FILE"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ JSON
output_json() {
    local decision="$1"
    local message="$2"
    cat <<EOF
{
    "decision": "$decision",
    "message": "$message"
}
EOF
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
if [[ "$USER_PROMPT" =~ (–æ–±—É—á|train|–º–æ–¥–µ–ª|model) ]]; then
    echo "üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç: –†–∞–±–æ—Ç–∞ —Å ML –º–æ–¥–µ–ª—è–º–∏"
    echo "üìç –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    echo "   - train_universal_transformer.py - –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –æ–±—É—á–µ–Ω–∏—è"
    echo "   - models/patchtst_unified.py - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ PatchTST"
    echo "   - config/config.yaml - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    echo ""
fi

if [[ "$USER_PROMPT" =~ (–¥–∞–Ω–Ω|data|–∑–∞–≥—Ä—É–∑|download) ]]; then
    echo "üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç: –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏"
    echo "üîß –£—Ç–∏–ª–∏—Ç—ã:"
    echo "   - download_data.py - –∑–∞–≥—Ä—É–∑–∫–∞ —Å Bybit"
    echo "   - prepare_dataset.py - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"
    echo "   - validate_futures_symbols.py - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"
    echo ""
fi

if [[ "$USER_PROMPT" =~ (—Ç–æ—Ä–≥|trad|—Å—Ç—Ä–∞—Ç–µ–≥|signal) ]]; then
    echo "üìà –ö–æ–Ω—Ç–µ–∫—Å—Ç: –¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
    echo "üìç –§–∞–π–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:"
    echo "   - trading/signals.py - —Å–∏–≥–Ω–∞–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
    echo "   - trading/portfolio.py - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º"
    echo "   - utils/risk_management.py - —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"
    echo ""
fi

if [[ "$USER_PROMPT" =~ (test|—Ç–µ—Å—Ç|–ø—Ä–æ–≤–µ—Ä|check) ]]; then
    echo "üß™ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∏:"
    echo "   - test_model_performance.py - —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ pytest –¥–ª—è unit-—Ç–µ—Å—Ç–æ–≤"
    echo "   - monitor_training.py - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è"
    echo ""
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
if [[ "$CWD" == *"crypto_ai_trading"* ]]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    echo "üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
    
    # PostgreSQL
    if pg_isready -h localhost -p 5555 &>/dev/null; then
        echo "   ‚úÖ PostgreSQL (–ø–æ—Ä—Ç 5555) - –∞–∫—Ç–∏–≤–Ω–∞"
    else
        echo "   ‚ùå PostgreSQL (–ø–æ—Ä—Ç 5555) - –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    # GPU
    if command -v nvidia-smi &> /dev/null && nvidia-smi &>/dev/null; then
        echo "   ‚úÖ GPU - –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        echo "   ‚ö†Ô∏è  GPU - –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    fi
    
    # Python –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if [[ -d "venv_crypto" ]]; then
        echo "   ‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –Ω–∞–π–¥–µ–Ω–æ"
    else
        echo "   ‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    fi
fi

# –í—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
output_json "continue" "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞"