#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Transformer v3
"""

import os
import sys
import subprocess
import time
from pathlib import Path
from datetime import datetime

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
    os.system('clear' if os.name == 'posix' else 'cls')


def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    clear_screen()
    print(f"{Colors.CYAN}{Colors.BOLD}")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë         TRANSFORMER v3 - ML CRYPTO TRADING               ‚ïë")
    print("‚ïë              –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–ø—É—Å–∫–∞                  ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print(f"{Colors.ENDC}\n")


def print_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print(f"{Colors.YELLOW}‚ïê‚ïê‚ïê –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ‚ïê‚ïê‚ïê{Colors.ENDC}\n")
    
    print(f"{Colors.GREEN}[1]{Colors.ENDC} üöÄ –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–†–µ–≥—Ä–µ—Å—Å–∏—è)")
    print(f"    ‚îî‚îÄ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ expected returns –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"\n{Colors.GREEN}[2]{Colors.ENDC} üéØ –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)")
    print(f"    ‚îî‚îÄ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ profit/loss –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"\n{Colors.GREEN}[3]{Colors.ENDC} üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)")
    print(f"    ‚îî‚îÄ 2 —Å–∏–º–≤–æ–ª–∞, 10 —ç–ø–æ—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    
    print(f"\n{Colors.GREEN}[4]{Colors.ENDC} ‚öôÔ∏è  –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print(f"    ‚îî‚îÄ –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
    
    print(f"\n{Colors.GREEN}[5]{Colors.ENDC} üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    print(f"    ‚îî‚îÄ TensorBoard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫")
    
    print(f"\n{Colors.GREEN}[6]{Colors.ENDC} üóÑÔ∏è  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print(f"    ‚îî‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    print(f"\n{Colors.GREEN}[7]{Colors.ENDC} üìà –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print(f"    ‚îî‚îÄ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏")
    
    print(f"\n{Colors.RED}[0]{Colors.ENDC} ‚ùå –í—ã—Ö–æ–¥\n")


def run_command(cmd, description=""):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if description:
        print(f"\n{Colors.CYAN}‚ñ∂ {description}{Colors.ENDC}")
    
    print(f"{Colors.YELLOW}–ö–æ–º–∞–Ω–¥–∞: {cmd}{Colors.ENDC}\n")
    
    try:
        process = subprocess.Popen(
            cmd, 
            shell=True, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        for line in iter(process.stdout.readline, ''):
            if line:
                print(line.rstrip())
        
        process.wait()
        
        if process.returncode == 0:
            print(f"\n{Colors.GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!{Colors.ENDC}")
        else:
            print(f"\n{Colors.RED}‚ùå –û—à–∏–±–∫–∞! –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {process.returncode}{Colors.ENDC}")
            
        return process.returncode
        
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")
        process.terminate()
        return -1
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –û—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        return -1


def custom_settings_menu():
    """–ú–µ–Ω—é –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    clear_screen()
    print(f"{Colors.CYAN}{Colors.BOLD}‚öôÔ∏è  –ö–ê–°–¢–û–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò{Colors.ENDC}\n")
    
    # –ó–∞–¥–∞—á–∞
    print(f"{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:{Colors.ENDC}")
    print("[1] –†–µ–≥—Ä–µ—Å—Å–∏—è (expected returns)")
    print("[2] –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (profit/loss)")
    task_choice = input(f"\n{Colors.GREEN}–í—ã–±–æ—Ä (1-2): {Colors.ENDC}")
    task = "regression" if task_choice == "1" else "classification_binary"
    
    # –≠–ø–æ—Ö–∏
    print(f"\n{Colors.YELLOW}–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö:{Colors.ENDC}")
    print("[1] 50 (–±—ã—Å—Ç—Ä–æ)")
    print("[2] 100 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)")
    print("[3] 200 (–¥–æ–ª–≥–æ)")
    print("[4] –°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    epoch_choice = input(f"\n{Colors.GREEN}–í—ã–±–æ—Ä (1-4): {Colors.ENDC}")
    
    if epoch_choice == "1":
        epochs = 50
    elif epoch_choice == "2":
        epochs = 100
    elif epoch_choice == "3":
        epochs = 200
    else:
        epochs = int(input(f"{Colors.GREEN}–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö: {Colors.ENDC}"))
    
    # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    print(f"\n{Colors.YELLOW}–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞:{Colors.ENDC}")
    print("[1] 32 (–º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏)")
    print("[2] 64 (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)")
    print("[3] 128 (–±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏)")
    print("[4] 256 (–º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏)")
    batch_choice = input(f"\n{Colors.GREEN}–í—ã–±–æ—Ä (1-4): {Colors.ENDC}")
    
    batch_sizes = {"1": 32, "2": 64, "3": 128, "4": 256}
    batch_size = batch_sizes.get(batch_choice, 64)
    
    # –ê–Ω—Å–∞–º–±–ª—å
    print(f"\n{Colors.YELLOW}–†–∞–∑–º–µ—Ä –∞–Ω—Å–∞–º–±–ª—è:{Colors.ENDC}")
    print("[1] 1 –º–æ–¥–µ–ª—å (–±—ã—Å—Ç—Ä–æ)")
    print("[2] 3 –º–æ–¥–µ–ª–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)")
    print("[3] 5 –º–æ–¥–µ–ª–µ–π (—Ç–æ—á–Ω–µ–µ)")
    ensemble_choice = input(f"\n{Colors.GREEN}–í—ã–±–æ—Ä (1-3): {Colors.ENDC}")
    
    ensemble_sizes = {"1": 1, "2": 3, "3": 5}
    ensemble_size = ensemble_sizes.get(ensemble_choice, 3)
    
    # –°–∏–º–≤–æ–ª—ã
    print(f"\n{Colors.YELLOW}–°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:{Colors.ENDC}")
    print("[1] –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ")
    print("[2] –¢–æ–ø-10 –ø–æ –æ–±—ä–µ–º—É")
    print("[3] –¢–æ–ª—å–∫–æ BTC –∏ ETH")
    print("[4] –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é")
    symbol_choice = input(f"\n{Colors.GREEN}–í—ã–±–æ—Ä (1-4): {Colors.ENDC}")
    
    symbols_cmd = ""
    if symbol_choice == "2":
        symbols_cmd = "--limit-symbols 10"
    elif symbol_choice == "3":
        symbols_cmd = "--test-symbols BTCUSDT ETHUSDT"
    elif symbol_choice == "4":
        symbols = input(f"{Colors.GREEN}–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: {Colors.ENDC}")
        symbols_cmd = f"--test-symbols {symbols}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = f"python transformer_v3/main.py --task {task} --epochs {epochs} --batch-size {batch_size} --ensemble-size {ensemble_size} {symbols_cmd}"
    
    print(f"\n{Colors.CYAN}–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:{Colors.ENDC}")
    print(f"{Colors.YELLOW}{cmd}{Colors.ENDC}")
    
    confirm = input(f"\n{Colors.GREEN}–ó–∞–ø—É—Å—Ç–∏—Ç—å? (y/n): {Colors.ENDC}")
    if confirm.lower() == 'y':
        run_command(cmd, "–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    
    input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...{Colors.ENDC}")


def data_preparation_menu():
    """–ú–µ–Ω—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    clear_screen()
    print(f"{Colors.CYAN}{Colors.BOLD}üóÑÔ∏è  –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–•{Colors.ENDC}\n")
    
    print("[1] –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω (init ‚Üí download ‚Üí prepare)")
    print("[2] –¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î")
    print("[3] –¢–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("[4] –¢–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    print("[5] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
    print("[0] –ù–∞–∑–∞–¥")
    
    choice = input(f"\n{Colors.GREEN}–í—ã–±–æ—Ä: {Colors.ENDC}")
    
    if choice == "1":
        run_command("python run_futures_pipeline.py", "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    elif choice == "2":
        run_command("python init_database.py", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    elif choice == "3":
        run_command("python download_data.py", "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Bybit")
    elif choice == "4":
        run_command("python prepare_dataset.py", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏")
    elif choice == "5":
        cmd = """psql -h localhost -p 5555 -U ruslan -d crypto_trading -c "
            SELECT symbol, COUNT(*) as records, 
                   MIN(timestamp) as first_date, 
                   MAX(timestamp) as last_date 
            FROM raw_market_data 
            GROUP BY symbol 
            ORDER BY records DESC 
            LIMIT 20;"
        """
        run_command(cmd, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
    
    if choice != "0":
        input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...{Colors.ENDC}")


def view_results():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    clear_screen()
    print(f"{Colors.CYAN}{Colors.BOLD}üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø{Colors.ENDC}\n")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏
    log_base = Path("logs")
    if not log_base.exists():
        print(f"{Colors.RED}–ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞{Colors.ENDC}")
        input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Colors.ENDC}")
        return
    
    # –ò—â–µ–º –ø–∞–ø–∫–∏ training_*
    training_dirs = sorted([d for d in log_base.iterdir() if d.is_dir() and d.name.startswith("training_")])
    
    if not training_dirs:
        print(f"{Colors.RED}–õ–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã{Colors.ENDC}")
        input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Colors.ENDC}")
        return
    
    latest_dir = training_dirs[-1]
    print(f"{Colors.GREEN}–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ: {latest_dir.name}{Colors.ENDC}\n")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
    print(f"{Colors.YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:{Colors.ENDC}")
    
    files_to_check = [
        ("final_report.txt", "üìÑ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"),
        ("plots/training_progress.png", "üìä –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è"),
        ("plots/final_evaluation.png", "üìà –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"),
        ("training.log", "üìù –ü–æ–ª–Ω—ã–π –ª–æ–≥ –æ–±—É—á–µ–Ω–∏—è")
    ]
    
    available_files = []
    for i, (file_path, description) in enumerate(files_to_check, 1):
        full_path = latest_dir / file_path
        if full_path.exists():
            print(f"[{i}] {description}")
            available_files.append((i, full_path))
    
    print(f"\n[0] –ù–∞–∑–∞–¥")
    
    choice = input(f"\n{Colors.GREEN}–ß—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å? {Colors.ENDC}")
    
    if choice == "0":
        return
    
    try:
        choice_num = int(choice)
        for num, path in available_files:
            if num == choice_num:
                if path.suffix in ['.png', '.jpg']:
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if sys.platform == "darwin":  # macOS
                        subprocess.run(["open", str(path)])
                    elif sys.platform == "linux":
                        subprocess.run(["xdg-open", str(path)])
                    else:  # Windows
                        subprocess.run(["start", str(path)], shell=True)
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    if path.name == "training.log":
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞
                        subprocess.run(["tail", "-n", "50", str(path)])
                    else:
                        subprocess.run(["cat", str(path)])
                break
    except:
        pass
    
    input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Colors.ENDC}")


def monitor_training():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±—É—á–µ–Ω–∏—è"""
    clear_screen()
    print(f"{Colors.CYAN}{Colors.BOLD}üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–ë–£–ß–ï–ù–ò–Ø{Colors.ENDC}\n")
    
    print("[1] TensorBoard (–¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)")
    print("[2] Monitor —Å–∫—Ä–∏–ø—Ç (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)")
    print("[0] –ù–∞–∑–∞–¥")
    
    choice = input(f"\n{Colors.GREEN}–í—ã–±–æ—Ä: {Colors.ENDC}")
    
    if choice == "1":
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É tensorboard
        log_base = Path("logs")
        training_dirs = sorted([d for d in log_base.iterdir() if d.is_dir() and d.name.startswith("training_")])
        
        if training_dirs:
            latest_dir = training_dirs[-1]
            tb_dir = latest_dir / "tensorboard"
            if tb_dir.exists():
                print(f"\n{Colors.YELLOW}–ó–∞–ø—É—Å–∫–∞—é TensorBoard...{Colors.ENDC}")
                print(f"–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {Colors.CYAN}http://localhost:6006{Colors.ENDC}\n")
                run_command(f"tensorboard --logdir {tb_dir}", "TensorBoard")
            else:
                print(f"{Colors.RED}TensorBoard –ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã{Colors.ENDC}")
        else:
            print(f"{Colors.RED}–õ–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã{Colors.ENDC}")
            
    elif choice == "2":
        run_command("python monitor_training.py", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è")
    
    if choice != "0":
        input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞...{Colors.ENDC}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    while True:
        print_header()
        print_menu()
        
        choice = input(f"{Colors.GREEN}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-7): {Colors.ENDC}")
        
        if choice == "0":
            print(f"\n{Colors.CYAN}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã{Colors.ENDC}\n")
            break
            
        elif choice == "1":
            # –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å –≤—ã–±–æ—Ä–æ–º –∫—ç—à–∞
            clear_screen()
            print(f"{Colors.CYAN}{Colors.BOLD}üöÄ –ü–û–õ–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï (–†–ï–ì–†–ï–°–°–ò–Ø){Colors.ENDC}\n")
            print(f"{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:{Colors.ENDC}\n")
            print("[1] üì¶ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
            print("    ‚îî‚îÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (sequence_length=100)")
            print("[2] üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏") 
            print("    ‚îî‚îÄ –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (sequence_length=50, –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)")
            print("[3] üÜï –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ –∫—ç—à–∞")
            print("    ‚îî‚îÄ main_simplified.py —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            print("[0] ‚Ü©Ô∏è  –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")
            
            cache_choice = input(f"{Colors.GREEN}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-3): {Colors.ENDC}")
            
            if cache_choice == "1":
                cmd = "python transformer_v3/main.py --task regression"
                run_command(cmd, "–ó–∞–ø—É—Å–∫ —Å –∫—ç—à–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
            elif cache_choice == "2":
                # –£–¥–∞–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
                print(f"\n{Colors.YELLOW}–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π –∫—ç—à –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...{Colors.ENDC}")
                subprocess.run(["ssh", "-p", "42244", "root@84.68.60.115", "rm -f cache/transformer_v3/sequences_*.pkl"])
                cmd = "python transformer_v3/main.py --task regression"
                run_command(cmd, "–ó–∞–ø—É—Å–∫ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
            elif cache_choice == "3":
                cmd = "python transformer_v3/main_simplified.py --task regression --no-cache"
                run_command(cmd, "–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
            elif cache_choice == "0":
                continue
            else:
                print(f"\n{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{Colors.ENDC}")
                time.sleep(1)
                continue
                
            input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...{Colors.ENDC}")
            
        elif choice == "2":
            # –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            cmd = "python transformer_v3/main.py --task classification_binary"
            run_command(cmd, "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)")
            input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...{Colors.ENDC}")
            
        elif choice == "3":
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            cmd = "python transformer_v3/main.py --test-mode"
            run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            input(f"\n{Colors.YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...{Colors.ENDC}")
            
        elif choice == "4":
            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            custom_settings_menu()
            
        elif choice == "5":
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitor_training()
            
        elif choice == "6":
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data_preparation_menu()
            
        elif choice == "7":
            # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            view_results()
            
        else:
            print(f"\n{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!{Colors.ENDC}")
            time.sleep(1)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}\n")
    except Exception as e:
        print(f"\n{Colors.RED}–û—à–∏–±–∫–∞: {e}{Colors.ENDC}\n")