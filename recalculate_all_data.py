#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
"""

import psycopg2
import yaml
import subprocess
import os
import time

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

print("="*80)
print("üîÑ –ü–û–õ–ù–´–ô –ü–ï–†–ï–°–ß–ï–¢ –î–ê–ù–ù–´–•")
print("="*80)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(**db_config)
cursor = conn.cursor()

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
print("\nüìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:")
cursor.execute("SELECT COUNT(*) FROM processed_market_data")
current_count = cursor.fetchone()[0]
print(f"   –ó–∞–ø–∏—Å–µ–π –≤ processed_market_data: {current_count:,}")

cursor.execute("SELECT COUNT(DISTINCT symbol) FROM processed_market_data")
current_symbols = cursor.fetchone()[0]
print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {current_symbols}")

# 2. –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
cursor.execute("""
    SELECT 
        COUNT(DISTINCT buy_expected_return) as unique_buy,
        COUNT(DISTINCT sell_expected_return) as unique_sell,
        COUNT(*) as total
    FROM processed_market_data
""")
result = cursor.fetchone()
if result:
    unique_buy, unique_sell, total = result
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å buy_expected_return: {unique_buy/total*100:.1f}%")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å sell_expected_return: {unique_sell/total*100:.1f}%")

# 3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!")
print("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:")
print("1. –£–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ processed_market_data")
print("2. –ü–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏ expected_return —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")
print("3. –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤")

response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
if response.lower() != 'yes':
    print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    conn.close()
    exit()

# 4. –£–¥–∞–ª—è–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
checkpoint_file = 'prepare_dataset_checkpoint.pkl'
if os.path.exists(checkpoint_file):
    os.remove(checkpoint_file)
    print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —á–µ–∫–ø–æ–∏–Ω—Ç: {checkpoint_file}")

# 5. –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã processed_market_data...")
cursor.execute("TRUNCATE TABLE processed_market_data")
conn.commit()
print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞")

# 6. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º prepare_dataset
conn.close()

# 7. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç
print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö...")
print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤...")
print("   –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –Ω–∏–∂–µ:\n")

start_time = time.time()

try:
    # –ó–∞–ø—É—Å–∫–∞–µ–º prepare_dataset.py
    process = subprocess.Popen(
        ['python', 'prepare_dataset.py'],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
        bufsize=1
    )
    
    # –í—ã–≤–æ–¥–∏–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    for line in iter(process.stdout.readline, ''):
        if line:
            print(line.rstrip())
    
    process.wait()
    
    if process.returncode == 0:
        print("\n‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–¥: {process.returncode})")
        
except KeyboardInterrupt:
    print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'python prepare_dataset.py --resume' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
    process.terminate()
    
elapsed_time = time.time() - start_time
print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed_time/60:.1f} –º–∏–Ω—É—Ç")

# 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
conn = psycopg2.connect(**db_config)
cursor = conn.cursor()

cursor.execute("SELECT COUNT(*) FROM processed_market_data")
new_count = cursor.fetchone()[0]
print(f"   –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {new_count:,}")

cursor.execute("SELECT COUNT(DISTINCT symbol) FROM processed_market_data")
new_symbols = cursor.fetchone()[0]
print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {new_symbols}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
cursor.execute("""
    SELECT 
        COUNT(DISTINCT buy_expected_return) as unique_buy,
        COUNT(DISTINCT sell_expected_return) as unique_sell,
        COUNT(*) as total
    FROM processed_market_data
""")
result = cursor.fetchone()
if result:
    unique_buy, unique_sell, total = result
    buy_uniqueness = unique_buy/total*100
    sell_uniqueness = unique_sell/total*100
    print(f"\nüìä –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å buy_expected_return: {buy_uniqueness:.1f}%")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å sell_expected_return: {sell_uniqueness:.1f}%")
    
    if buy_uniqueness > 50 and sell_uniqueness > 50:
        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_universal_transformer.py --task regression")
    else:
        print("\n‚ö†Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ –µ—â–µ –Ω–∏–∑–∫–∞—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞.")

conn.close()

print("\n" + "="*80)