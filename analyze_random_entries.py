#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª—É—á–∞–π–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
"""

import psycopg2
import yaml
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('default')
sns.set_palette("husl")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

print("="*80)
print("üé≤ –ê–ù–ê–õ–ò–ó –°–õ–£–ß–ê–ô–ù–´–• –¢–û–ß–ï–ö –í–•–û–î–ê")
print("="*80)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(**db_config)

# 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
query = """
SELECT 
    COUNT(*) as total_bars,
    SUM(CASE WHEN is_long_entry THEN 1 ELSE 0 END) as long_entries,
    SUM(CASE WHEN is_short_entry THEN 1 ELSE 0 END) as short_entries,
    AVG(buy_expected_return) as avg_all_buy,
    AVG(sell_expected_return) as avg_all_sell,
    AVG(CASE WHEN is_long_entry THEN buy_expected_return END) as avg_random_long,
    AVG(CASE WHEN is_short_entry THEN sell_expected_return END) as avg_random_short,
    COUNT(DISTINCT buy_expected_return) as unique_buy,
    COUNT(DISTINCT sell_expected_return) as unique_sell
FROM processed_market_data
"""

df_stats = pd.read_sql(query, conn)
print("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(f"   –í—Å–µ–≥–æ –±–∞—Ä–æ–≤: {df_stats['total_bars'][0]:,}")
print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å buy_expected_return: {df_stats['unique_buy'][0]/df_stats['total_bars'][0]*100:.1f}%")
print(f"   –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å sell_expected_return: {df_stats['unique_sell'][0]/df_stats['total_bars'][0]*100:.1f}%")

print(f"\nüé≤ –°–ª—É—á–∞–π–Ω—ã–µ –≤—Ö–æ–¥—ã:")
print(f"   LONG –≤—Ö–æ–¥–æ–≤: {df_stats['long_entries'][0]:,} ({df_stats['long_entries'][0]/df_stats['total_bars'][0]*100:.1f}%)")
print(f"   SHORT –≤—Ö–æ–¥–æ–≤: {df_stats['short_entries'][0]:,} ({df_stats['short_entries'][0]/df_stats['total_bars'][0]*100:.1f}%)")

print(f"\nüìà –°—Ä–µ–¥–Ω–∏–µ expected returns:")
print(f"   –í—Å–µ –±–∞—Ä—ã BUY: {df_stats['avg_all_buy'][0]:.3f}%")
print(f"   –í—Å–µ –±–∞—Ä—ã SELL: {df_stats['avg_all_sell'][0]:.3f}%")
print(f"   –°–ª—É—á–∞–π–Ω—ã–µ LONG: {df_stats['avg_random_long'][0]:.3f}%")
print(f"   –°–ª—É—á–∞–π–Ω—ã–µ SHORT: {df_stats['avg_random_short'][0]:.3f}%")

# 2. Win rate –∞–Ω–∞–ª–∏–∑
query_winrate = """
SELECT 
    -- –í—Å–µ –±–∞—Ä—ã
    SUM(CASE WHEN buy_expected_return > 0 THEN 1 ELSE 0 END)::FLOAT / COUNT(*) * 100 as all_buy_winrate,
    SUM(CASE WHEN sell_expected_return > 0 THEN 1 ELSE 0 END)::FLOAT / COUNT(*) * 100 as all_sell_winrate,
    -- –°–ª—É—á–∞–π–Ω—ã–µ –≤—Ö–æ–¥—ã
    SUM(CASE WHEN is_long_entry AND buy_expected_return > 0 THEN 1 ELSE 0 END)::FLOAT / 
        NULLIF(SUM(CASE WHEN is_long_entry THEN 1 ELSE 0 END), 0) * 100 as random_long_winrate,
    SUM(CASE WHEN is_short_entry AND sell_expected_return > 0 THEN 1 ELSE 0 END)::FLOAT / 
        NULLIF(SUM(CASE WHEN is_short_entry THEN 1 ELSE 0 END), 0) * 100 as random_short_winrate
FROM processed_market_data
"""

df_wr = pd.read_sql(query_winrate, conn)
print(f"\nüéØ Win Rate:")
print(f"   –í—Å–µ –±–∞—Ä—ã BUY: {df_wr['all_buy_winrate'][0]:.1f}%")
print(f"   –í—Å–µ –±–∞—Ä—ã SELL: {df_wr['all_sell_winrate'][0]:.1f}%")
print(f"   –°–ª—É—á–∞–π–Ω—ã–µ LONG: {df_wr['random_long_winrate'][0]:.1f}%")
print(f"   –°–ª—É—á–∞–π–Ω—ã–µ SHORT: {df_wr['random_short_winrate'][0]:.1f}%")

# 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ returns
query_dist = """
SELECT 
    buy_expected_return,
    sell_expected_return,
    is_long_entry,
    is_short_entry
FROM processed_market_data
WHERE buy_expected_return IS NOT NULL
LIMIT 100000
"""

df_dist = pd.read_sql(query_dist, conn)

# 4. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –≤—ã—Ö–æ–¥–∞
query_exits = """
WITH exit_analysis AS (
    SELECT 
        CASE 
            WHEN is_long_entry AND buy_expected_return <= -1.0 THEN 'LONG Stop Loss'
            WHEN is_long_entry AND buy_expected_return >= 5.0 THEN 'LONG Take Profit'
            WHEN is_long_entry AND buy_expected_return > 0 THEN 'LONG Partial/Timeout Profit'
            WHEN is_long_entry THEN 'LONG Timeout Loss'
            WHEN is_short_entry AND sell_expected_return <= -1.0 THEN 'SHORT Stop Loss'
            WHEN is_short_entry AND sell_expected_return >= 5.0 THEN 'SHORT Take Profit'
            WHEN is_short_entry AND sell_expected_return > 0 THEN 'SHORT Partial/Timeout Profit'
            WHEN is_short_entry THEN 'SHORT Timeout Loss'
        END as exit_type,
        CASE 
            WHEN is_long_entry THEN buy_expected_return
            WHEN is_short_entry THEN sell_expected_return
        END as return_pct
    FROM processed_market_data
    WHERE is_long_entry OR is_short_entry
)
SELECT 
    exit_type,
    COUNT(*) as count,
    AVG(return_pct) as avg_return
FROM exit_analysis
WHERE exit_type IS NOT NULL
GROUP BY exit_type
ORDER BY exit_type
"""

df_exits = pd.read_sql(query_exits, conn)
print("\nüìä –ê–Ω–∞–ª–∏–∑ –≤—ã—Ö–æ–¥–æ–≤ –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:")
for _, row in df_exits.iterrows():
    print(f"   {row['exit_type']}: {row['count']} ({row['avg_return']:.2f}%)")

# 5. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")

fig, axes = plt.subplots(2, 3, figsize=(18, 10))
fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞', fontsize=16)

# –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö returns vs —Å–ª—É—á–∞–π–Ω—ã—Ö
ax1 = axes[0, 0]
# –í—Å–µ –±–∞—Ä—ã
ax1.hist(df_dist['buy_expected_return'], bins=100, alpha=0.4, label='–í—Å–µ –±–∞—Ä—ã', density=True, color='blue')
# –°–ª—É—á–∞–π–Ω—ã–µ –≤—Ö–æ–¥—ã
random_long = df_dist[df_dist['is_long_entry']]['buy_expected_return']
ax1.hist(random_long, bins=50, alpha=0.7, label=f'–°–ª—É—á–∞–π–Ω—ã–µ LONG (n={len(random_long)})', density=True, color='red')
ax1.axvline(x=0, color='black', linestyle='--', alpha=0.5)
ax1.set_xlabel('Buy Expected Return (%)')
ax1.set_ylabel('Density')
ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BUY returns')
ax1.legend()
ax1.grid(True, alpha=0.3)
ax1.set_xlim(-2, 6)

# –ì—Ä–∞—Ñ–∏–∫ 2: –¢–æ –∂–µ –¥–ª—è SELL
ax2 = axes[0, 1]
ax2.hist(df_dist['sell_expected_return'], bins=100, alpha=0.4, label='–í—Å–µ –±–∞—Ä—ã', density=True, color='blue')
random_short = df_dist[df_dist['is_short_entry']]['sell_expected_return']
ax2.hist(random_short, bins=50, alpha=0.7, label=f'–°–ª—É—á–∞–π–Ω—ã–µ SHORT (n={len(random_short)})', density=True, color='red')
ax2.axvline(x=0, color='black', linestyle='--', alpha=0.5)
ax2.set_xlabel('Sell Expected Return (%)')
ax2.set_ylabel('Density')
ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SELL returns')
ax2.legend()
ax2.grid(True, alpha=0.3)
ax2.set_xlim(-2, 6)

# –ì—Ä–∞—Ñ–∏–∫ 3: Win Rate —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
ax3 = axes[0, 2]
categories = ['–í—Å–µ\nBUY', '–°–ª—É—á–∞–π–Ω—ã–µ\nLONG', '–í—Å–µ\nSELL', '–°–ª—É—á–∞–π–Ω—ã–µ\nSHORT']
win_rates = [
    df_wr['all_buy_winrate'][0],
    df_wr['random_long_winrate'][0],
    df_wr['all_sell_winrate'][0],
    df_wr['random_short_winrate'][0]
]
colors = ['lightblue', 'darkblue', 'lightcoral', 'darkred']
bars = ax3.bar(categories, win_rates, color=colors)
ax3.axhline(y=50, color='black', linestyle='--', alpha=0.5)
ax3.set_ylabel('Win Rate (%)')
ax3.set_title('Win Rate: –í—Å–µ –±–∞—Ä—ã vs –°–ª—É—á–∞–π–Ω—ã–µ –≤—Ö–æ–¥—ã')
ax3.grid(True, alpha=0.3, axis='y')

# –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
for bar, wr in zip(bars, win_rates):
    height = bar.get_height()
    ax3.text(bar.get_x() + bar.get_width()/2., height + 0.5,
             f'{wr:.1f}%', ha='center', va='bottom')

# –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º returns
ax4 = axes[1, 0]
ranges = [(-100, -1), (-1, 0), (0, 1), (1, 3), (3, 10)]
range_labels = ['< -1%', '-1% to 0%', '0% to 1%', '1% to 3%', '> 3%']

# –î–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö LONG
long_counts = []
for low, high in ranges:
    count = len(random_long[(random_long >= low) & (random_long < high)])
    long_counts.append(count)

# –î–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö SHORT
short_counts = []
for low, high in ranges:
    count = len(random_short[(random_short >= low) & (random_short < high)])
    short_counts.append(count)

x = np.arange(len(range_labels))
width = 0.35

bars1 = ax4.bar(x - width/2, long_counts, width, label='LONG', color='blue')
bars2 = ax4.bar(x + width/2, short_counts, width, label='SHORT', color='red')

ax4.set_xlabel('Return Range')
ax4.set_ylabel('Count')
ax4.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º return')
ax4.set_xticks(x)
ax4.set_xticklabels(range_labels)
ax4.legend()
ax4.grid(True, alpha=0.3, axis='y')

# –ì—Ä–∞—Ñ–∏–∫ 5: –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π return
ax5 = axes[1, 1]
# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
query_cumulative = """
SELECT 
    timestamp,
    CASE WHEN is_long_entry THEN buy_expected_return ELSE 0 END as long_return,
    CASE WHEN is_short_entry THEN sell_expected_return ELSE 0 END as short_return
FROM processed_market_data
WHERE is_long_entry OR is_short_entry
ORDER BY timestamp
LIMIT 10000
"""
df_cum = pd.read_sql(query_cumulative, conn)
df_cum['cum_long'] = df_cum['long_return'].cumsum()
df_cum['cum_short'] = df_cum['short_return'].cumsum()
df_cum['cum_total'] = (df_cum['long_return'] + df_cum['short_return']).cumsum()

ax5.plot(df_cum.index, df_cum['cum_long'], label='LONG', color='blue', alpha=0.7)
ax5.plot(df_cum.index, df_cum['cum_short'], label='SHORT', color='red', alpha=0.7)
ax5.plot(df_cum.index, df_cum['cum_total'], label='Total', color='green', linewidth=2)
ax5.axhline(y=0, color='black', linestyle='--', alpha=0.5)
ax5.set_xlabel('Trade Number')
ax5.set_ylabel('Cumulative Return (%)')
ax5.set_title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π return —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ (–ø–µ—Ä–≤—ã–µ 10k)')
ax5.legend()
ax5.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
ax6 = axes[1, 2]
query_symbols = """
SELECT 
    symbol,
    COUNT(CASE WHEN is_long_entry THEN 1 END) as long_entries,
    COUNT(CASE WHEN is_short_entry THEN 1 END) as short_entries,
    AVG(CASE WHEN is_long_entry THEN buy_expected_return END) as avg_long,
    AVG(CASE WHEN is_short_entry THEN sell_expected_return END) as avg_short
FROM processed_market_data
GROUP BY symbol
HAVING COUNT(CASE WHEN is_long_entry THEN 1 END) > 100
ORDER BY (avg_long + avg_short) / 2 DESC
LIMIT 10
"""
df_symbols = pd.read_sql(query_symbols, conn)

symbols = df_symbols['symbol'].tolist()
avg_returns = ((df_symbols['avg_long'] + df_symbols['avg_short']) / 2).tolist()

bars = ax6.barh(symbols, avg_returns)
ax6.axvline(x=0, color='black', linestyle='--', alpha=0.5)
ax6.set_xlabel('Average Return (%)')
ax6.set_title('–¢–æ–ø-10 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É return —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤')
ax6.grid(True, alpha=0.3, axis='x')

# –†–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º –±–∞—Ä—ã
for bar, ret in zip(bars, avg_returns):
    bar.set_color('green' if ret > 0 else 'red')

plt.tight_layout()
plt.savefig('random_entries_analysis.png', dpi=150, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: random_entries_analysis.png")

# 7. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
print("\n" + "="*80)
print("üìå –í–´–í–û–î–´:")
print("="*80)

avg_random_return = (df_stats['avg_random_long'][0] + df_stats['avg_random_short'][0]) / 2
avg_random_wr = (df_wr['random_long_winrate'][0] + df_wr['random_short_winrate'][0]) / 2

print(f"\nüé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è:")
print(f"   - –°—Ä–µ–¥–Ω–∏–π return: {avg_random_return:.3f}%")
print(f"   - –°—Ä–µ–¥–Ω–∏–π win rate: {avg_random_wr:.1f}%")

if avg_random_wr < 40:
    print(f"\n‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    print(f"   - Win rate —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ ~{avg_random_wr:.0f}% (–æ–∂–∏–¥–∞–µ–º–æ–µ: 30-40%)")
    print(f"   - –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–µ –≤—Ö–æ–¥—ã —É–±—ã—Ç–æ—á–Ω—ã")
    print(f"   - –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –Ω–∞—É—á–∏—Ç—å—Å—è —É–ª—É—á—à–∏—Ç—å —ç—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
else:
    print(f"\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–µ!")
    print(f"   - Win rate {avg_random_wr:.0f}% —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤")
    print(f"   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è")

print(f"\nüí° –ó–∞–¥–∞—á–∞ –¥–ª—è –º–æ–¥–µ–ª–∏:")
print(f"   1. –ù–∞—É—á–∏—Ç—å—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å expected_return –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º")
print(f"   2. –í—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ predicted_return > 1.5%")
print(f"   3. –¶–µ–ª–µ–≤–æ–π win rate > 60% (—Å–µ–π—á–∞—Å —Å–ª—É—á–∞–π–Ω—ã–π: {avg_random_wr:.1f}%)")
print(f"   4. –¶–µ–ª–µ–≤–æ–π —Å—Ä–µ–¥–Ω–∏–π return > 1% (—Å–µ–π—á–∞—Å —Å–ª—É—á–∞–π–Ω—ã–π: {avg_random_return:.3f}%)")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
if df_stats['unique_buy'][0]/df_stats['total_bars'][0] > 0.8 and \
   df_stats['unique_sell'][0]/df_stats['total_bars'][0] > 0.8:
    print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
    print(f"   - –í—ã—Å–æ–∫–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å expected_returns")
    print(f"   - –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö –±–∞—Ä–∞—Ö")
    print(f"   - –°–ª—É—á–∞–π–Ω—ã–µ –≤—Ö–æ–¥—ã —Å–ª—É–∂–∞—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
else:
    print(f"\n‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö!")
    print(f"   - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–µ—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")

conn.close()
print("\n" + "="*80)