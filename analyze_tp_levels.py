#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –ø–æ –≥–æ–¥–∞–º
"""

import psycopg2
import yaml
import pandas as pd
import numpy as np
from prepare_dataset import MarketDatasetPreparator, PostgreSQLManager
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

print("="*80)
print("üéØ –ê–ù–ê–õ–ò–ó –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –£–†–û–í–ù–ï–ô –ß–ê–°–¢–ò–ß–ù–´–• –ó–ê–ö–†–´–¢–ò–ô –ü–û –ì–û–î–ê–ú")
print("="*80)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db_manager = PostgreSQLManager(db_config)
db_manager.connect()
preparator = MarketDatasetPreparator(db_manager, config['risk_profile'])

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ALGOUSDT
symbol = 'ALGOUSDT'
print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞: {symbol}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
df = preparator.load_raw_data(symbol)
if len(df) == 0:
    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    exit()

# –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
df['year'] = pd.to_datetime(df['datetime']).dt.year
years = sorted(df['year'].unique())
print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã: {years}")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
buy_sl_pct = 0.989  # -1.1%
buy_tp_pct = 1.058  # +5.8%
partial_tp_levels = [
    {'percent': 1.2, 'close_ratio': 0.20},  # TP1
    {'percent': 2.4, 'close_ratio': 0.30},  # TP2
    {'percent': 3.5, 'close_ratio': 0.30}   # TP3
]

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –≥–æ–¥–∞–º
all_years_stats = {}

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≥–æ–¥
for year in years:
    year_df = df[df['year'] == year].reset_index(drop=True)
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ–¥—ã —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
    if len(year_df) < 1100:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1100 –∑–∞–ø–∏—Å–µ–π (1000 + lookahead)
        print(f"\n‚ö†Ô∏è {year}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(year_df)} –∑–∞–ø–∏—Å–µ–π)")
        continue
    
    print(f"\nüìÖ –ê–Ω–∞–ª–∏–∑ {year} –≥–æ–¥–∞ ({len(year_df)} –∑–∞–ø–∏—Å–µ–π)...")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–ª—è –≥–æ–¥–∞
    stats = {
        'total_positions': 0,
        'reached_tp1': 0,
        'reached_tp2': 0,
        'reached_tp3': 0,
        'reached_final_tp': 0,
        'hit_sl_direct': 0,
        'hit_sl_after_tp1': 0,
        'hit_sl_after_tp2': 0,
        'hit_sl_after_tp3': 0,
        'timeout_no_tp': 0,
        'timeout_after_tp1': 0,
        'timeout_after_tp2': 0,
        'timeout_after_tp3': 0
    }
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –±–∞—Ä–∞–º
    lookahead_limit = 100
    positions_to_analyze = min(1000, len(year_df) - lookahead_limit)
    
    for i in range(positions_to_analyze):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ 1000 –ø–æ–∑–∏—Ü–∏–π
        entry_price = year_df.iloc[i]['close']
        stats['total_positions'] += 1
        
        # –£—Ä–æ–≤–Ω–∏ —Ü–µ–Ω
        sl_price = entry_price * buy_sl_pct
        tp1_price = entry_price * 1.012  # +1.2%
        tp2_price = entry_price * 1.024  # +2.4%
        tp3_price = entry_price * 1.035  # +3.5%
        final_tp_price = entry_price * buy_tp_pct  # +5.8%
        
        # –ê–Ω–∞–ª–∏–∑ –±—É–¥—É—â–∏—Ö –±–∞—Ä–æ–≤
        reached_levels = []
        hit_sl = False
        hit_final_tp = False
        exit_bar = None
        
        for j in range(i + 1, min(i + lookahead_limit + 1, len(year_df))):
            high = year_df.iloc[j]['high']
            low = year_df.iloc[j]['low']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π (–≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç –Ω–∏–∑—à–µ–≥–æ –∫ –≤—ã—Å—à–µ–º—É)
            if not hit_sl and not hit_final_tp:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SL
                if low <= sl_price:
                    hit_sl = True
                    exit_bar = j - i
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ TP –±—ã–ª SL
                    if 'tp3' in reached_levels:
                    stats['hit_sl_after_tp3'] += 1
                elif 'tp2' in reached_levels:
                    stats['hit_sl_after_tp2'] += 1
                elif 'tp1' in reached_levels:
                    stats['hit_sl_after_tp1'] += 1
                else:
                    stats['hit_sl_direct'] += 1
                break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP1
            if high >= tp1_price and 'tp1' not in reached_levels:
                reached_levels.append('tp1')
                stats['reached_tp1'] += 1
                # –ü–æ—Å–ª–µ TP1 —Å—Ç–æ–ø –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ +0.3%
                sl_price = entry_price * 1.003
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP2
            if high >= tp2_price and 'tp2' not in reached_levels:
                reached_levels.append('tp2')
                stats['reached_tp2'] += 1
                # –ü–æ—Å–ª–µ TP2 —Å—Ç–æ–ø –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ +1.2%
                sl_price = entry_price * 1.012
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP3
            if high >= tp3_price and 'tp3' not in reached_levels:
                reached_levels.append('tp3')
                stats['reached_tp3'] += 1
                # –ü–æ—Å–ª–µ TP3 —Å—Ç–æ–ø –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ +2.4%
                sl_price = entry_price * 1.024
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ TP
            if high >= final_tp_price:
                hit_final_tp = True
                stats['reached_final_tp'] += 1
                exit_bar = j - i
                break
    
    # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–∏ –Ω–∏ –ø–æ SL, –Ω–∏ –ø–æ TP - timeout
    if not hit_sl and not hit_final_tp:
        if 'tp3' in reached_levels:
            stats['timeout_after_tp3'] += 1
        elif 'tp2' in reached_levels:
            stats['timeout_after_tp2'] += 1
        elif 'tp1' in reached_levels:
            stats['timeout_after_tp1'] += 1
        else:
            stats['timeout_no_tp'] += 1

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ({stats['total_positions']} –ø–æ–∑–∏—Ü–∏–π):")
print("\nüéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π TP:")
print(f"   TP1 (+1.2%): {stats['reached_tp1']} ({stats['reached_tp1']/stats['total_positions']*100:.1f}%)")
print(f"   TP2 (+2.4%): {stats['reached_tp2']} ({stats['reached_tp2']/stats['total_positions']*100:.1f}%)")
print(f"   TP3 (+3.5%): {stats['reached_tp3']} ({stats['reached_tp3']/stats['total_positions']*100:.1f}%)")
print(f"   Final TP (+5.8%): {stats['reached_final_tp']} ({stats['reached_final_tp']/stats['total_positions']*100:.1f}%)")

print("\n‚ùå –í—ã—Ö–æ–¥—ã –ø–æ Stop Loss:")
print(f"   –ü—Ä—è–º–æ–π SL (–±–µ–∑ TP): {stats['hit_sl_direct']} ({stats['hit_sl_direct']/stats['total_positions']*100:.1f}%)")
print(f"   SL –ø–æ—Å–ª–µ TP1: {stats['hit_sl_after_tp1']} ({stats['hit_sl_after_tp1']/stats['total_positions']*100:.1f}%)")
print(f"   SL –ø–æ—Å–ª–µ TP2: {stats['hit_sl_after_tp2']} ({stats['hit_sl_after_tp2']/stats['total_positions']*100:.1f}%)")
print(f"   SL –ø–æ—Å–ª–µ TP3: {stats['hit_sl_after_tp3']} ({stats['hit_sl_after_tp3']/stats['total_positions']*100:.1f}%)")

print("\n‚è±Ô∏è –í—ã—Ö–æ–¥—ã –ø–æ Timeout:")
print(f"   Timeout –±–µ–∑ TP: {stats['timeout_no_tp']} ({stats['timeout_no_tp']/stats['total_positions']*100:.1f}%)")
print(f"   Timeout –ø–æ—Å–ª–µ TP1: {stats['timeout_after_tp1']} ({stats['timeout_after_tp1']/stats['total_positions']*100:.1f}%)")
print(f"   Timeout –ø–æ—Å–ª–µ TP2: {stats['timeout_after_tp2']} ({stats['timeout_after_tp2']/stats['total_positions']*100:.1f}%)")
print(f"   Timeout –ø–æ—Å–ª–µ TP3: {stats['timeout_after_tp3']} ({stats['timeout_after_tp3']/stats['total_positions']*100:.1f}%)")

# –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
total_with_partials = stats['reached_tp1']
print(f"   –ü–æ–∑–∏—Ü–∏–π —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏: {total_with_partials} ({total_with_partials/stats['total_positions']*100:.1f}%)")
print(f"   –ü–æ–∑–∏—Ü–∏–π –±–µ–∑ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π: {stats['total_positions'] - total_with_partials} ({(stats['total_positions'] - total_with_partials)/stats['total_positions']*100:.1f}%)")

# –°—Ä–µ–¥–Ω—è—è –≥–ª—É–±–∏–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
avg_depth = (stats['reached_tp1'] * 1 + 
             (stats['reached_tp2'] - stats['reached_tp1']) * 2 + 
             (stats['reached_tp3'] - stats['reached_tp2']) * 3 + 
             (stats['reached_final_tp'] - stats['reached_tp3']) * 4) / stats['reached_tp1'] if stats['reached_tp1'] > 0 else 0

print(f"\n   –°—Ä–µ–¥–Ω—è—è –≥–ª—É–±–∏–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è TP: {avg_depth:.2f}")
print("   (1 = —Ç–æ–ª—å–∫–æ TP1, 2 = –¥–æ TP2, 3 = –¥–æ TP3, 4 = –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ)")

db_manager.disconnect()
print("\n" + "="*80)