#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª–µ–Ω–∏–µ expected_returns –∏–∑ technical_indicators
"""

import psycopg2
from psycopg2.extras import Json, execute_values
import json
import yaml
import logging
from tqdm import tqdm

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def fix_data_leakage():
    """–£–¥–∞–ª—è–µ—Ç expected_returns –∏–∑ technical_indicators –≤–æ –≤—Å–µ—Ö –∑–∞–ø–∏—Å—è—Ö"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**db_config)
    conn.autocommit = False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    try:
        with conn.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            cursor.execute("SELECT COUNT(*) FROM processed_market_data")
            total_count = cursor.fetchone()[0]
            logger.info(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_count:,}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏
            batch_size = 10000
            offset = 0
            fixed_count = 0
            
            with tqdm(total=total_count, desc="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö") as pbar:
                while offset < total_count:
                    # –ß–∏—Ç–∞–µ–º –±–∞—Ç—á –∑–∞–ø–∏—Å–µ–π
                    cursor.execute("""
                        SELECT id, technical_indicators 
                        FROM processed_market_data 
                        ORDER BY id
                        LIMIT %s OFFSET %s
                    """, (batch_size, offset))
                    
                    records = cursor.fetchall()
                    updates = []
                    
                    for record_id, indicators in records:
                        if indicators:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Ç–µ—á–∫–∏
                            if 'buy_expected_return' in indicators or 'sell_expected_return' in indicators:
                                # –£–¥–∞–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                                cleaned_indicators = {k: v for k, v in indicators.items() 
                                                    if k not in ['buy_expected_return', 'sell_expected_return']}
                                updates.append((Json(cleaned_indicators), record_id))
                                fixed_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
                    if updates:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π executemany –¥–ª—è UPDATE
                        cursor.executemany(
                            "UPDATE processed_market_data SET technical_indicators = %s WHERE id = %s",
                            updates
                        )
                        
                        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
                        if (offset // batch_size) % 10 == 0:
                            conn.commit()
                            logger.info(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {fixed_count} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...")
                    
                    offset += batch_size
                    pbar.update(len(records))
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π commit
            conn.commit()
            
            logger.info(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_count:,}")
            logger.info(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {fixed_count:,}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            cursor.execute("""
                SELECT COUNT(*) 
                FROM processed_market_data 
                WHERE technical_indicators::text LIKE '%expected_return%'
            """)
            remaining = cursor.fetchone()[0]
            
            if remaining == 0:
                logger.info("   ‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞!")
            else:
                logger.error(f"   ‚ùå –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å —É—Ç–µ—á–∫–æ–π: {remaining}")
                
    except Exception as e:
        conn.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        conn.close()
        logger.info("\nüì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    logger.info("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    if response.lower() == 'y':
        fix_data_leakage()
    else:
        logger.info("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")