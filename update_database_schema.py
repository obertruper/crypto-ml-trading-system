#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import psycopg2
import yaml
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def update_database_schema():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É processed_market_data"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    
    try:
        logger.info("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        alter_queries = [
            """
            ALTER TABLE processed_market_data 
            ADD COLUMN IF NOT EXISTS buy_expected_return DECIMAL(10, 4) DEFAULT 0.0
            """,
            """
            ALTER TABLE processed_market_data 
            ADD COLUMN IF NOT EXISTS sell_expected_return DECIMAL(10, 4) DEFAULT 0.0
            """,
            """
            ALTER TABLE processed_market_data 
            ADD COLUMN IF NOT EXISTS buy_max_profit DECIMAL(10, 4) DEFAULT 0.0
            """,
            """
            ALTER TABLE processed_market_data 
            ADD COLUMN IF NOT EXISTS sell_max_profit DECIMAL(10, 4) DEFAULT 0.0
            """,
            """
            ALTER TABLE processed_market_data 
            ADD COLUMN IF NOT EXISTS buy_realized_profit DECIMAL(10, 4) DEFAULT 0.0
            """,
            """
            ALTER TABLE processed_market_data 
            ADD COLUMN IF NOT EXISTS sell_realized_profit DECIMAL(10, 4) DEFAULT 0.0
            """
        ]
        
        for query in alter_queries:
            cursor.execute(query)
            logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: {query.strip()[:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        index_queries = [
            """
            CREATE INDEX IF NOT EXISTS idx_buy_expected_return 
            ON processed_market_data(buy_expected_return)
            """,
            """
            CREATE INDEX IF NOT EXISTS idx_sell_expected_return 
            ON processed_market_data(sell_expected_return)
            """
        ]
        
        for query in index_queries:
            cursor.execute(query)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {query.strip()[:50]}...")
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'processed_market_data' 
            ORDER BY ordinal_position
        """)
        
        columns = cursor.fetchall()
        
        logger.info("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã processed_market_data:")
        for col_name, col_type in columns:
            logger.info(f"   {col_name}: {col_type}")
        
        logger.info("\n‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
        conn.rollback()
        raise
    finally:
        cursor.close()
        conn.close()


if __name__ == "__main__":
    update_database_schema()