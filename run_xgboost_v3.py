#!/usr/bin/env python3
"""
–£–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ XGBoost v3.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import os
import sys
import subprocess
import time
import json
from datetime import datetime
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    "uk": {
        "host": "ssh1.vast.ai",
        "port": 18645,
        "user": "root",
        "name": "UK EPYC 64-Core + 2√óRTX 4090",
        "gpu": "2√óRTX 4090 + 64 CPU cores + 251GB RAM",
        "features": ["GPU", "–ú–æ—â–Ω—ã–π CPU", "–ú–Ω–æ–≥–æ RAM"],
        "performance": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è"
    },
    "vast1": {
        "host": "ssh3.vast.ai",
        "port": 17929,
        "user": "root",
        "name": "Vast.ai RTX 4090 (—Å—Ç–∞—Ä—ã–π)",
        "gpu": "2 √ó RTX 4090 (24GB)",
        "features": ["GPU"],
        "performance": "–°—Ä–µ–¥–Ω—è—è"
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
OPTIMIZATIONS = {
    "powerful_server": {
        "cpu_threshold": 64,
        "ram_threshold_gb": 100,
        "data_loader_workers": 50,
        "optuna_parallel_jobs": 32,
        "adasyn_neighbors": 15,
        "batch_size": 50
    },
    "normal_server": {
        "cpu_threshold": 8,
        "ram_threshold_gb": 16,
        "data_loader_workers": 10,
        "optuna_parallel_jobs": 1,
        "adasyn_neighbors": 5,
        "batch_size": 10
    }
}

def check_remote_connection(server_info):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    cmd = f"ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -p {server_info['port']} {server_info['user']}@{server_info['host']} 'echo OK'"
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0
    except:
        return False

def run_remote_command(server_info, command, monitor=True):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    ssh_cmd = f"ssh -p {server_info['port']} {server_info['user']}@{server_info['host']}"
    
    # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ä—Ç –ë–î
    ssh_cmd += " -R 5555:localhost:5555"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    check_cmd = f'{ssh_cmd} "nproc && free -g | grep Mem | awk \'{{print \\$2}}\'"'
    try:
        result = subprocess.run(check_cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            cpu_count = int(lines[0])
            ram_gb = int(lines[1]) if len(lines) > 1 else 16
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
            env_vars = ""
            if cpu_count >= OPTIMIZATIONS["powerful_server"]["cpu_threshold"]:
                print(f"üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω –º–æ—â–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {cpu_count} CPU, {ram_gb}GB RAM")
                env_vars = "export SERVER_TYPE=powerful && "
            else:
                env_vars = "export SERVER_TYPE=normal && "
    except:
        env_vars = ""
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
    remote_cmd = f"cd /workspace && mkdir -p logs && {env_vars}{command}"
    
    full_cmd = f'{ssh_cmd} "{remote_cmd}"'
    
    print(f"\nüöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_info['name']}...")
    print(f"üìç –ö–æ–º–∞–Ω–¥–∞: {command}")
    print(f"üîß –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {server_info['gpu']}")
    print("="*60)
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if monitor:
        monitor_thread = threading.Thread(
            target=monitor_remote_training, 
            args=(server_info,),
            daemon=True
        )
        monitor_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    start_time = time.time()
    result = os.system(full_cmd)
    elapsed_time = time.time() - start_time
    
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time/60:.1f} –º–∏–Ω—É—Ç")
    return result

def monitor_remote_training(server_info):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    ssh_cmd = f"ssh -p {server_info['port']} {server_info['user']}@{server_info['host']}"
    
    while True:
        time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
        check_cmd = f'{ssh_cmd} "tail -n 5 /workspace/logs/*/training.log 2>/dev/null | grep -E \'Epoch|Loss|Accuracy\'"'
        
        try:
            result = subprocess.run(check_cmd, shell=True, capture_output=True, text=True)
            if result.stdout.strip():
                print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {result.stdout.strip()}")
        except:
            pass

def sync_to_server(server_info):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    print(f"\nüì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ {server_info['name']}...")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç
    rsync_cmd = f"rsync -avz -e 'ssh -p {server_info['port']}' "
    rsync_cmd += "--exclude='logs/' --exclude='__pycache__/' --exclude='.git/' --exclude='*.pyc' "
    rsync_cmd += f"/Users/ruslan/PycharmProjects/LLM\\ TRANSFORM/xgboost_v3/ "
    rsync_cmd += f"{server_info['user']}@{server_info['host']}:/workspace/xgboost_v3/"
    
    result = os.system(rsync_cmd)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    if result == 0:
        if os.path.exists(opt_file.replace("\\", "")):
            rsync_opt = f"rsync -avz -e 'ssh -p {server_info['port']}' "
            rsync_opt += f"{opt_file} "
            rsync_opt += f"{server_info['user']}@{server_info['host']}:/workspace/"
            os.system(rsync_opt)
    
    if result == 0:
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        check_packages_on_server(server_info)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    return result == 0

def check_packages_on_server(server_info):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    ssh_cmd = f"ssh -p {server_info['port']} {server_info['user']}@{server_info['host']}"
    
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    check_cmd = f'{ssh_cmd} "cd /workspace && python3 -c \'import xgboost, optuna, psutil; print(\\\"‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\\\")\' 2>&1"'
    result = subprocess.run(check_cmd, shell=True, capture_output=True, text=True)
    
    if "ModuleNotFoundError" in result.stderr or "ImportError" in result.stderr:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤...")
        install_cmd = f'{ssh_cmd} "cd /workspace && pip install xgboost optuna psutil GPUtil -q"'
        os.system(install_cmd)

def download_results(server_info):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å {server_info['name']}...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    result_dir = f"/Users/ruslan/PycharmProjects/LLM TRANSFORM/logs_from_gpu/{server_info['name'].replace(' ', '_')}_{timestamp}"
    os.makedirs(result_dir, exist_ok=True)
    
    rsync_cmd = f"rsync -avz --progress -e 'ssh -p {server_info['port']}' "
    rsync_cmd += f"{server_info['user']}@{server_info['host']}:/workspace/logs/ "
    rsync_cmd += f"{result_dir.replace(' ', '\\ ')}/"
    
    result = os.system(rsync_cmd)
    
    if result == 0:
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ {result_dir}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        show_results_summary(result_dir)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

def show_results_summary(log_dir):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
    import glob
    reports = glob.glob(f"{log_dir}/**/final_report.txt", recursive=True)
    
    if reports:
        latest_report = max(reports, key=os.path.getmtime)
        print(f"\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: {os.path.basename(os.path.dirname(latest_report))}")
        
        # –ß–∏—Ç–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        with open(latest_report, 'r') as f:
            lines = f.readlines()
            for line in lines:
                if any(key in line for key in ['Accuracy:', 'Precision:', 'Recall:', 'F1:', 'ROC-AUC:']):
                    print(f"   {line.strip()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π
    models = glob.glob(f"{log_dir}/**/*.json", recursive=True)
    if models:
        print(f"\nüíæ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    plots = glob.glob(f"{log_dir}/**/*.png", recursive=True)
    if plots:
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(plots)}")

def show_server_performance_analysis():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤")
    print("="*60)
    
    for key, server in SERVERS.items():
        print(f"\nüñ•Ô∏è {server['name']}")
        print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {server['gpu']}")
        print(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {server['performance']}")
        print(f"   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(server['features'])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if check_remote_connection(server):
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            ssh_cmd = f"ssh -p {server['port']} {server['user']}@{server['host']}"
            
            # CPU –∏ RAM
            cmd = f'{ssh_cmd} "nproc && free -g | grep Mem"'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: {lines[0]} CPU")
                if len(lines) > 1:
                    mem_info = lines[1].split()
                    print(f"   üíæ RAM: {mem_info[1]}GB –≤—Å–µ–≥–æ, {mem_info[6]}GB —Å–≤–æ–±–æ–¥–Ω–æ")
            
            # GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            gpu_cmd = f'{ssh_cmd} "nvidia-smi --query-gpu=name,memory.total,memory.free --format=csv,noheader 2>/dev/null"'
            gpu_result = subprocess.run(gpu_cmd, shell=True, capture_output=True, text=True)
            if gpu_result.returncode == 0 and gpu_result.stdout.strip():
                print("   üéÆ GPU:")
                for gpu_line in gpu_result.stdout.strip().split('\n'):
                    print(f"      {gpu_line}")
        else:
            print("   ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   ‚Ä¢ UK —Å–µ—Ä–≤–µ—Ä –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –æ–±—É—á–µ–Ω–∏—è (64 CPU + 251GB RAM)")
    print("   ‚Ä¢ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–∞–µ—Ç 10-15x –ø—Ä–∏—Ä–æ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏")
    print("   ‚Ä¢ –î–ª—è —Ç–µ—Å—Ç–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")

def show_optimization_settings():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π")
    print("="*60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã
    import multiprocessing
    cpu_count = multiprocessing.cpu_count()
    
    print(f"üíª –¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞: {cpu_count} CPU")
    
    current_type = "powerful_server" if cpu_count >= 64 else "normal_server"
    print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {current_type}\n")
    
    for profile_name, settings in OPTIMIZATIONS.items():
        print(f"{'üöÄ' if profile_name == 'powerful_server' else 'üíª'} –ü—Ä–æ—Ñ–∏–ª—å: {profile_name}")
        print(f"   CPU –ø–æ—Ä–æ–≥: {settings['cpu_threshold']} —è–¥–µ—Ä")
        print(f"   RAM –ø–æ—Ä–æ–≥: {settings['ram_threshold_gb']} GB")
        print(f"   DataLoader –≤–æ—Ä–∫–µ—Ä—ã: {settings['data_loader_workers']}")
        print(f"   Optuna –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {settings['optuna_parallel_jobs']}")
        print(f"   ADASYN —Å–æ—Å–µ–¥–∏: {settings['adasyn_neighbors']}")
        print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {settings['batch_size']}")
        print()
    
    print("üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
    print("   ‚Ä¢ –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Ä–µ—Å—É—Ä—Å—ã")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏")
    print("   ‚Ä¢ –î–ª—è –º–æ—â–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è Optuna")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if os.environ.get('SERVER_TYPE'):
        print(f"\nüîß –¢–µ–∫—É—â–∏–π SERVER_TYPE: {os.environ.get('SERVER_TYPE')}")

def quick_launch_best_server():
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ –ª—É—á—à–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    print("\n‚ö° –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π
    best_server = None
    best_server_key = None
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ (UK —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)
    priority_order = ["uk", "vast1"]
    
    for server_key in priority_order:
        server = SERVERS[server_key]
        if check_remote_connection(server):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {server['name']}")
            best_server = server
            best_server_key = server_key
            break
    
    if not best_server:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ...")
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å GPU —Ç–µ—Å—Ç–æ–º
        command = "python xgboost_v3/main.py --test-mode --optimize --ensemble-size 5 --gpu"
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫: {command}\n")
        os.system(command)
        return
    
    print(f"\nüéØ –í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: {best_server['name']}")
    print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {best_server['gpu']}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    print("\nüì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...")
    if not sync_to_server(best_server):
        print("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        return
    
    # –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞
    if "64 CPU" in best_server['gpu']:
        # –ú–æ—â–Ω—ã–π —Å–µ—Ä–≤–µ—Ä - –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤ –ü–†–û–î–ê–ö–®–ù —Ä–µ–∂–∏–º–µ (–º–æ—â–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)")
        command = "python3 xgboost_v3/main.py --task classification_binary --optimize --ensemble-size 10 --gpu"
    else:
        # –û–±—ã—á–Ω—ã–π GPU —Å–µ—Ä–≤–µ—Ä - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
        print("\n‚ö° –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞")
        command = "python3 xgboost_v3/main.py --test-mode --optimize --ensemble-size 5 --gpu"
    
    # –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    run_remote_command(best_server, command, monitor=True)
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    download_choice = input("\nüì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? (y/n): ").strip().lower()
    if download_choice == 'y':
        download_results(best_server)

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        # –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        args = ' '.join(sys.argv[1:])
        command = f"python xgboost_v3/main.py {args}"
        print(f"üöÄ –ó–∞–ø—É—Å–∫: {command}\n")
        os.system(command)
        return
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
    print("""
ü§ñ XGBoost v3.0.1 - ML —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
==========================================================
üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: Temporal –ø—Ä–∏–∑–Ω–∞–∫–∏ ‚â§ 2%, Technical ‚â• 85%

–ì–¥–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?
1. üíª –õ–æ–∫–∞–ª—å–Ω–æ (CPU)
2. üöÄ –ù–∞ GPU —Å–µ—Ä–≤–µ—Ä–µ (Vast.ai) 
3. üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
4. üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
5. üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
6. ‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ –ª—É—á—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
7. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
0. ‚ùå –í—ã—Ö–æ–¥

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –í–∞—Ä–∏–∞–Ω—Ç 6 –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
""")
    
    mode_choice = input("–í–∞—à –≤—ã–±–æ—Ä (0-7): ").strip()
    
    if mode_choice == "0":
        print("–í—ã—Ö–æ–¥...")
        return
    elif mode_choice == "7":
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Feature Selection...")
        test_command = "python xgboost_v3/test_feature_selection_fixes.py"
        print(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {test_command}\n")
        os.system(test_command)
        return
    elif mode_choice == "3":
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
        server_map = {}
        for i, (key, server) in enumerate(SERVERS.items(), 1):
            print(f"{i}. {server['name']} ({server['gpu']})")
            server_map[str(i)] = key
            
        server_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (1-2): ").strip()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if server_choice in server_map:
            server_choice = server_map[server_choice]
            
        if server_choice in SERVERS:
            download_results(SERVERS[server_choice])
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞")
        return
    elif mode_choice == "4":
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        show_server_performance_analysis()
        return
    elif mode_choice == "5":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        show_optimization_settings()
        return
    elif mode_choice == "6":
        # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ –ª—É—á—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
        quick_launch_best_server()
        return
    elif mode_choice == "2":
        # –£–¥–∞–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
        print("\nüñ•Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
        available_servers = []
        server_map = {}  # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        
        for i, (key, server) in enumerate(SERVERS.items(), 1):
            if check_remote_connection(server):
                print(f"‚úÖ {i}. {server['name']} - {server['gpu']}")
                available_servers.append(key)
                server_map[str(i)] = key
            else:
                print(f"‚ùå {i}. {server['name']} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        if not available_servers:
            print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return
            
        server_choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (1-2 –∏–ª–∏ vast1/vast2): ").strip()
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        if server_choice in server_map:
            server_choice = server_map[server_choice]
            
        if server_choice not in available_servers:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        server_info = SERVERS[server_choice]
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        sync_choice = input("\nüì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç? (y/n): ").strip().lower()
        if sync_choice == 'y':
            if not sync_to_server(server_info):
                return
                
        # –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        remote_mode = "remote"
    else:
        remote_mode = "local"
        server_info = None
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    print(f"""
ü§ñ XGBoost v3.0 - ML —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞
==========================================================
{'üöÄ –†–ï–ñ–ò–ú: GPU –°–ï–†–í–ï–† - ' + server_info['name'] if remote_mode == 'remote' else 'üíª –†–ï–ñ–ò–ú: –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö'}

‚ö° –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
1. üß™ –¢–ï–°–¢ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ Feature Selection (–ù–û–í–û–ï!)
   ‚Ä¢ ‚úÖ Temporal –ø—Ä–∏–∑–Ω–∞–∫–∏ ‚â§ 2% (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ)
   ‚Ä¢ ‚úÖ Technical –ø—Ä–∏–∑–Ω–∞–∫–∏ ‚â• 85% 
   ‚Ä¢ ‚úÖ Blacklist –¥–ª—è dow_cos, dow_sin, is_weekend
   ‚Ä¢ ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è
   ‚Ä¢ üìä 2 —Å–∏–º–≤–æ–ª–∞, 80 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, 5 –º–æ–¥–µ–ª–µ–π
   
2. ‚ö° GPU –¢–ï–°–¢ - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (2-3 –º–∏–Ω)
   ‚Ä¢ üéÆ RTX 4090 —É—Å–∫–æ—Ä–µ–Ω–∏–µ (10-15x)
   ‚Ä¢ üìä BTCUSDT + ETHUSDT
   ‚Ä¢ üîç 80 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –æ—Ç–±–æ—Ä–∞

–ü–û–õ–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
3. üéØ –ü–†–û–î–ê–ö–®–ù —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ (CPU)
   ‚Ä¢ üìä –í—Å–µ 51 —Å–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–æ–≤
   ‚Ä¢ üîç 120 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (85% technical)
   ‚Ä¢ ü§ñ 10 –º–æ–¥–µ–ª–µ–π –≤ –∞–Ω—Å–∞–º–±–ª–µ
   ‚Ä¢ ‚è±Ô∏è ~2-3 —á–∞—Å–∞ –Ω–∞ CPU
   
4. üöÄ –ü–†–û–î–ê–ö–®–ù –Ω–∞ GPU (15-20 –º–∏–Ω)
   ‚Ä¢ üéÆ 2√óRTX 4090 + 64 CPU
   ‚Ä¢ üìä –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
   ‚Ä¢ üîç –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è Optuna (32 –≤–æ—Ä–∫–µ—Ä–∞)
   ‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è

–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –†–ï–ñ–ò–ú–´:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
5. üìà –†–µ–≥—Ä–µ—Å—Å–∏—è (expected returns)
   ‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è MAE –≤–º–µ—Å—Ç–æ AUC
   
6. üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç (–æ—Ç–ª–∞–¥–∫–∞)
   ‚Ä¢ 2 —Å–∏–º–≤–æ–ª–∞, 3 –º–æ–¥–µ–ª–∏, 20 Optuna
   ‚Ä¢ –î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   
7. üîç –ê–Ω–∞–ª–∏–∑ Feature Importance
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
   ‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ temporal
   
8. üìã –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
0. ‚ùå –í—ã—Ö–æ–¥

üÜï –ù–û–í–û–ï –≤ v3.0.1:
‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–∞—Ö
‚Ä¢ Temporal –ø—Ä–∏–∑–Ω–∞–∫–∏ –∂–µ—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã 2%
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ rolling windows

üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –í–∞—Ä–∏–∞–Ω—Ç 1 –∏–ª–∏ 2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
""")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (0-8): ").strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É python –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    python_cmd = "python3" if remote_mode == "remote" else "python"
    
    commands = {
        "1": f"{python_cmd} xgboost_v3/main.py --test-mode --optimize --ensemble-size 5",  # –¢–µ—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        "2": f"{python_cmd} xgboost_v3/main.py --test-mode --optimize --ensemble-size 5 --gpu",  # GPU —Ç–µ—Å—Ç
        "3": f"{python_cmd} xgboost_v3/main.py --task classification_binary --optimize --ensemble-size 10",  # –ü—Ä–æ–¥–∞–∫—à–Ω CPU
        "4": f"{python_cmd} xgboost_v3/main.py --task classification_binary --optimize --ensemble-size 10 --gpu",  # –ü—Ä–æ–¥–∞–∫—à–Ω GPU
        "5": f"{python_cmd} xgboost_v3/main.py --task regression --optimize --test-mode",  # –†–µ–≥—Ä–µ—Å—Å–∏—è
        "6": f"{python_cmd} xgboost_v3/main.py --test-mode --optimize --ensemble-size 3",  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        "7": f"{python_cmd} xgboost_v3/check_feature_importance.py",  # –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    }
    
    if choice == "0":
        print("–í—ã—Ö–æ–¥...")
        return
        
    elif choice == "8":
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        print("  --task [classification_binary|regression] - —Ç–∏–ø –∑–∞–¥–∞—á–∏")
        print("  --test-mode - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–∞ 2 —Å–∏–º–≤–æ–ª–∞—Ö")
        print("  --no-cache - –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –¥–∞–Ω–Ω—ã—Ö")
        print("  --optimize - –∑–∞–ø—É—Å—Ç–∏—Ç—å Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        print("  --ensemble-size N - —Ä–∞–∑–º–µ—Ä –∞–Ω—Å–∞–º–±–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)")
        print("  --gpu - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        print("  --config PATH - –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YAML")
        print("\nüÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ v3.0.1:")
        print("  ‚Ä¢ Hierarchical feature selection: 85% technical, 2% temporal")
        print("  ‚Ä¢ Temporal blacklist: dow_cos, dow_sin, is_weekend –∏—Å–∫–ª—é—á–µ–Ω—ã")
        print("  ‚Ä¢ Feature importance validation –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")
        print("  ‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω—ã rolling windows: [20, 60] –≤–º–µ—Å—Ç–æ [5, 10, 20, 60]")
        print("  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:")
        print("  --test-mode --optimize --ensemble-size 3  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç")
        print("  --task regression --optimize  # —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
        print("  --optimize --ensemble-size 10 --gpu  # –ø—Ä–æ–¥–∞–∫—à–Ω –Ω–∞ GPU")
        print("\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        command = input(f"> {python_cmd} xgboost_v3/main.py ")
        command = f"{python_cmd} xgboost_v3/main.py {command}"
        
    elif choice in commands:
        command = commands[choice]
        print(f"\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        if choice == "1":
            print("  üß™ –¢–ï–°–¢ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ Feature Selection")
            print("  ‚úÖ Temporal –ø—Ä–∏–∑–Ω–∞–∫–∏ –∂–µ—Å—Ç–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã 2%")
            print("  ‚úÖ Technical –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 85%")
            print("  ‚úÖ Blacklist: dow_cos, dow_sin, is_weekend")
            print("  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")
            print("  üìä –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 5-10 –º–∏–Ω—É—Ç –Ω–∞ CPU")
        elif choice == "2":
            print("  ‚ö° GPU –¢–ï–°–¢ - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
            print("  üéÆ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ: 10-15x")
            print("  üìä 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            print("  ‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 2-3 –º–∏–Ω—É—Ç—ã")
            if remote_mode == "remote" and "64 CPU" in server_info['gpu']:
                print("  ‚ú® + 64 CPU –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π Optuna")
        elif choice == "3":
            print("  üéØ –ü–†–û–î–ê–ö–®–ù —Ä–µ–∂–∏–º —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ (CPU)")
            print("  üìä –í—Å–µ 51 —Å–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–æ–≤")
            print("  üîç 120 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –æ—Ç–±–æ—Ä–∞")
            print("  ü§ñ 10 –º–æ–¥–µ–ª–µ–π –≤ –∞–Ω—Å–∞–º–±–ª–µ")
            print("  ‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 2-3 —á–∞—Å–∞")
        elif choice == "4":
            print("  üöÄ –ü–†–û–î–ê–ö–®–ù –Ω–∞ GPU - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
            print("  üéÆ 2√óRTX 4090 –¥–æ—Å—Ç—É–ø–Ω–æ")
            print("  üìä –í—Å–µ —Å–∏–º–≤–æ–ª—ã + –ø–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            print("  ‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 15-20 –º–∏–Ω—É—Ç")
            if remote_mode == "remote" and "64 CPU" in server_info['gpu']:
                print("  ‚ú® 32 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö Optuna –≤–æ—Ä–∫–µ—Ä–∞")
                print("  ‚ú® 251GB RAM –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–µ–π")
        elif choice == "5":
            print("  üìà –†–ï–ì–†–ï–°–°–ò–Ø - –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ expected returns")
            print("  üìä –¢–æ—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            print("  üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è MAE –≤–º–µ—Å—Ç–æ AUC")
            print("  ‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 5-10 –º–∏–Ω—É—Ç")
        elif choice == "6":
            print("  üîß –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            print("  üìä 2 —Å–∏–º–≤–æ–ª–∞, 3 –º–æ–¥–µ–ª–∏")
            print("  üéØ 20 –ø–æ–ø—ã—Ç–æ–∫ Optuna (–±—ã—Å—Ç—Ä–æ)")
            print("  ‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 3-5 –º–∏–Ω—É—Ç")
        elif choice == "7":
            print("  üîç –ê–ù–ê–õ–ò–ó Feature Importance")
            print("  üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
            print("  ‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ temporal")
            print("  ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
            
        if choice != "7":  # –ù–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
            if "optimize" in command:
                if choice == "6":
                    print("  ‚úÖ Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: 20 –ø–æ–ø—ã—Ç–æ–∫ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è)")
                else:
                    print("  ‚úÖ Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: 100 –ø–æ–ø—ã—Ç–æ–∫")
            else:
                print("  ‚ö†Ô∏è  –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ (–±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)")
                
            if "test-mode" in command:
                print("  ‚úÖ –¢–µ—Å—Ç —Ä–µ–∂–∏–º: BTCUSDT, ETHUSDT")
            else:
                print("  ‚úÖ –ü–æ–ª–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: 51 —Å–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–æ–≤")
                
            if "ensemble-size" in command:
                size = command.split("ensemble-size")[1].strip().split()[0]
                print(f"  ‚úÖ –†–∞–∑–º–µ—Ä –∞–Ω—Å–∞–º–±–ª—è: {size} –º–æ–¥–µ–ª–µ–π")
                
            if "regression" in command:
                print("  ‚úÖ –†–µ–∂–∏–º: —Ä–µ–≥—Ä–µ—Å—Å–∏—è (expected returns)")
            else:
                print("  ‚úÖ –†–µ–∂–∏–º: –±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (–ø–æ—Ä–æ–≥ 1.5%)")
                
            if "--gpu" in command:
                print("  ‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: GPU (RTX 4090)")
            else:
                print("  ‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: CPU")
                
            # Feature selection —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
            if choice in ["1", "2", "5", "6"]:
                print("  ‚úÖ Feature Selection: —Ç–æ–ø-80 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                print("  ‚úÖ Hierarchical –æ—Ç–±–æ—Ä: 85% technical, 2% temporal")
            else:
                print("  ‚úÖ Feature Selection: —Ç–æ–ø-120 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                print("  ‚úÖ Hierarchical –æ—Ç–±–æ—Ä: 85% technical, 2% temporal")
                
            print("  ‚úÖ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞: ADASYN")
            print("  ‚úÖ Temporal blacklist: dow_cos, dow_sin, is_weekend")
            print("  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏: –≤–∫–ª—é—á–µ–Ω–∞")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
        
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    if remote_mode == "remote":
        # –£–¥–∞–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫
        print(f"\nüöÄ –£–¥–∞–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–∞ {server_info['name']}")
        run_remote_command(server_info, command)
        
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        download_choice = input("\nüì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã? (y/n): ").strip().lower()
        if download_choice == 'y':
            download_results(server_info)
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫: {command}\n")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        result = os.system(command)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result == 0:
            print("\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ logs/")
            print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã:")
            print("   ‚Ä¢ final_report.txt - –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç")
            print("   ‚Ä¢ metrics.json - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            print("   ‚Ä¢ plots/ - –≥—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è")
        else:
            print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
            print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ logs/")


if __name__ == "__main__":
    main()