#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
"""

import psycopg2
import yaml
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('default')
sns.set_palette("husl")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

print("="*80)
print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–• –¢–û–ß–ï–ö –í–•–û–î–ê")
print("="*80)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(**db_config)

# 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
query = """
SELECT 
    COUNT(*) as total_bars,
    SUM(CASE WHEN is_long_entry THEN 1 ELSE 0 END) as long_entries,
    SUM(CASE WHEN is_short_entry THEN 1 ELSE 0 END) as short_entries,
    AVG(CASE WHEN is_long_entry THEN buy_expected_return END) as avg_long_return,
    AVG(CASE WHEN is_short_entry THEN sell_expected_return END) as avg_short_return,
    STDDEV(CASE WHEN is_long_entry THEN buy_expected_return END) as std_long_return,
    STDDEV(CASE WHEN is_short_entry THEN sell_expected_return END) as std_short_return
FROM processed_market_data
"""

df_stats = pd.read_sql(query, conn)
print("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
print(f"   –í—Å–µ–≥–æ –±–∞—Ä–æ–≤: {df_stats['total_bars'][0]:,}")
print(f"   LONG –≤—Ö–æ–¥–æ–≤: {df_stats['long_entries'][0]:,} ({df_stats['long_entries'][0]/df_stats['total_bars'][0]*100:.2f}%)")
print(f"   SHORT –≤—Ö–æ–¥–æ–≤: {df_stats['short_entries'][0]:,} ({df_stats['short_entries'][0]/df_stats['total_bars'][0]*100:.2f}%)")
print(f"   –°—Ä–µ–¥–Ω–∏–π return LONG: {df_stats['avg_long_return'][0]:.2f}% ¬± {df_stats['std_long_return'][0]:.2f}%")
print(f"   –°—Ä–µ–¥–Ω–∏–π return SHORT: {df_stats['avg_short_return'][0]:.2f}% ¬± {df_stats['std_short_return'][0]:.2f}%")

# 2. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤
query_types = """
SELECT 
    direction,
    entry_type,
    COUNT(*) as count,
    AVG(expected_return) as avg_return,
    STDDEV(expected_return) as std_return,
    MIN(expected_return) as min_return,
    MAX(expected_return) as max_return,
    SUM(CASE WHEN expected_return > 0 THEN 1 ELSE 0 END)::FLOAT / COUNT(*) * 100 as win_rate
FROM (
    SELECT 
        'LONG' as direction,
        long_entry_type as entry_type,
        buy_expected_return as expected_return
    FROM processed_market_data
    WHERE is_long_entry = TRUE
    UNION ALL
    SELECT 
        'SHORT' as direction,
        short_entry_type as entry_type,
        sell_expected_return as expected_return
    FROM processed_market_data
    WHERE is_short_entry = TRUE
) t
GROUP BY direction, entry_type
ORDER BY direction, avg_return DESC
"""

df_types = pd.read_sql(query_types, conn)
print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤:")
for _, row in df_types.iterrows():
    print(f"\n   {row['direction']} - {row['entry_type']}:")
    print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row['count']}")
    print(f"      –°—Ä–µ–¥–Ω–∏–π return: {row['avg_return']:.2f}% ¬± {row['std_return']:.2f}%")
    print(f"      Win rate: {row['win_rate']:.1f}%")
    print(f"      –î–∏–∞–ø–∞–∑–æ–Ω: [{row['min_return']:.2f}%, {row['max_return']:.2f}%]")

# 3. –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
query_symbols = """
SELECT 
    symbol,
    COUNT(CASE WHEN is_long_entry THEN 1 END) as long_entries,
    COUNT(CASE WHEN is_short_entry THEN 1 END) as short_entries,
    AVG(CASE WHEN is_long_entry THEN buy_expected_return END) as avg_long_return,
    AVG(CASE WHEN is_short_entry THEN sell_expected_return END) as avg_short_return
FROM processed_market_data
GROUP BY symbol
ORDER BY (long_entries + short_entries) DESC
LIMIT 10
"""

df_symbols = pd.read_sql(query_symbols, conn)
print("\nüìä –¢–æ–ø-10 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—Ö–æ–¥–æ–≤:")
for _, row in df_symbols.iterrows():
    print(f"   {row['symbol']}: LONG={row['long_entries']}, SHORT={row['short_entries']}, "
          f"Avg LONG={row['avg_long_return']:.2f}%, Avg SHORT={row['avg_short_return']:.2f}%")

# 4. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
print("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤...")

fig, axes = plt.subplots(2, 3, figsize=(18, 10))
fig.suptitle('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞', fontsize=16)

# –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ returns –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤ (LONG)
ax1 = axes[0, 0]
query_dist = """
SELECT long_entry_type, buy_expected_return
FROM processed_market_data
WHERE is_long_entry = TRUE
"""
df_dist = pd.read_sql(query_dist, conn)
for entry_type in ['good', 'bad', 'random']:
    data = df_dist[df_dist['long_entry_type'] == entry_type]['buy_expected_return']
    if len(data) > 0:
        ax1.hist(data, bins=50, alpha=0.6, label=f'{entry_type} (n={len(data)})', density=True)
ax1.set_xlabel('Expected Return (%)')
ax1.set_ylabel('Density')
ax1.set_title('LONG: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ returns –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤')
ax1.legend()
ax1.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ returns –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤ (SHORT)
ax2 = axes[0, 1]
query_dist = """
SELECT short_entry_type, sell_expected_return
FROM processed_market_data
WHERE is_short_entry = TRUE
"""
df_dist = pd.read_sql(query_dist, conn)
for entry_type in ['good', 'bad', 'random']:
    data = df_dist[df_dist['short_entry_type'] == entry_type]['sell_expected_return']
    if len(data) > 0:
        ax2.hist(data, bins=50, alpha=0.6, label=f'{entry_type} (n={len(data)})', density=True)
ax2.set_xlabel('Expected Return (%)')
ax2.set_ylabel('Density')
ax2.set_title('SHORT: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ returns –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤')
ax2.legend()
ax2.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 3: Win rate –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤
ax3 = axes[0, 2]
pivot_data = df_types.pivot(index='entry_type', columns='direction', values='win_rate')
pivot_data.plot(kind='bar', ax=ax3)
ax3.set_ylabel('Win Rate (%)')
ax3.set_title('Win Rate –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤')
ax3.set_xlabel('–¢–∏–ø –≤—Ö–æ–¥–∞')
ax3.legend(title='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
ax3.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ä–µ–¥–Ω–∏–π return –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤
ax4 = axes[1, 0]
pivot_data = df_types.pivot(index='entry_type', columns='direction', values='avg_return')
pivot_data.plot(kind='bar', ax=ax4)
ax4.set_ylabel('Average Return (%)')
ax4.set_title('–°—Ä–µ–¥–Ω–∏–π return –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤')
ax4.set_xlabel('–¢–∏–ø –≤—Ö–æ–¥–∞')
ax4.axhline(y=0, color='black', linestyle='--', alpha=0.5)
ax4.legend(title='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
ax4.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤ –ø–æ —Ç–∏–ø–∞–º
ax5 = axes[1, 1]
pivot_data = df_types.pivot(index='entry_type', columns='direction', values='count')
pivot_data.plot(kind='bar', ax=ax5)
ax5.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤')
ax5.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–æ–≤ –ø–æ —Ç–∏–ø–∞–º')
ax5.set_xlabel('–¢–∏–ø –≤—Ö–æ–¥–∞')
ax5.legend(title='–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
ax5.grid(True, alpha=0.3)

# –ì—Ä–∞—Ñ–∏–∫ 6: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑
ax6 = axes[1, 2]
query_time = """
SELECT 
    DATE_TRUNC('month', datetime) as month,
    COUNT(CASE WHEN is_long_entry THEN 1 END) as long_entries,
    COUNT(CASE WHEN is_short_entry THEN 1 END) as short_entries
FROM processed_market_data
WHERE datetime IS NOT NULL
GROUP BY month
ORDER BY month
"""
df_time = pd.read_sql(query_time, conn)
if not df_time.empty:
    df_time['month'] = pd.to_datetime(df_time['month'])
    ax6.plot(df_time['month'], df_time['long_entries'], 'b-', label='LONG entries')
    ax6.plot(df_time['month'], df_time['short_entries'], 'r-', label='SHORT entries')
    ax6.set_xlabel('–ú–µ—Å—è—Ü')
    ax6.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤')
    ax6.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
    ax6.legend()
    ax6.grid(True, alpha=0.3)
    ax6.tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.savefig('realistic_entries_analysis.png', dpi=150, bbox_inches='tight')
print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: realistic_entries_analysis.png")

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏...")

query_indicators = """
SELECT 
    technical_indicators->>'rsi_val' as rsi,
    technical_indicators->>'adx_val' as adx,
    technical_indicators->>'bb_position' as bb_position,
    technical_indicators->>'volume_ratio' as volume_ratio,
    CASE 
        WHEN is_long_entry THEN buy_expected_return
        WHEN is_short_entry THEN sell_expected_return
        ELSE NULL
    END as expected_return,
    CASE 
        WHEN is_long_entry THEN 'LONG'
        WHEN is_short_entry THEN 'SHORT'
        ELSE NULL
    END as direction
FROM processed_market_data
WHERE (is_long_entry OR is_short_entry)
AND technical_indicators IS NOT NULL
LIMIT 10000
"""

df_indicators = pd.read_sql(query_indicators, conn)

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
for col in ['rsi', 'adx', 'bb_position', 'volume_ratio', 'expected_return']:
    df_indicators[col] = pd.to_numeric(df_indicators[col], errors='coerce')

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–ª—è LONG
df_long = df_indicators[df_indicators['direction'] == 'LONG']
if len(df_long) > 0:
    print("\nüìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å LONG returns:")
    for indicator in ['rsi', 'adx', 'bb_position', 'volume_ratio']:
        corr = df_long[indicator].corr(df_long['expected_return'])
        if not np.isnan(corr):
            print(f"   {indicator}: {corr:.3f}")

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–ª—è SHORT
df_short = df_indicators[df_indicators['direction'] == 'SHORT']
if len(df_short) > 0:
    print("\nüìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å SHORT returns:")
    for indicator in ['rsi', 'adx', 'bb_position', 'volume_ratio']:
        corr = df_short[indicator].corr(df_short['expected_return'])
        if not np.isnan(corr):
            print(f"   {indicator}: {corr:.3f}")

# 6. –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–≤–æ–¥—ã
print("\n" + "="*80)
print("üìå –í–´–í–û–î–´:")
print("="*80)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
if df_stats['long_entries'][0] > 0 and df_stats['short_entries'][0] > 0:
    long_entry_rate = df_stats['long_entries'][0] / df_stats['total_bars'][0] * 100
    short_entry_rate = df_stats['short_entries'][0] / df_stats['total_bars'][0] * 100
    
    print(f"\n‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≤—Ö–æ–¥–æ–≤:")
    print(f"   - LONG: {long_entry_rate:.2f}% (—Ü–µ–ª–µ–≤–æ–µ: ~2%)")
    print(f"   - SHORT: {short_entry_rate:.2f}% (—Ü–µ–ª–µ–≤–æ–µ: ~2%)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –≤—Ö–æ–¥–æ–≤
    good_long = df_types[(df_types['direction'] == 'LONG') & (df_types['entry_type'] == 'good')]
    bad_long = df_types[(df_types['direction'] == 'LONG') & (df_types['entry_type'] == 'bad')]
    
    if len(good_long) > 0 and len(bad_long) > 0:
        good_return = good_long['avg_return'].values[0]
        bad_return = bad_long['avg_return'].values[0]
        
        if good_return > bad_return:
            print(f"\n‚úÖ –õ–æ–≥–∏–∫–∞ —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
            print(f"   - 'Good' LONG –≤—Ö–æ–¥—ã –ª—É—á—à–µ 'bad' –Ω–∞ {good_return - bad_return:.2f}%")
        else:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥–∏–∫–æ–π —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–æ–≤:")
            print(f"   - 'Bad' –≤—Ö–æ–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
    print(f"   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±–∞—Ä—ã —Å is_long_entry=True –∏–ª–∏ is_short_entry=True")
    print(f"   2. –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å expected_return")
    print(f"   3. –í–∑–≤–µ—à–∏–≤–∞–π—Ç–µ loss –ø–æ —Ç–∏–ø–∞–º –≤—Ö–æ–¥–æ–≤ (bad –≤—Ö–æ–¥—ã –≤–∞–∂–Ω–µ–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è)")
    print(f"   4. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞: ~0.5%")

conn.close()
print("\n" + "="*80)