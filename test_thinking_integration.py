#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ thinking –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è ML Crypto Trading
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from universal_lsp_server.thinking_lsp_integration import ThinkingLSPIntegration
from universal_lsp_server.mcp_lsp_bridge import MCPLSPBridge

async def test_thinking_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å thinking"""
    
    print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sequential Thinking –¥–ª—è ML Crypto Trading\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    thinking = ThinkingLSPIntegration()
    bridge = MCPLSPBridge()
    
    # –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    important_files = [
        "train_universal_transformer.py",
        "models/patchtst.py", 
        "data/feature_engineering.py",
        "trading/signals.py"
    ]
    
    for file_name in important_files:
        file_path = Path(__file__).parent / file_name
        
        if not file_path.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        print(f"\n{'='*60}")
        print(f"üìÑ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_name}")
        print(f"{'='*60}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ bridge
            context = bridge.get_file_context(str(file_path))
            print(f"\nüìä –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞:")
            print(f"   - –ò–º–ø–æ—Ä—Ç—ã: {len(context.get('imports', []))}")
            print(f"   - –§—É–Ω–∫—Ü–∏–∏: {len(context.get('functions', []))}")
            print(f"   - –ö–ª–∞—Å—Å—ã: {len(context.get('classes', []))}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å thinking
            print(f"\nü§î –ó–∞–ø—É—Å–∫ Sequential Thinking –∞–Ω–∞–ª–∏–∑–∞...")
            analysis = await thinking.analyze_file_with_thinking(str(file_path))
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º—ã—à–ª–µ–Ω–∏—è
            if 'thinking_steps' in analysis:
                for step in analysis['thinking_steps']:
                    print(f"\nüí≠ –®–∞–≥ {step['step_number']}: {step['thought']}")
                    if 'conclusions' in step:
                        for conclusion in step['conclusions']:
                            print(f"   ‚úì {conclusion}")
            
            # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if 'recommendations' in analysis:
                print(f"\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for rec in analysis['recommendations']:
                    print(f"   ‚Ä¢ {rec}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()

async def test_project_overview():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("\n\nüèóÔ∏è –û–ë–ó–û–† –ü–†–û–ï–ö–¢–ê ML CRYPTO TRADING")
    print("="*60)
    
    bridge = MCPLSPBridge()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path(__file__).parent
    # –ò—Å–∫–ª—é—á–∞–µ–º venv –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
    py_files = [f for f in project_root.rglob("*.py") 
                if 'venv' not in str(f) and '__pycache__' not in str(f)]
    yaml_files = [f for f in project_root.rglob("*.yaml") 
                  if 'venv' not in str(f)]
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   - Python —Ñ–∞–π–ª–æ–≤: {len(py_files)}")
    print(f"   - YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(yaml_files)}")
    print(f"   - –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞: {sum(f.stat().st_size for f in py_files) / 1024 / 1024:.1f} MB")
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    recent_changes = bridge.get_recent_changes(limit=10)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if recent_changes:
        print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        for change in recent_changes[:5]:
            print(f"   - {change.path}: {change.change_type} ({change.timestamp})")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Å thinking
    await test_thinking_analysis()
    
    # –¢–µ—Å—Ç 2: –û–±–∑–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
    await test_project_overview()
    
    print("\n\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ thinking –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ–¥–µ")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not Path("universal_lsp_server/thinking_lsp_integration.py").exists():
        print("‚ùå –§–∞–π–ª—ã thinking –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
        
    asyncio.run(main())