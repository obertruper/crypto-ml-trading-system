#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ expected returns –∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ PnL
"""

import psycopg2
import pandas as pd
import numpy as np
from datetime import datetime
import logging
from tqdm import tqdm

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class TradingSimulator:
    def __init__(self, db_config: dict):
        self.db_config = db_config
        self.connection = None
        
        # –ö–æ–º–∏—Å—Å–∏–∏ Bybit
        self.maker_fee = 0.0005  # 0.05%
        self.taker_fee = 0.00075  # 0.075%
        
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        self.connection = psycopg2.connect(**self.db_config)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î"""
        if self.connection:
            self.connection.close()
            logger.info("üì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
    
    def simulate_symbol(self, symbol: str, capital: float = 10000):
        """
        –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª
            capital: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        """
        logger.info(f"\n{'='*60}")
        logger.info(f"üéØ –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}")
        logger.info(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${capital:,.2f}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        query = """
        SELECT 
            datetime,
            close,
            buy_expected_return,
            sell_expected_return,
            (technical_indicators->>'buy_expected_return')::float as json_buy_return,
            (technical_indicators->>'sell_expected_return')::float as json_sell_return
        FROM processed_market_data
        WHERE symbol = %s
        ORDER BY timestamp
        """
        
        with self.connection.cursor() as cur:
            cur.execute(query, (symbol,))
            data = cur.fetchall()
        
        if not data:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None
            
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        trades = []
        balance = capital
        position = None
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –≤—Ö–æ–¥–∏–º –∫–æ–≥–¥–∞ expected return > 1%
        min_expected_return = 1.0
        
        for i, row in enumerate(tqdm(data, desc="–°–∏–º—É–ª—è—Ü–∏—è")):
            datetime_val, close, buy_ret, sell_ret, json_buy, json_sell = row
            close = float(close)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–æ–Ω–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏–∑ JSON
            buy_return = buy_ret if buy_ret != 0 else (json_buy or 0)
            sell_return = sell_ret if sell_ret != 0 else (json_sell or 0)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥
            if position:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 100 –±–∞—Ä–æ–≤
                if i >= position['exit_bar']:
                    pnl_pct = 0
                    if position['type'] == 'BUY':
                        pnl_pct = ((close - position['entry_price']) / position['entry_price']) * 100
                    else:  # SELL
                        pnl_pct = ((position['entry_price'] - close) / position['entry_price']) * 100
                    
                    # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (–≤—Ö–æ–¥ + –≤—ã—Ö–æ–¥)
                    total_commission = (self.taker_fee + self.taker_fee) * 100
                    net_pnl_pct = pnl_pct - total_commission
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    pnl_amount = balance * (net_pnl_pct / 100)
                    balance += pnl_amount
                    
                    trades.append({
                        'symbol': symbol,
                        'type': position['type'],
                        'entry_time': position['entry_time'],
                        'entry_price': position['entry_price'],
                        'exit_time': datetime_val,
                        'exit_price': close,
                        'expected_return': position['expected_return'],
                        'actual_return': pnl_pct,
                        'net_return': net_pnl_pct,
                        'pnl_amount': pnl_amount,
                        'balance': balance
                    })
                    
                    position = None
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥
            if not position and i < len(data) - 100:
                if buy_return > min_expected_return:
                    position = {
                        'type': 'BUY',
                        'entry_time': datetime_val,
                        'entry_price': close,
                        'expected_return': buy_return,
                        'exit_bar': i + 100
                    }
                elif sell_return > min_expected_return:
                    position = {
                        'type': 'SELL',
                        'entry_time': datetime_val,
                        'entry_price': close,
                        'expected_return': sell_return,
                        'exit_bar': i + 100
                    }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if trades:
            df_trades = pd.DataFrame(trades)
            
            total_trades = len(trades)
            winning_trades = len(df_trades[df_trades['net_return'] > 0])
            losing_trades = len(df_trades[df_trades['net_return'] < 0])
            win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
            
            avg_win = df_trades[df_trades['net_return'] > 0]['net_return'].mean() if winning_trades > 0 else 0
            avg_loss = df_trades[df_trades['net_return'] < 0]['net_return'].mean() if losing_trades > 0 else 0
            
            total_return = ((balance - capital) / capital) * 100
            
            logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò:")
            logger.info(f"{'='*60}")
            logger.info(f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            logger.info(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%)")
            logger.info(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing_trades}")
            logger.info(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_win:.2f}%")
            logger.info(f"üí∏ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:.2f}%")
            logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${balance:,.2f}")
            logger.info(f"üéØ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2f}%")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ expected returns
            df_trades['prediction_error'] = df_trades['expected_return'] - df_trades['actual_return']
            mae = df_trades['prediction_error'].abs().mean()
            
            logger.info(f"\nüìè –¢–û–ß–ù–û–°–¢–¨ –ü–†–û–ì–ù–û–ó–û–í:")
            logger.info(f"MAE: {mae:.2f}%")
            
            return {
                'symbol': symbol,
                'total_trades': total_trades,
                'win_rate': win_rate,
                'total_return': total_return,
                'final_balance': balance,
                'trades': df_trades
            }
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol} —Å –ø–æ—Ä–æ–≥–æ–º {min_expected_return}%")
            return None
    
    def simulate_all_symbols(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        query = "SELECT DISTINCT symbol FROM processed_market_data ORDER BY symbol"
        
        with self.connection.cursor() as cur:
            cur.execute(query)
            symbols = [row[0] for row in cur.fetchall()]
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        results = {}
        for symbol in symbols:
            result = self.simulate_symbol(symbol)
            if result:
                results[symbol] = result
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if results:
            total_trades = sum(r['total_trades'] for r in results.values())
            avg_win_rate = np.mean([r['win_rate'] for r in results.values()])
            avg_return = np.mean([r['total_return'] for r in results.values()])
            
            logger.info(f"\n{'='*60}")
            logger.info(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"{'='*60}")
            logger.info(f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            logger.info(f"‚úÖ –°—Ä–µ–¥–Ω–∏–π Win Rate: {avg_win_rate:.1f}%")
            logger.info(f"üí∞ –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {avg_return:.2f}%")
        
        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import yaml
    
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    db_config.pop('password', None)  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å
    
    simulator = TradingSimulator(db_config)
    
    try:
        simulator.connect()
        results = simulator.simulate_all_symbols()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if results:
            import json
            with open('trading_simulation_results.json', 'w') as f:
                json.dump(
                    {k: {kk: vv for kk, vv in v.items() if kk != 'trades'} 
                     for k, v in results.items()},
                    f, indent=2
                )
            logger.info("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ trading_simulation_results.json")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        simulator.disconnect()


if __name__ == "__main__":
    main()