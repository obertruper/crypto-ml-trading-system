#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
"""

import psycopg2
import yaml
import subprocess
import sys
import pickle
import os
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

print("="*80)
print("üîÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –†–ê–°–ß–ï–¢–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
print("="*80)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(**db_config)
cursor = conn.cursor()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
all_symbols = config['data_download']['symbols']

# –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
cursor.execute('SELECT DISTINCT symbol FROM processed_market_data ORDER BY symbol')
processed_symbols = set([row[0] for row in cursor.fetchall()])

# –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª—ã —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
cursor.execute("""
    SELECT symbol, COUNT(*) as count 
    FROM raw_market_data 
    WHERE market_type = 'futures'
    GROUP BY symbol 
    ORDER BY symbol
""")
raw_data = {row[0]: row[1] for row in cursor.fetchall()}

print(f"\nüìä –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
print(f"–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {len(all_symbols)}")
print(f"–°–∏–º–≤–æ–ª–æ–≤ —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {len(raw_data)}")
print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(processed_symbols)}")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
unprocessed_symbols = []
for symbol in all_symbols:
    if symbol in raw_data and symbol not in processed_symbols:
        unprocessed_symbols.append(symbol)

if not unprocessed_symbols:
    print("\n‚úÖ –í—Å–µ —Å–∏–º–≤–æ–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
    cursor.close()
    conn.close()
    sys.exit(0)

print(f"\nüìã –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ({len(unprocessed_symbols)}):")
for i, symbol in enumerate(unprocessed_symbols[:10], 1):
    print(f"   {i}. {symbol}: {raw_data.get(symbol, 0):,} –∑–∞–ø–∏—Å–µ–π")
if len(unprocessed_symbols) > 10:
    print(f"   ... –∏ –µ—â–µ {len(unprocessed_symbols) - 10} —Å–∏–º–≤–æ–ª–æ–≤")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º checkpoint
checkpoint_file = 'prepare_dataset_checkpoint.pkl'
if os.path.exists(checkpoint_file):
    with open(checkpoint_file, 'rb') as f:
        checkpoint = pickle.load(f)
    print(f"\nüìå –ù–∞–π–¥–µ–Ω checkpoint –æ—Ç {checkpoint['timestamp']}")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(checkpoint['processed'])} —Å–∏–º–≤–æ–ª–æ–≤")

cursor.close()
conn.close()

# –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
print(f"\nüöÄ –ì–æ—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {len(unprocessed_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")

if response.lower() != 'y':
    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    sys.exit(0)

# –ó–∞–ø—É—Å–∫–∞–µ–º prepare_dataset.py
print("\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º prepare_dataset.py...")
print("="*80)

try:
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    process = subprocess.Popen(
        [sys.executable, 'prepare_dataset.py'],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1
    )
    
    # –ß–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    for line in process.stdout:
        print(line, end='')
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    return_code = process.wait()
    
    if return_code == 0:
        print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_code})")
        
except KeyboardInterrupt:
    print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    print("–ü—Ä–æ—Ü–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª checkpoint –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω –ø–æ–∑–∂–µ")
    process.terminate()
    sys.exit(1)
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    sys.exit(1)