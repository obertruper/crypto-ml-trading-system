#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –§–¨–Æ–ß–ï–†–°–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–Ω–æ–º —Ä—ã–Ω–∫–µ
2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
"""

import yaml
import logging
import time
import os

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–ê–ô–ü–õ–ê–ô–ù–ê –î–õ–Ø –§–¨–Æ–ß–ï–†–°–ù–´–• –î–ê–ù–ù–´–•")
    logger.info("="*60)
    
    # –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    logger.info("\nüìä –®–ê–ì 1: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info("-"*40)
    
    os.system("python validate_futures_symbols.py")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    config_path = 'config_futures_validated.yaml'
    if not os.path.exists(config_path):
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª config_futures_validated.yaml")
        logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python validate_futures_symbols.py")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)
    
    symbols = config['data_download']['symbols']
    logger.info(f"‚úÖ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    logger.info("\nüìä –®–ê–ì 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    logger.info("-"*40)
    
    os.system("python init_database.py")
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("\nüìä –®–ê–ì 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    logger.info("-"*40)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å market_type = futures
    config['data_download']['market_type'] = 'futures'
    with open('config.yaml', 'w') as f:
        yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
    
    os.system("python download_data.py")
    
    # –®–∞–≥ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    logger.info("\nüìä –®–ê–ì 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏")
    logger.info("-"*40)
    
    os.system("python prepare_dataset.py")
    
    # –®–∞–≥ 5: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    logger.info("\nüìä –®–ê–ì 5: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    logger.info("-"*40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    import psycopg2
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    try:
        conn = psycopg2.connect(**db_config)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT COUNT(DISTINCT symbol) as symbols, COUNT(*) as total_records
            FROM processed_market_data p
            JOIN raw_market_data r ON p.raw_data_id = r.id
            WHERE r.market_type = 'futures'
        """)
        
        result = cursor.fetchone()
        symbols_count, records_count = result
        
        logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –æ–±—É—á–µ–Ω–∏—é: {symbols_count} —Å–∏–º–≤–æ–ª–æ–≤, {records_count:,} –∑–∞–ø–∏—Å–µ–π")
        
        cursor.close()
        conn.close()
        
        if records_count > 1000:
            logger.info("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏...")
            os.system("python train_advanced.py")
        else:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    logger.info("\n" + "="*60)
    logger.info("‚úÖ –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù!")
    logger.info("="*60)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    logger.info(f"‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(symbols)}")
    logger.info(f"üíæ –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: trained_model/")
    logger.info(f"üìà –ì—Ä–∞—Ñ–∏–∫–∏ –≤: plots/")
    logger.info(f"üìù –õ–æ–≥–∏ –≤: logs/")


if __name__ == "__main__":
    main()