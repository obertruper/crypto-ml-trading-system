#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è XGBoost –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import os
import time
import subprocess
from datetime import datetime
from pathlib import Path

def get_latest_log_dir():
    """–ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ª–æ–≥–∞–º–∏"""
    logs_dir = Path("logs")
    xgboost_dirs = [d for d in logs_dir.iterdir() if d.is_dir() and d.name.startswith("xgboost_training_")]
    if not xgboost_dirs:
        return None
    return max(xgboost_dirs, key=lambda d: d.stat().st_mtime)

def monitor_training():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è"""
    log_dir = get_latest_log_dir()
    if not log_dir:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–æ–≥–∏ –æ–±—É—á–µ–Ω–∏—è")
        return
        
    log_file = log_dir / "training.log"
    print(f"üìÇ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {log_dir.name}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
    result = subprocess.run(["ps", "aux"], capture_output=True, text=True)
    python_processes = [line for line in result.stdout.split('\n') if 'python' in line and 'train' in line]
    
    if python_processes:
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω")
        for proc in python_processes:
            if 'train_xgboost' in proc:
                parts = proc.split()
                cpu = parts[2]
                mem = parts[3]
                print(f"   CPU: {cpu}%, Memory: {mem}%")
    else:
        print("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω)")
    
    print("=" * 60)
    
    # –°–ª–µ–¥–∏–º –∑–∞ –ª–æ–≥–æ–º
    print("\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    print("-" * 60)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º tail -f –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        subprocess.run(["tail", "-f", str(log_file)])
    except KeyboardInterrupt:
        print("\n\n‚úã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print("-" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_report = log_dir / "final_report.txt"
        if final_report.exists():
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print("\nüìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:")
            with open(final_report, 'r') as f:
                print(f.read())
        else:
            # –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
            with open(log_file, 'r') as f:
                lines = f.readlines()
                
            optuna_count = sum(1 for line in lines if "Optuna" in line)
            model_count = sum(1 for line in lines if "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏" in line)
            error_count = sum(1 for line in lines if "ERROR" in line or "‚ùå" in line)
            
            print(f"üìä Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {optuna_count}")
            print(f"ü§ñ –ú–æ–¥–µ–ª–µ–π –æ–±—É—á–µ–Ω–æ: {model_count}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            start_time = datetime.strptime(log_dir.name.split('_')[2], '%Y%m%d')
            runtime = datetime.now() - start_time
            print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime}")

if __name__ == "__main__":
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è XGBoost Enhanced v2.0")
    print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print()
    monitor_training()