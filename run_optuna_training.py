#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è XGBoost v2.0 —Å Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
"""

import subprocess
import sys
import os
import time
from datetime import datetime

def run_training():
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    print(f"\n{'='*60}")
    print(f"üöÄ Enhanced XGBoost v2.0 —Å Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
    print(f"üìä –í–∫–ª—é—á–∞–µ—Ç:")
    print(f"   - 49 —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print(f"   - –í–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print(f"   - –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    print(f"   - –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π")
    print(f"   - Volume profile")
    print(f"   - –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    print(f"   - –ü–∞—Ç—Ç–µ—Ä–Ω-–∞–Ω–∞–ª–∏–∑ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*60}\n")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = [
        'python', 'train_xgboost_enhanced_v2.py',
        '--task', 'classification_binary',
        '--ensemble_size', '3'
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    try:
        print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}\n")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        for line in process.stdout:
            print(line, end='')
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        return_code = process.wait()
        
        if return_code == 0:
            print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
            print(f"   - logs/xgboost_training_*/")
            print(f"   - trained_model/*_xgboost_v2_*.pkl")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏! –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_code}")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        process.terminate()
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\nü§ñ Enhanced XGBoost v2.0 –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–∞")
    print("="*50)
    print("\n–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print("‚úÖ –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("‚úÖ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏")
    print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–≤–µ—á–µ–π (hammer, doji, engulfing)")
    print("‚úÖ Volume profile –ø—Ä–∏–∑–Ω–∞–∫–∏")
    print("‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è Optuna –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    print("‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è...")
    
    run_training()

if __name__ == "__main__":
    main()