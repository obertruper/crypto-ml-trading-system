#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""

import psycopg2
import pandas as pd
import numpy as np
from datetime import datetime
import json

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = psycopg2.connect(
        host='localhost',
        port=5555,
        database='crypto_trading',
        user='ruslan',
        password='ruslan'
    )
    return conn

def check_indicators():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    conn = connect_to_db()
    cursor = conn.cursor()
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ò–ö–ê–¢–û–†–û–í\n")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    cursor.execute("""
        SELECT feature_columns FROM model_metadata 
        WHERE model_type = 'preprocessing'
        ORDER BY created_at DESC LIMIT 1
    """)
    result = cursor.fetchone()
    
    if not result:
        print("‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    feature_names = result[0]  # –£–∂–µ JSON –º–∞—Å—Å–∏–≤
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(feature_names)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø–æ —Ç–∏–ø–∞–º
    groups = {
        '–¶–µ–Ω–æ–≤—ã–µ': ['close', 'high', 'low', 'open', 'volume'],
        '–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ': [f for f in feature_names if 'ema' in f or 'sma' in f],
        '–¢—Ä–µ–Ω–¥–æ–≤—ã–µ': [f for f in feature_names if any(x in f for x in ['adx', 'macd', 'aroon', 'sar'])],
        '–û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã': [f for f in feature_names if any(x in f for x in ['rsi', 'stoch', 'cci', 'williams'])],
        '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å': [f for f in feature_names if any(x in f for x in ['atr', 'bb_', 'donchian'])],
        '–û–±—ä–µ–º–Ω—ã–µ': [f for f in feature_names if any(x in f for x in ['obv', 'cmf', 'mfi'])],
        'Ichimoku': [f for f in feature_names if 'ichimoku' in f],
        '–í—Ä–µ–º–µ–Ω–Ω—ã–µ': [f for f in feature_names if any(x in f for x in ['hour', 'dayofweek', 'month'])],
        '–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ': [f for f in feature_names if any(x in f for x in ['_diff', '_pct_change', '_ratio'])]
    }
    
    for group_name, indicators in groups.items():
        if indicators:
            print(f"\n{group_name} ({len(indicators)}):")
            for ind in sorted(indicators)[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  - {ind}")
            if len(indicators) > 5:
                print(f"  ... –∏ –µ—â–µ {len(indicators) - 5}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
    print("\n\nüìà –ü–†–û–í–ï–†–ö–ê –ó–ù–ê–ß–ï–ù–ò–ô –ò–ù–î–ò–ö–ê–¢–û–†–û–í")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("""
        SELECT symbol, technical_indicators 
        FROM processed_market_data 
        LIMIT 10
    """)
    
    samples = cursor.fetchall()
    
    for symbol, technical_indicators in samples[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
        features = technical_indicators  # –£–∂–µ JSONB
        print(f"\n{symbol}:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        checks = {
            'RSI': features.get('rsi_val', None),
            'MACD': features.get('macd_val', None),
            'ADX': features.get('adx_val', None),
            'ATR': features.get('atr_val', None),
            'BB Upper': features.get('bb_upper', None),
            'OBV': features.get('obv', None),
            'EMA 15': features.get('ema_15', None),
            'SAR': features.get('sar', None)
        }
        
        for name, value in checks.items():
            if value is not None:
                print(f"  {name}: {value:.4f}")
            else:
                print(f"  {name}: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print("\n\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    cursor.execute("""
        SELECT COUNT(*) as total,
               COUNT(CASE WHEN technical_indicators::text LIKE '%null%' THEN 1 END) as with_nulls,
               COUNT(CASE WHEN technical_indicators::text LIKE '%NaN%' THEN 1 END) as with_nans
        FROM processed_market_data
    """)
    
    total, with_nulls, with_nans = cursor.fetchone()
    
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
    print(f"–ó–∞–ø–∏—Å–µ–π —Å null –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {with_nulls} ({with_nulls/total*100:.1f}%)")
    print(f"–ó–∞–ø–∏—Å–µ–π —Å NaN –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: {with_nans} ({with_nans/total*100:.1f}%)")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–∫
    print("\n\nüéØ –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–ö")
    print("=" * 80)
    
    cursor.execute("""
        SELECT 
            symbol,
            SUM(buy_profit_target) as buy_profits,
            SUM(buy_loss_target) as buy_losses,
            SUM(sell_profit_target) as sell_profits,
            SUM(sell_loss_target) as sell_losses,
            COUNT(*) as total
        FROM processed_market_data
        GROUP BY symbol
    """)
    
    labels_stats = cursor.fetchall()
    
    for symbol, buy_p, buy_l, sell_p, sell_l, total in labels_stats:
        buy_wr = (buy_p / (buy_p + buy_l) * 100) if (buy_p + buy_l) > 0 else 0
        sell_wr = (sell_p / (sell_p + sell_l) * 100) if (sell_p + sell_l) > 0 else 0
        
        print(f"\n{symbol}:")
        print(f"  üü¢ BUY:  {buy_p} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö, {buy_l} —É–±—ã—Ç–æ—á–Ω—ã—Ö (WR: {buy_wr:.1f}%)")
        print(f"  üî¥ SELL: {sell_p} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö, {sell_l} —É–±—ã—Ç–æ—á–Ω—ã—Ö (WR: {sell_wr:.1f}%)")
        print(f"  üìä –í—Å–µ–≥–æ: {total} –∑–∞–ø–∏—Å–µ–π")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    print("\n\nüìä –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–õ–Ø–¶–ò–ô")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    cursor.execute("""
        SELECT technical_indicators 
        FROM processed_market_data 
        WHERE symbol = 'BTCUSDT'
        LIMIT 100
    """)
    
    data_for_corr = []
    for row in cursor.fetchall():
        features = row[0]  # –£–∂–µ JSONB
        data_for_corr.append(features)
    
    if data_for_corr:
        df = pd.DataFrame(data_for_corr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        check_pairs = [
            ('rsi_14', 'rsi_21'),
            ('ema_12', 'ema_26'),
            ('bb_upper', 'bb_lower'),
            ('stoch_k', 'stoch_d')
        ]
        
        print("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏:")
        for ind1, ind2 in check_pairs:
            if ind1 in df.columns and ind2 in df.columns:
                corr = df[ind1].corr(df[ind2])
                print(f"  {ind1} <-> {ind2}: {corr:.3f}")
    
    cursor.close()
    conn.close()
    
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    check_indicators()