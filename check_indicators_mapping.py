#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–¥–µ –∏ –ë–î
"""

import psycopg2
import pandas as pd
import json
import yaml

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

def check_indicators():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É –∫–æ–¥–æ–º –∏ –ë–î"""
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ –∫–æ–¥–∞ train_xgboost_enhanced_v2.py
    TECHNICAL_INDICATORS = [
        'ema_15', 'adx_val', 'adx_plus_di', 'adx_minus_di',
        'macd_val', 'macd_signal', 'macd_hist', 'sar',
        'ichimoku_conv', 'ichimoku_base', 'aroon_up', 'aroon_down',
        'rsi_val', 'stoch_k', 'stoch_d', 'cci_val', 'roc_val',
        'williams_r', 'awesome_osc', 'ultimate_osc',
        'atr_val', 'bb_position', 'bb_width', 'donchian_position',
        'keltner_position', 'ulcer_index', 'mass_index',
        'obv_val', 'obv_signal', 'cmf_val', 'force_index',
        'eom_val', 'vpt_val', 'nvi_val', 'vwap_val',
        'ema_50', 'ema_200', 'trix_val', 'trix_signal',
        'vortex_pos', 'vortex_neg', 'vortex_ratio',
        'price_change_1', 'price_change_4', 'price_change_16',
        'volatility_4', 'volatility_16', 'volume_ratio'
    ]
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db_config = config['database'].copy()
    if not db_config.get('password'):
        db_config.pop('password', None)
    
    conn = psycopg2.connect(**db_config)
    cursor = conn.cursor()
    
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –º–µ–∂–¥—É –∫–æ–¥–æ–º –∏ –ë–î\n")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä JSON –∏–∑ –ë–î
    query = """
    SELECT technical_indicators
    FROM processed_market_data
    WHERE symbol = 'BTCUSDT' 
    AND technical_indicators IS NOT NULL
    LIMIT 1
    """
    
    cursor.execute(query)
    result = cursor.fetchone()
    
    if not result:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ –ë–î")
        return
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ –ë–î
    db_indicators = list(result[0].keys())
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑ –ë–î
    query2 = """
    SELECT DISTINCT jsonb_object_keys(technical_indicators) as indicator_name
    FROM processed_market_data
    WHERE symbol = 'BTCUSDT'
    ORDER BY indicator_name
    """
    
    cursor.execute(query2)
    all_db_indicators = [row[0] for row in cursor.fetchall()]
    
    print(f"‚úÖ –í –ë–î –Ω–∞–π–¥–µ–Ω–æ {len(all_db_indicators)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print(f"üìã –í –∫–æ–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ {len(TECHNICAL_INDICATORS)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤\n")
    
    # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –∫–æ–¥–µ, –Ω–æ –Ω–µ –≤ –ë–î
    not_in_db = set(TECHNICAL_INDICATORS) - set(all_db_indicators)
    if not_in_db:
        print("‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ö–û–î–ï, –Ω–æ –ù–ï –≤ –ë–î:")
        for ind in sorted(not_in_db):
            print(f"   - {ind}")
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ
            similar = [db_ind for db_ind in all_db_indicators if ind.replace('_val', '') in db_ind or db_ind in ind]
            if similar:
                print(f"     üí° –í–æ–∑–º–æ–∂–Ω–æ –≤ –ë–î: {similar}")
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ë–î, –Ω–æ –Ω–µ –≤ –∫–æ–¥–µ
    not_in_code = set(all_db_indicators) - set(TECHNICAL_INDICATORS)
    if not_in_code:
        print("\n‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ –ë–î, –Ω–æ –ù–ï –≤ –∫–æ–¥–µ:")
        for ind in sorted(not_in_code):
            print(f"   + {ind}")
    
    # 4. –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\nüîß –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    mappings = {}
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥
    for code_ind in not_in_db:
        # –£–±–∏—Ä–∞–µ–º _val –∏ –∏—â–µ–º
        base_name = code_ind.replace('_val', '')
        if base_name in all_db_indicators:
            mappings[code_ind] = base_name
            print(f"   '{code_ind}' ‚Üí '{base_name}'")
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        elif code_ind == 'bb_position' and 'bollinger_position' in all_db_indicators:
            mappings[code_ind] = 'bollinger_position'
            print(f"   '{code_ind}' ‚Üí 'bollinger_position'")
        elif code_ind == 'bb_width' and 'bollinger_width' in all_db_indicators:
            mappings[code_ind] = 'bollinger_width'
            print(f"   '{code_ind}' ‚Üí 'bollinger_width'")
    
    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    print("\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ TECHNICAL_INDICATORS:")
    corrected_indicators = []
    for ind in TECHNICAL_INDICATORS:
        if ind in mappings:
            corrected_indicators.append(mappings[ind])
        elif ind in all_db_indicators:
            corrected_indicators.append(ind)
        else:
            print(f"   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è: {ind}")
    
    print("\nTECHNICAL_INDICATORS = [")
    for i in range(0, len(corrected_indicators), 4):
        chunk = corrected_indicators[i:i+4]
        print("    " + ", ".join(f"'{ind}'" for ind in chunk) + ",")
    print("]")
    
    cursor.close()
    conn.close()
    
    print(f"\n‚úÖ –ò—Ç–æ–≥–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {len(corrected_indicators)} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ {len(all_db_indicators)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")

if __name__ == "__main__":
    check_indicators()