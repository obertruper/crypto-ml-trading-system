#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –ø–æ –≥–æ–¥–∞–º
"""

import psycopg2
import yaml
import pandas as pd
import numpy as np
from prepare_dataset import MarketDatasetPreparator, PostgreSQLManager
from collections import defaultdict

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

print("="*80)
print("üéØ –ê–ù–ê–õ–ò–ó –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –£–†–û–í–ù–ï–ô –ß–ê–°–¢–ò–ß–ù–´–• –ó–ê–ö–†–´–¢–ò–ô –ü–û –ì–û–î–ê–ú")
print("="*80)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db_manager = PostgreSQLManager(db_config)
db_manager.connect()
preparator = MarketDatasetPreparator(db_manager, config['risk_profile'])

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ALGOUSDT
symbol = 'ALGOUSDT'
print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞: {symbol}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
df = preparator.load_raw_data(symbol)
if len(df) == 0:
    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    exit()

# –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥
df['year'] = pd.to_datetime(df['datetime']).dt.year
years = sorted(df['year'].unique())
print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã: {years}")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
buy_sl_pct = 0.989  # -1.1%
buy_tp_pct = 1.058  # +5.8%
partial_tp_levels = [
    {'percent': 1.2, 'close_ratio': 0.20},  # TP1
    {'percent': 2.4, 'close_ratio': 0.30},  # TP2
    {'percent': 3.5, 'close_ratio': 0.30}   # TP3
]

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –≥–æ–¥–∞–º
all_years_stats = {}
lookahead_limit = 100

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≥–æ–¥
for year in years:
    year_df = df[df['year'] == year].reset_index(drop=True)
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–æ–¥—ã —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
    if len(year_df) < 1100:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1100 –∑–∞–ø–∏—Å–µ–π (1000 + lookahead)
        print(f"\n‚ö†Ô∏è {year}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ({len(year_df)} –∑–∞–ø–∏—Å–µ–π)")
        continue
    
    print(f"\nüìÖ –ê–Ω–∞–ª–∏–∑ {year} –≥–æ–¥–∞ ({len(year_df)} –∑–∞–ø–∏—Å–µ–π)...")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–ª—è –≥–æ–¥–∞
    stats = defaultdict(int)
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –±–∞—Ä–∞–º
    positions_to_analyze = min(1000, len(year_df) - lookahead_limit)
    
    for i in range(positions_to_analyze):  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ 1000 –ø–æ–∑–∏—Ü–∏–π
        entry_price = year_df.iloc[i]['close']
        stats['total_positions'] += 1
        
        # –£—Ä–æ–≤–Ω–∏ —Ü–µ–Ω
        sl_price = entry_price * buy_sl_pct
        tp1_price = entry_price * 1.012  # +1.2%
        tp2_price = entry_price * 1.024  # +2.4%
        tp3_price = entry_price * 1.035  # +3.5%
        final_tp_price = entry_price * buy_tp_pct  # +5.8%
        
        # –ê–Ω–∞–ª–∏–∑ –±—É–¥—É—â–∏—Ö –±–∞—Ä–æ–≤
        reached_levels = []
        hit_sl = False
        hit_final_tp = False
        
        for j in range(i + 1, min(i + lookahead_limit + 1, len(year_df))):
            high = year_df.iloc[j]['high']
            low = year_df.iloc[j]['low']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
            if not hit_sl and not hit_final_tp:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SL
                if low <= sl_price:
                    hit_sl = True
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ –∫–∞–∫–æ–≥–æ TP –±—ã–ª SL
                    if 'tp3' in reached_levels:
                        stats['hit_sl_after_tp3'] += 1
                    elif 'tp2' in reached_levels:
                        stats['hit_sl_after_tp2'] += 1
                    elif 'tp1' in reached_levels:
                        stats['hit_sl_after_tp1'] += 1
                    else:
                        stats['hit_sl_direct'] += 1
                    break
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP1
                if high >= tp1_price and 'tp1' not in reached_levels:
                    reached_levels.append('tp1')
                    stats['reached_tp1'] += 1
                    # –ü–æ—Å–ª–µ TP1 —Å—Ç–æ–ø –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ +0.3%
                    sl_price = entry_price * 1.003
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP2
                if high >= tp2_price and 'tp2' not in reached_levels:
                    reached_levels.append('tp2')
                    stats['reached_tp2'] += 1
                    # –ü–æ—Å–ª–µ TP2 —Å—Ç–æ–ø –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ +1.2%
                    sl_price = entry_price * 1.012
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ TP3
                if high >= tp3_price and 'tp3' not in reached_levels:
                    reached_levels.append('tp3')
                    stats['reached_tp3'] += 1
                    # –ü–æ—Å–ª–µ TP3 —Å—Ç–æ–ø –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ +2.4%
                    sl_price = entry_price * 1.024
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ TP
                if high >= final_tp_price:
                    hit_final_tp = True
                    stats['reached_final_tp'] += 1
                    break
        
        # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–∏ –Ω–∏ –ø–æ SL, –Ω–∏ –ø–æ TP - timeout
        if not hit_sl and not hit_final_tp:
            if 'tp3' in reached_levels:
                stats['timeout_after_tp3'] += 1
            elif 'tp2' in reached_levels:
                stats['timeout_after_tp2'] += 1
            elif 'tp1' in reached_levels:
                stats['timeout_after_tp1'] += 1
            else:
                stats['timeout_no_tp'] += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ–¥–∞
    all_years_stats[year] = dict(stats)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≥–æ–¥–∞
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ {year} –≥–æ–¥–∞ ({stats['total_positions']} –ø–æ–∑–∏—Ü–∏–π):")
    print("\nüéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π TP:")
    print(f"   TP1 (+1.2%): {stats['reached_tp1']} ({stats['reached_tp1']/stats['total_positions']*100:.1f}%)")
    print(f"   TP2 (+2.4%): {stats['reached_tp2']} ({stats['reached_tp2']/stats['total_positions']*100:.1f}%)")
    print(f"   TP3 (+3.5%): {stats['reached_tp3']} ({stats['reached_tp3']/stats['total_positions']*100:.1f}%)")
    print(f"   Final TP (+5.8%): {stats['reached_final_tp']} ({stats['reached_final_tp']/stats['total_positions']*100:.1f}%)")
    
    # –ü–æ–∑–∏—Ü–∏–π —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏
    total_with_partials = stats['reached_tp1']
    print(f"\nüí∞ –ü–æ–∑–∏—Ü–∏–π —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–∫—Ä—ã—Ç–∏—è–º–∏: {total_with_partials} ({total_with_partials/stats['total_positions']*100:.1f}%)")

# –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≥–æ–¥–∞–º
print("\n" + "="*80)
print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –ü–û –ì–û–î–ê–ú")
print("="*80)
print(f"{'–ì–æ–¥':<10} {'–ü–æ–∑–∏—Ü–∏–π':<10} {'TP1 %':<10} {'TP2 %':<10} {'TP3 %':<10} {'Final %':<10} {'Partials %':<12}")
print("-"*72)

for year, stats in sorted(all_years_stats.items()):
    total = stats['total_positions']
    tp1_pct = stats['reached_tp1'] / total * 100
    tp2_pct = stats['reached_tp2'] / total * 100
    tp3_pct = stats['reached_tp3'] / total * 100
    final_pct = stats['reached_final_tp'] / total * 100
    partials_pct = stats['reached_tp1'] / total * 100
    
    print(f"{year:<10} {total:<10} {tp1_pct:<10.1f} {tp2_pct:<10.1f} {tp3_pct:<10.1f} {final_pct:<10.1f} {partials_pct:<12.1f}")

# –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
if all_years_stats:
    print("-"*72)
    avg_tp1 = np.mean([s['reached_tp1']/s['total_positions']*100 for s in all_years_stats.values()])
    avg_tp2 = np.mean([s['reached_tp2']/s['total_positions']*100 for s in all_years_stats.values()])
    avg_tp3 = np.mean([s['reached_tp3']/s['total_positions']*100 for s in all_years_stats.values()])
    avg_final = np.mean([s['reached_final_tp']/s['total_positions']*100 for s in all_years_stats.values()])
    avg_partials = np.mean([s['reached_tp1']/s['total_positions']*100 for s in all_years_stats.values()])
    
    print(f"{'–°–†–ï–î–ù–ï–ï':<10} {'-':<10} {avg_tp1:<10.1f} {avg_tp2:<10.1f} {avg_tp3:<10.1f} {avg_final:<10.1f} {avg_partials:<12.1f}")

# –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
print("\nüìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í:")
if len(all_years_stats) > 1:
    years_sorted = sorted(all_years_stats.keys())
    first_year = years_sorted[0]
    last_year = years_sorted[-1]
    
    first_partials = all_years_stats[first_year]['reached_tp1'] / all_years_stats[first_year]['total_positions'] * 100
    last_partials = all_years_stats[last_year]['reached_tp1'] / all_years_stats[last_year]['total_positions'] * 100
    
    trend = last_partials - first_partials
    if trend > 0:
        print(f"   üìà –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—Ä–æ—Å–ª–∏ —Å {first_partials:.1f}% ({first_year}) –¥–æ {last_partials:.1f}% ({last_year})")
    else:
        print(f"   üìâ –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–Ω–∏–∑–∏–ª–∏—Å—å —Å {first_partials:.1f}% ({first_year}) –¥–æ {last_partials:.1f}% ({last_year})")

db_manager.disconnect()
print("\n" + "="*80)