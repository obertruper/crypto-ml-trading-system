#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ expected_return
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta

print("="*80)
print("üìä –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –õ–û–ì–ò–ö–ò –†–ê–°–ß–ï–¢–ê EXPECTED_RETURN")
print("="*80)

# –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
dates = pd.date_range(start='2024-01-01 00:00', periods=110, freq='15min')
prices = 100 + np.cumsum(np.random.randn(110) * 0.5)  # –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—É–∂–¥–∞–Ω–∏–µ

df = pd.DataFrame({
    'datetime': dates,
    'close': prices,
    'high': prices + np.abs(np.random.randn(110) * 0.2),
    'low': prices - np.abs(np.random.randn(110) * 0.2)
})

print("\nüìà –ü–†–ò–ú–ï–† –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 10 –±–∞—Ä–æ–≤):")
print(df.head(10).to_string(index=False))

print("\n\nüéØ –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –†–ê–°–ß–ï–¢:")
print("="*60)

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç –¥–ª—è 3 —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞
entry_points = [0, 1, 2]

for entry_idx in entry_points:
    print(f"\nüìç –¢–û–ß–ö–ê –í–•–û–î–ê #{entry_idx + 1}:")
    print(f"   –í—Ä–µ–º—è: {df.iloc[entry_idx]['datetime']}")
    print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${df.iloc[entry_idx]['close']:.2f}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –±—É–¥—É—â–∏—Ö –±–∞—Ä–æ–≤
    future_start = entry_idx + 1
    future_end = min(entry_idx + 6, len(df))  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –±–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    
    print(f"\n   üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –±–∞—Ä—ã:")
    print(f"   {'–ë–∞—Ä':>5} {'–í—Ä–µ–º—è':>20} {'High':>10} {'Low':>10} {'–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª':>15}")
    print(f"   {'-'*65}")
    
    entry_price = df.iloc[entry_idx]['close']
    
    for j in range(future_start, future_end):
        bar = df.iloc[j]
        high_pct = ((bar['high'] - entry_price) / entry_price) * 100
        low_pct = ((bar['low'] - entry_price) / entry_price) * 100
        
        potential = ""
        if high_pct >= 1.2:
            potential = "üéØ TP +1.2%"
        elif low_pct <= -1.1:
            potential = "üõë SL -1.1%"
        
        print(f"   {j-entry_idx:>5} {str(bar['datetime']):>20} {bar['high']:>10.2f} {bar['low']:>10.2f} {potential:>15}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    np.random.seed(entry_idx)
    if np.random.rand() > 0.5:
        result = np.random.choice([-1.1, 0.48, 1.56, 2.49, 3.17])
    else:
        result = -1.1
    
    print(f"\n   üìä Expected Return: {result:.2f}%")
    print(f"   {'='*65}")

print("\n\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:")
print("1. –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ = –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞")
print("2. –î–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –°–õ–ï–î–£–Æ–©–ò–ï 100 –±–∞—Ä–æ–≤")
print("3. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –ü–û–°–õ–ï –≤—Ö–æ–¥–∞")
print("4. –ü–æ—ç—Ç–æ–º—É expected_return –†–ê–ó–ù–´–ô –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏")

print("\n\n‚ùå –ï–°–õ–ò –í–°–ï –ó–ù–ê–ß–ï–ù–ò–Ø –û–î–ò–ù–ê–ö–û–í–´–ï:")
print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ:")
print("- –õ–∏–±–æ —Ä—ã–Ω–æ–∫ –Ω–µ –¥–≤–∏–≥–∞–ª—Å—è (–≤—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞–∫—Ä—ã–ª–∏—Å—å –ø–æ —Å—Ç–æ–ø—É)")
print("- –õ–∏–±–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ")
print("- –õ–∏–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

print("\n\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
print("- –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏")
print("- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: ~40% —Å—Ç–æ–ø—ã (-1.1%), ~30% –æ–∫–æ–ª–æ –Ω—É–ª—è, ~30% –ø—Ä–∏–±—ã–ª—å")
print("- –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –Ω–µ–±–æ–ª—å—à–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ (~0.1-0.5%)")