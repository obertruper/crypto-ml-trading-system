#!/usr/bin/env python3
"""
–í–∞–ª–∏–¥–∞—Ü–∏—è expected_return –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º
"""

import psycopg2
import yaml
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

conn = psycopg2.connect(**db_config)

print("="*80)
print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø EXPECTED_RETURN –ó–ù–ê–ß–ï–ù–ò–ô")
print("="*80)

# 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
query = """
SELECT 
    COUNT(*) as total_records,
    COUNT(DISTINCT buy_expected_return) as unique_buy,
    COUNT(DISTINCT sell_expected_return) as unique_sell,
    AVG(buy_expected_return) as avg_buy,
    AVG(sell_expected_return) as avg_sell,
    STDDEV(buy_expected_return) as std_buy,
    STDDEV(sell_expected_return) as std_sell,
    MIN(buy_expected_return) as min_buy,
    MAX(buy_expected_return) as max_buy,
    MIN(sell_expected_return) as min_sell,
    MAX(sell_expected_return) as max_sell
FROM processed_market_data
"""

result = conn.cursor()
result.execute(query)
stats = result.fetchone()

total, unique_buy, unique_sell, avg_buy, avg_sell, std_buy, std_sell, min_buy, max_buy, min_sell, max_sell = stats

print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total:,}")
print(f"\nBuy Expected Return:")
print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique_buy:,} ({unique_buy/total*100:.1f}%)")
print(f"  –°—Ä–µ–¥–Ω–µ–µ: {avg_buy:.3f}%")
print(f"  Std: {std_buy:.3f}%")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: [{min_buy:.3f}%, {max_buy:.3f}%]")

print(f"\nSell Expected Return:")
print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {unique_sell:,} ({unique_sell/total*100:.1f}%)")
print(f"  –°—Ä–µ–¥–Ω–µ–µ: {avg_sell:.3f}%")
print(f"  Std: {std_sell:.3f}%")
print(f"  –î–∏–∞–ø–∞–∑–æ–Ω: [{min_sell:.3f}%, {max_sell:.3f}%]")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
buy_uniqueness = unique_buy / total * 100
sell_uniqueness = unique_sell / total * 100

if buy_uniqueness < 50 or sell_uniqueness < 50:
    print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∏–∑–∫–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π!")
    print("   –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø–ª–æ—Ö–æ –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ —Ç–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
    print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.")
else:
    print("\n‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω–æ—Ä–º–µ.")

# 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
print("\n\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:")
symbol_query = """
SELECT 
    symbol,
    COUNT(*) as records,
    COUNT(DISTINCT buy_expected_return) as unique_buy,
    COUNT(DISTINCT sell_expected_return) as unique_sell,
    AVG(buy_expected_return) as avg_buy,
    AVG(sell_expected_return) as avg_sell
FROM processed_market_data
GROUP BY symbol
ORDER BY symbol
"""

df_symbols = pd.read_sql(symbol_query, conn)

print(f"\n{'–°–∏–º–≤–æ–ª':<15} {'–ó–∞–ø–∏—Å–µ–π':>10} {'–£–Ω–∏–∫.Buy':>10} {'–£–Ω–∏–∫.Sell':>10} {'Avg Buy':>10} {'Avg Sell':>10}")
print("-"*75)
for _, row in df_symbols.iterrows():
    buy_pct = row['unique_buy'] / row['records'] * 100
    sell_pct = row['unique_sell'] / row['records'] * 100
    status = "‚ö†Ô∏è" if buy_pct < 50 or sell_pct < 50 else "‚úÖ"
    print(f"{row['symbol']:<15} {row['records']:>10,} {row['unique_buy']:>10} {row['unique_sell']:>10} {row['avg_buy']:>10.3f}% {row['avg_sell']:>10.3f}% {status}")

# 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
print("\n\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ù–ê–ß–ï–ù–ò–ô:")

# –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
sample_query = """
SELECT buy_expected_return, sell_expected_return
FROM processed_market_data
WHERE buy_expected_return IS NOT NULL 
  AND sell_expected_return IS NOT NULL
LIMIT 100000
"""

df_sample = pd.read_sql(sample_query, conn)

# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
fig, axes = plt.subplots(2, 2, figsize=(15, 10))
fig.suptitle('Expected Return Distribution Analysis', fontsize=16)

# –ì—Ä–∞—Ñ–∏–∫ 1: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ buy_expected_return
axes[0, 0].hist(df_sample['buy_expected_return'], bins=50, edgecolor='black', alpha=0.7)
axes[0, 0].set_title('Buy Expected Return Distribution')
axes[0, 0].set_xlabel('Return (%)')
axes[0, 0].set_ylabel('Frequency')
axes[0, 0].axvline(x=0, color='r', linestyle='--', alpha=0.5)

# –ì—Ä–∞—Ñ–∏–∫ 2: –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ sell_expected_return
axes[0, 1].hist(df_sample['sell_expected_return'], bins=50, edgecolor='black', alpha=0.7, color='orange')
axes[0, 1].set_title('Sell Expected Return Distribution')
axes[0, 1].set_xlabel('Return (%)')
axes[0, 1].set_ylabel('Frequency')
axes[0, 1].axvline(x=0, color='r', linestyle='--', alpha=0.5)

# –ì—Ä–∞—Ñ–∏–∫ 3: Scatter plot
axes[1, 0].scatter(df_sample['buy_expected_return'], df_sample['sell_expected_return'], 
                   alpha=0.1, s=1)
axes[1, 0].set_title('Buy vs Sell Expected Return')
axes[1, 0].set_xlabel('Buy Return (%)')
axes[1, 0].set_ylabel('Sell Return (%)')
axes[1, 0].axhline(y=0, color='r', linestyle='--', alpha=0.5)
axes[1, 0].axvline(x=0, color='r', linestyle='--', alpha=0.5)

# –ì—Ä–∞—Ñ–∏–∫ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
axes[1, 1].axis('off')
stats_text = f"""
Validation Summary:

Buy Expected Return:
  Unique values: {unique_buy:,} ({buy_uniqueness:.1f}%)
  Mean: {avg_buy:.3f}%
  Std: {std_buy:.3f}%
  Range: [{min_buy:.3f}%, {max_buy:.3f}%]

Sell Expected Return:
  Unique values: {unique_sell:,} ({sell_uniqueness:.1f}%)
  Mean: {avg_sell:.3f}%
  Std: {std_sell:.3f}%
  Range: [{min_sell:.3f}%, {max_sell:.3f}%]

Status: {'‚ö†Ô∏è LOW UNIQUENESS' if buy_uniqueness < 50 or sell_uniqueness < 50 else '‚úÖ GOOD'}
"""
axes[1, 1].text(0.1, 0.5, stats_text, fontsize=12, 
               verticalalignment='center', family='monospace',
               bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.5))

plt.tight_layout()
plt.savefig('expected_return_validation.png', dpi=150, bbox_inches='tight')
print("\nüìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: expected_return_validation.png")

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
print("\n\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–õ–Ø–¶–ò–ò –° –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨–Æ:")
volatility_query = """
WITH volatility_data AS (
    SELECT 
        symbol,
        datetime,
        buy_expected_return,
        sell_expected_return,
        (high - low) / close * 100 as price_range_pct
    FROM processed_market_data p
    JOIN raw_market_data r ON p.symbol = r.symbol AND p.datetime = r.datetime
    WHERE p.buy_expected_return IS NOT NULL
    LIMIT 10000
)
SELECT 
    CASE 
        WHEN price_range_pct < 0.5 THEN 'Low (<0.5%)'
        WHEN price_range_pct < 1.0 THEN 'Medium (0.5-1%)'
        WHEN price_range_pct < 2.0 THEN 'High (1-2%)'
        ELSE 'Very High (>2%)'
    END as volatility_group,
    COUNT(*) as count,
    COUNT(DISTINCT buy_expected_return) as unique_buy,
    COUNT(DISTINCT sell_expected_return) as unique_sell,
    AVG(buy_expected_return) as avg_buy,
    AVG(sell_expected_return) as avg_sell
FROM volatility_data
GROUP BY volatility_group
ORDER BY 
    CASE volatility_group
        WHEN 'Low (<0.5%)' THEN 1
        WHEN 'Medium (0.5-1%)' THEN 2
        WHEN 'High (1-2%)' THEN 3
        ELSE 4
    END
"""

df_volatility = pd.read_sql(volatility_query, conn)

print(f"\n{'–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å':<20} {'–ó–∞–ø–∏—Å–µ–π':>10} {'–£–Ω–∏–∫.Buy':>10} {'–£–Ω–∏–∫.Sell':>10} {'Avg Buy':>10} {'Avg Sell':>10}")
print("-"*80)
for _, row in df_volatility.iterrows():
    print(f"{row['volatility_group']:<20} {row['count']:>10,} {row['unique_buy']:>10} {row['unique_sell']:>10} {row['avg_buy']:>10.3f}% {row['avg_sell']:>10.3f}%")

conn.close()

print("\n\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
if buy_uniqueness < 50 or sell_uniqueness < 50:
    print("1. ‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ä–∞—Å—á–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã")
    print("3. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å—á–µ—Ç—ã")
else:
    print("1. ‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
    print("2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è expected_return")
    print("3. –°–ª–µ–¥–∏—Ç—å –∑–∞ –º–µ—Ç—Ä–∏–∫–∞–º–∏ MAE –∏ R¬≤ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è")