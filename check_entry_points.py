#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ processed_market_data
"""

import psycopg2
import yaml
import pandas as pd

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

db_config = config['database'].copy()
if not db_config.get('password'):
    db_config.pop('password', None)

conn = psycopg2.connect(**db_config)

print("="*80)
print("üîç –ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –û–¢ –¢–û–ß–ö–ò –í–•–û–î–ê")
print("="*80)

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
query = """
SELECT 
    p.symbol,
    p.datetime,
    r.close as entry_price,
    p.buy_expected_return,
    p.sell_expected_return,
    p.buy_profit_target,
    p.buy_loss_target,
    p.sell_profit_target,
    p.sell_loss_target
FROM processed_market_data p
JOIN raw_market_data r ON p.symbol = r.symbol AND p.datetime = r.datetime
WHERE p.symbol = %s
ORDER BY p.datetime
LIMIT 100
"""

# –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∏–º–≤–æ–ª
cursor = conn.cursor()
cursor.execute("SELECT DISTINCT symbol FROM processed_market_data LIMIT 1")
symbol = cursor.fetchone()

if not symbol:
    print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ processed_market_data –ø—É—Å—Ç–∞!")
    conn.close()
    exit()

symbol = symbol[0]
print(f"\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª: {symbol}")

df = pd.read_sql(query, conn, params=(symbol,))

if len(df) > 0:
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π
    print("\nüìã –ü–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞):")
    print("-"*120)
    print(f"{'–í—Ä–µ–º—è':<20} {'–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞':>12} {'Buy Return':>12} {'Sell Return':>12} {'Buy P/L':>15} {'Sell P/L':>15}")
    print("-"*120)
    
    for i in range(min(20, len(df))):
        row = df.iloc[i]
        buy_pl = "Profit" if row['buy_profit_target'] == 1 else ("Loss" if row['buy_loss_target'] == 1 else "-")
        sell_pl = "Profit" if row['sell_profit_target'] == 1 else ("Loss" if row['sell_loss_target'] == 1 else "-")
        
        print(f"{str(row['datetime']):<20} {row['entry_price']:>12.2f} {row['buy_expected_return']:>12.3f}% {row['sell_expected_return']:>12.3f}% {buy_pl:>15} {sell_pl:>15}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    print("\n\nüîç –ü–†–û–í–ï–†–ö–ê: –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –†–ê–ó–ù–´–ï expected_returns")
    print("(—Ç.–∫. –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = —Å–≤–æ—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö 100 –±–∞—Ä–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥
    duplicates = 0
    for i in range(1, len(df)):
        if (df.iloc[i]['buy_expected_return'] == df.iloc[i-1]['buy_expected_return'] and 
            df.iloc[i]['sell_expected_return'] == df.iloc[i-1]['sell_expected_return']):
            duplicates += 1
    
    if duplicates > 0:
        print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω–æ {duplicates} –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥!")
        print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ä–∞—Å—á–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º.")
    else:
        print(f"\n‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã - —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
    
    # 3. –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏
    print("\n\nüìä –õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê:")
    print("–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç:")
    print("1. –¢–û–ß–ö–£ –í–•–û–î–ê = close —Ü–µ–Ω–∞ —ç—Ç–æ–≥–æ –±–∞—Ä–∞")
    print("2. –ê–ù–ê–õ–ò–ó = —Å–ª–µ–¥—É—é—â–∏–µ 100 –±–∞—Ä–æ–≤ (25 —á–∞—Å–æ–≤)")
    print("3. –†–ï–ó–£–õ–¨–¢–ê–¢ = expected_return –¥–ª—è –≤—Ö–æ–¥–∞ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    print(f"\n\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¥–ª—è {symbol}:")
    stats = df['buy_expected_return'].describe()
    print(f"Count: {stats['count']:.0f}")
    print(f"Mean:  {stats['mean']:.3f}%")
    print(f"Std:   {stats['std']:.3f}%")
    print(f"Min:   {stats['min']:.3f}%")
    print(f"25%:   {stats['25%']:.3f}%")
    print(f"50%:   {stats['50%']:.3f}%")
    print(f"75%:   {stats['75%']:.3f}%")
    print(f"Max:   {stats['max']:.3f}%")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    print("\n\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–î–ù–û–ô –¢–û–ß–ö–ò:")
    example_idx = 10
    example = df.iloc[example_idx]
    
    print(f"\n–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: {example['datetime']}")
    print(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${example['entry_price']:.2f}")
    print(f"Buy Expected Return: {example['buy_expected_return']:.3f}%")
    print(f"Sell Expected Return: {example['sell_expected_return']:.3f}%")
    
    # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ –±–∞—Ä—ã –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏
    future_query = """
    SELECT datetime, high, low, close
    FROM raw_market_data
    WHERE symbol = %s 
    AND datetime > %s
    ORDER BY datetime
    LIMIT 5
    """
    
    future_df = pd.read_sql(future_query, conn, params=(symbol, example['datetime']))
    
    if len(future_df) > 0:
        print(f"\nüìä –°–ª–µ–¥—É—é—â–∏–µ 5 –±–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:")
        print(f"{'–í—Ä–µ–º—è':<20} {'High':>10} {'Low':>10} {'Close':>10}")
        print("-"*55)
        for _, bar in future_df.iterrows():
            print(f"{str(bar['datetime']):<20} {bar['high']:>10.2f} {bar['low']:>10.2f} {bar['close']:>10.2f}")
    
else:
    print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")

conn.close()

print("\n\nüí° –í–´–í–û–î:")
print("–ï—Å–ª–∏ expected_returns —Ä–∞–∑–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ - —Ä–∞—Å—á–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–´–ô")
print("–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏")