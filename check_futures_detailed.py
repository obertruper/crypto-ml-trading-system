#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ Bybit
"""

from pybit.unified_trading import HTTP
import logging
import json

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_futures_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
    session = HTTP(testnet=False)
    
    logger.info("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ Bybit\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º linear futures (USDT perpetual)
        linear_response = session.get_instruments_info(
            category="linear",
            limit=1000  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π
        )
        
        if linear_response['retCode'] == 0:
            instruments = linear_response['result']['list']
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(instruments)} –ª–∏–Ω–µ–π–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤\n")
            
            # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            target_symbols = ['XRP', 'TRX', 'TON', 'UNI', 'TIA', 'TWT', 'WIF']
            
            for target in target_symbols:
                logger.info(f"\nüîç –ü–æ–∏—Å–∫ {target}:")
                found_symbols = []
                
                for inst in instruments:
                    symbol = inst.get('symbol', '')
                    base_coin = inst.get('baseCoin', '')
                    quote_coin = inst.get('quoteCoin', '')
                    status = inst.get('status', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    if (target in symbol or 
                        target == base_coin or 
                        target in base_coin):
                        
                        found_symbols.append({
                            'symbol': symbol,
                            'base': base_coin,
                            'quote': quote_coin,
                            'status': status
                        })
                
                if found_symbols:
                    for fs in found_symbols:
                        logger.info(f"  ‚úÖ {fs['symbol']} (–ë–∞–∑–∞: {fs['base']}, –ö–æ—Ç–∏—Ä–æ–≤–∫–∞: {fs['quote']}, –°—Ç–∞—Ç—É—Å: {fs['status']})")
                else:
                    logger.info(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ USDT —Ñ—å—é—á–µ—Ä—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.info("\n\nüìä –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT —Ñ—å—é—á–µ—Ä—Å–æ–≤:")
            usdt_futures = [inst['symbol'] for inst in instruments 
                          if inst.get('quoteCoin') == 'USDT' 
                          and inst.get('status') == 'Trading']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            for i, symbol in enumerate(sorted(usdt_futures)[:20]):
                logger.info(f"  {i+1}. {symbol}")
            
            logger.info(f"\n  ... –∏ –µ—â–µ {len(usdt_futures) - 20} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ XRPUSDT —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            logger.info("\n\nüéØ –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ XRPUSDT:")
            
            # –°–ø–æ—Å–æ–± 1: –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–µ
            xrp_in_list = any(inst['symbol'] == 'XRPUSDT' for inst in instruments)
            logger.info(f"  –ü–æ–∏—Å–∫ –≤ —Å–ø–∏—Å–∫–µ: {'‚úÖ –ù–∞–π–¥–µ–Ω' if xrp_in_list else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
            
            # –°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
            try:
                ticker_response = session.get_tickers(
                    category="linear",
                    symbol="XRPUSDT"
                )
                if ticker_response['retCode'] == 0:
                    logger.info(f"  –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ä–∞: ‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    ticker_data = ticker_response['result']['list'][0] if ticker_response['result']['list'] else None
                    if ticker_data:
                        logger.info(f"    –¶–µ–Ω–∞: {ticker_data.get('lastPrice')}")
                        logger.info(f"    –û–±—ä–µ–º 24—á: {ticker_data.get('volume24h')}")
                else:
                    logger.info(f"  –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ä–∞: ‚ùå –û—à–∏–±–∫–∞ - {ticker_response['retMsg']}")
            except Exception as e:
                logger.info(f"  –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ä–∞: ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {str(e)}")
            
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {linear_response['retMsg']}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_futures_detailed()