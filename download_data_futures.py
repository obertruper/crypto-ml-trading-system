#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit FUTURES (–¥–µ—Ä–∏–≤–∞—Ç–∏–≤—ã)
"""

import time
import psycopg2
from psycopg2.extras import execute_batch
from datetime import datetime, timedelta
import logging
from tqdm import tqdm
from pybit.unified_trading import HTTP

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class PostgreSQLManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL"""

    def __init__(self, db_config: dict):
        self.db_config = db_config.copy()
        if not self.db_config.get('password'):
            self.db_config.pop('password', None)
        self.connection = None

    def connect(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        try:
            self.connection = psycopg2.connect(**self.db_config)
            self.connection.autocommit = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise

    def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        if self.connection:
            self.connection.close()
            logger.info("üì§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")

    def execute_query(self, query: str, params=None, fetch=False):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å"""
        try:
            with self.connection.cursor() as cursor:
                cursor.execute(query, params)
                if fetch:
                    return cursor.fetchall()
                return cursor.rowcount
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise

    def execute_batch_insert(self, query: str, data: list):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.connection.cursor() as cursor:
                execute_batch(cursor, query, data, page_size=1000)
                return cursor.rowcount
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏: {e}")
            raise


class BybitFuturesDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Bybit Futures API"""

    def __init__(self, db_manager: PostgreSQLManager):
        self.db = db_manager
        self.session = HTTP(testnet=False)

    def get_futures_symbols(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            response = self.session.get_instruments_info(category="linear")
            
            if response['retCode'] == 0:
                symbols = []
                for instrument in response['result']['list']:
                    symbol = instrument['symbol']
                    status = instrument['status']
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ USDT perpetual –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    if symbol.endswith('USDT') and status == 'Trading':
                        symbols.append(symbol)
                
                # –ò—Å–∫–ª—é—á–∞–µ–º TESTUSDT –∏ –¥—Ä—É–≥–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
                symbols = [s for s in symbols if not any(test in s for test in ['TEST', 'DEMO', 'MOCK'])]
                
                return sorted(symbols)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response['retMsg']}")
                return []
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []

    def get_klines(self, symbol: str, interval: str, start_time: int, end_time: int) -> list:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (klines) –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞

        Args:
            symbol: –°–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª (15, 30, 60 –∏ —Ç.–¥.)
            start_time: –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            end_time: –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π [[timestamp, open, high, low, close, volume, turnover]]
        """
        
        try:
            response = self.session.get_kline(
                category="linear",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º linear futures
                symbol=symbol,
                interval=interval,
                start=start_time,
                end=end_time,
                limit=1000
            )

            if response['retCode'] == 0:
                klines = response['result']['list']
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                return klines[::-1]
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response['retMsg']}")
                return []

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return []

    def check_existing_data(self, symbol: str, interval: int) -> tuple:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

        Returns:
            tuple: (has_data, last_timestamp)
        """
        
        query = """
        SELECT MAX(timestamp) 
        FROM raw_market_data 
        WHERE symbol = %s AND interval_minutes = %s AND market_type = 'futures'
        """
        
        result = self.db.execute_query(query, (symbol, interval), fetch=True)
        
        if result and result[0][0]:
            return True, result[0][0]
        
        return False, None

    def insert_raw_data_batch(self, symbol: str, klines: list, interval: int) -> int:
        """
        –í—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–æ–º –≤ –ë–î

        Args:
            symbol: –°–∏–º–≤–æ–ª
            klines: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        
        if not klines:
            return 0

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        insert_data = []
        
        for kline in klines:
            timestamp = int(kline[0])
            datetime_obj = datetime.fromtimestamp(timestamp / 1000)
            
            insert_data.append((
                symbol,
                timestamp,
                datetime_obj,
                float(kline[1]),  # open
                float(kline[2]),  # high
                float(kline[3]),  # low
                float(kline[4]),  # close
                float(kline[5]),  # volume
                float(kline[6]),  # turnover
                interval,
                'futures'  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ä—ã–Ω–∫–∞
            ))

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        insert_query = """
        INSERT INTO raw_market_data 
        (symbol, timestamp, datetime, open, high, low, close, volume, turnover, interval_minutes, market_type)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (symbol, timestamp, interval_minutes) DO NOTHING
        """

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É market_type –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            self.db.execute_query("""
                ALTER TABLE raw_market_data 
                ADD COLUMN IF NOT EXISTS market_type VARCHAR(20) DEFAULT 'spot'
            """)
        except:
            pass

        inserted = self.db.execute_batch_insert(insert_query, insert_data)
        
        logger.info(f"üíæ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
        
        return inserted

    def download_historical_data(self, symbol: str, interval: str = '15', days: int = 1095) -> dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞

        Args:
            symbol: –°–∏–º–≤–æ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15)
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –≥–æ–¥–∞)

        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        """
        
        logger.info(f"\n{'='*50}")
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        logger.info(f"{'='*50}")
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö {symbol} (–∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}m) –∑–∞ {days} –¥–Ω–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        has_data, last_timestamp = self.check_existing_data(symbol, int(interval))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        end_time = int(time.time() * 1000)
        
        if has_data and last_timestamp:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
            start_time = last_timestamp + (int(interval) * 60 * 1000)
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å {datetime.fromtimestamp(start_time/1000)}")
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            start_time = end_time - (days * 24 * 60 * 60 * 1000)
            logger.info(f"üìä –ù–æ–≤—ã–π —Å–∏–º–≤–æ–ª. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å {datetime.fromtimestamp(start_time/1000)}")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        interval_ms = int(interval) * 60 * 1000
        max_klines_per_request = 1000
        chunk_size_ms = interval_ms * max_klines_per_request

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        total_requests = (end_time - start_time) // chunk_size_ms + 1

        total_inserted = 0
        current_start = start_time

        with tqdm(total=total_requests, desc=f"–ó–∞–≥—Ä—É–∑–∫–∞ {symbol} (futures)") as pbar:
            while current_start < end_time:
                current_end = min(current_start + chunk_size_ms, end_time)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                klines = self.get_klines(symbol, interval, current_start, current_end)

                if klines:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
                    inserted = self.insert_raw_data_batch(symbol, klines, int(interval))
                    total_inserted += inserted

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    last_timestamp = int(klines[-1][0])
                    current_start = last_timestamp + interval_ms
                else:
                    current_start = current_end

                pbar.update(1)
                time.sleep(0.1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_count = self.db.execute_query(
            "SELECT COUNT(*) FROM raw_market_data WHERE symbol = %s AND interval_minutes = %s AND market_type = 'futures'",
            (symbol, int(interval)),
            fetch=True
        )[0][0]

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        period_query = """
        SELECT MIN(datetime), MAX(datetime), MIN(close), MAX(close), AVG(volume)
        FROM raw_market_data 
        WHERE symbol = %s AND interval_minutes = %s AND market_type = 'futures'
        """
        period_data = self.db.execute_query(period_query, (symbol, int(interval)), fetch=True)[0]

        stats = {
            'symbol': symbol,
            'market_type': 'futures',
            'interval': interval,
            'total_records': final_count,
            'newly_inserted': total_inserted,
            'start_date': period_data[0],
            'end_date': period_data[1],
            'min_price': float(period_data[2]) if period_data[2] else 0,
            'max_price': float(period_data[3]) if period_data[3] else 0,
            'avg_volume': float(period_data[4]) if period_data[4] else 0
        }

        logger.info(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {symbol}:")
        logger.info(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']:,}")
        logger.info(f"   üìà –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {stats['newly_inserted']:,}")
        logger.info(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {stats['start_date']} - {stats['end_date']}")
        logger.info(f"   üí∞ –¶–µ–Ω–∞: ${stats['min_price']:.2f} - ${stats['max_price']:.2f}")

        return stats

    def download_multiple_symbols(self, symbols: list = None, interval: str = '15', days: int = 1095) -> dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ (–µ—Å–ª–∏ None - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ)
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π

        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        """
        
        if symbols is None:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            symbols = self.get_futures_symbols()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(symbols)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        
        results = {}
        
        for i, symbol in enumerate(symbols, 1):
            logger.info(f"\n[{i}/{len(symbols)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}")
            
            try:
                stats = self.download_historical_data(symbol, interval, days)
                results[symbol] = {
                    'success': True,
                    'stats': stats
                }
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
                results[symbol] = {'success': False, 'error': str(e)}

        return results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import yaml
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r') as f:
        config = yaml.safe_load(f)
    
    db_config = config['database']
    data_config = config['data_download']
    
    # –£–±–∏—Ä–∞–µ–º TESTUSDT –∏–∑ —Å–ø–∏—Å–∫–∞
    symbols = [s for s in data_config['symbols'] if 'TEST' not in s]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    db_manager = PostgreSQLManager(db_config)
    downloader = BybitFuturesDownloader(db_manager)
    
    try:
        db_manager.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        available_futures = downloader.get_futures_symbols()
        logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ {len(available_futures)} —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö
        symbols_to_download = [s for s in symbols if s in available_futures]
        
        logger.info(f"‚úÖ –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(symbols_to_download)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞")
        logger.info(f"‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö: {len(symbols) - len(symbols_to_download)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ
        not_available = [s for s in symbols if s not in available_futures]
        if not_available:
            logger.info(f"   –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(not_available[:10])}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        interval = data_config['interval']
        days = data_config['days']
        
        results = downloader.download_multiple_symbols(symbols_to_download, interval, days)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = sum(1 for r in results.values() if r.get('success', False))
        logger.info(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {success_count}/{len(symbols_to_download)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db_manager.disconnect()


if __name__ == "__main__":
    main()